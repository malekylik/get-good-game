!function(t){function e(e){for(var s,r,a=e[0],h=e[1],l=e[2],c=0,g=[];c<a.length;c++)r=a[c],i[r]&&g.push(i[r][0]),i[r]=0;for(s in h)Object.prototype.hasOwnProperty.call(h,s)&&(t[s]=h[s]);for(d&&d(e);g.length;)g.shift()();return o.push.apply(o,l||[]),n()}function n(){for(var t,e=0;e<o.length;e++){for(var n=o[e],s=!0,a=1;a<n.length;a++){var h=n[a];0!==i[h]&&(s=!1)}s&&(o.splice(e--,1),t=r(r.s=n[0]))}return t}var s={},i={1:0},o=[];function r(e){if(s[e])return s[e].exports;var n=s[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=s,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="";var a=window.webpackJsonp=window.webpackJsonp||[],h=a.push.bind(a);a.push=e,a=a.slice();for(var l=0;l<a.length;l++)e(a[l]);var d=h;o.push([1,0]),n()}([,function(t,e,n){"use strict";n.r(e);class s{constructor(t,e){this.htmlComponent=document.createElement("canvas"),this.htmlComponent.setAttribute("tabindex",0),this.context=this.htmlComponent.getContext("2d"),void 0===t&&(t=1366),void 0===e&&(e=635),this.setSize(t,e),document.body.appendChild(this.htmlComponent),this.scenes=[],this.ui=[]}getHtml(){return this.htmlComponent}getContext(){return this.context}setSize(t,e){this.width=t,this.height=e,this.htmlComponent.style.width=`${t}px`,this.htmlComponent.style.height=`${e}px`,this.context.canvas.width=t,this.context.canvas.height=e}clear(t="#000000"){this.context.fillStyle=t,this.context.fillRect(0,0,this.width,this.height)}addScene(t){this.scenes.push(t)}addUI(t){this.ui.push(t)}removeScene(t){const e=this.scenes.indexOf(t);return 0!=~e&&(this.scenes.splice(e,1),!0)}resetScenes(){this.scenes=[]}draw(t){this.clear();for(let e of this.scenes)e.draw(this.context,t);for(let e of this.ui)for(let n of e.uiComponents)n.draw(this.context,t)}}class i{constructor(){this.queue=[],this.queueIndex=0}add(t){this.queue.push(t)}getNext(){if(0===this.queue.length)return null;if(this.queueIndex<this.queue.length){const t=this.queue[this.queueIndex];return this.queueIndex+=1,t}return this.queueIndex=0,this.queue=[],null}hasNext(){const t=!!(this.queue.length-this.queueIndex);return t||0===this.queue.length||(this.queueIndex=0,this.queue=[]),t}remain(){return this.queue.length-this.queueIndex}}var o={MOUSE:{MOUSE_MOVE:"mousemove",MOUSE_ENTER:"mouseenter",MOUSE_LEAVE:"mouseleave",MOUSE_DOWN:"mousedown"},KEYBOARD:{KEY_PRESS:"keypress",KEY_DOWN:"keydown"},ANIMATION:{ANIMATION_END:"animationend"}};class r{constructor(){this.selected=null,this.hovered=null,this.uiComponents=[]}handleEvent(t){if(o[t.subtype]===o.MOUSE)for(let e of this.uiComponents){const n=e.checkForCollision({...t.payload.mouseCoord,width:1,height:1});let s=null;if(null!==n){let e=0,i=-1;n.forEach(({depth:t},n)=>{t>=e&&(e=t,i=n)}),s=n[i].o,t.target=s}else{const t=document.querySelector("canvas");"auto"!==t.style.cursor&&(t.style.cursor="auto")}this.hovered!==s&&(null!==this.hovered&&(this.hovered.handlers.handle({...t,type:o.MOUSE.MOUSE_LEAVE,target:this.hovered,relatedTarget:s}),this.hovered.setHovered(!1)),null!==s&&s.handlers.handle({...t,type:o.MOUSE.MOUSE_ENTER,target:s,relatedTarget:this.hovered}),this.hovered=s),t.type===o.MOUSE.MOUSE_DOWN&&this.selected!==s&&(this.selected&&(this.selected.isSelected=!1),this.selected=s,null!==s&&(s.isSelected=!0)),null!==s&&s.handlers.handle(t)}o[t.subtype]===o.KEYBOARD&&this.selected&&(t.target=this.selected,this.selected.handlers.handle(t))}add(t){this.uiComponents.push(t)}remove(t){const e=this.uiComponents.indexOf(t);~e&&this.uiComponents.splice(e,1)}}var a=n(0);class h{constructor(t,e,n,s){this.metric={top:t,left:e,width:n,height:s},this.blinkTime=500,this.elapsedTime=0,this.color="#000000"}setPosition(t,e){this.metric.top=t,this.metric.left=e}setColor(t="#000000"){this.color=t}draw(t,e){t.save(),this.elapsedTime<this.blinkTime&&(t.strokeStyle!==this.color&&(t.strokeStyle=this.color),t.beginPath(),t.moveTo(this.metric.left,this.metric.top),t.lineTo(this.metric.left,this.metric.top+this.metric.height),t.stroke()),this.elapsedTime+=e,this.elapsedTime>2*this.blinkTime&&(this.elapsedTime=0),t.restore()}}class l{isInside(t,e){Object.keys(t);return t.left<e.left+e.width&&t.left+t.width>e.left&&t.top<e.top+e.height&&t.height+t.top>e.top}}class d{constructor(t){this.animatedProperties={},Object(a.merge)(this.animatedProperties,t.properties),this.animations={}}setAnimation(t,e,n,s){this.animations[t]={animationFunc:s,timeCount:n,time:1e3*e,elapseTime:0,animationTimePast:0}}deleteAnimation(t){delete this.animations[t]}animate(t,e,n){const s=Object.keys(this.animations);for(let i=0;i<s.length;i++){const r=this.animations[s[i]];r.animationFunc(t,e.properties,this.animatedProperties,r.elapseTime/r.time,e),r.elapseTime+=n,r.elapseTime>r.time&&(r.elapseTime=0,r.animationTimePast+=1,this.animatedProperties={},e.hovered?Object(a.merge)(this.animatedProperties,e.hoverProperties):Object(a.merge)(this.animatedProperties,e.properties),r.animationTimePast>=r.timeCount&&(delete this.animations[s[i]],e.handlers.handle({target:e,type:o.ANIMATION.ANIMATION_END,subtype:"ANIMATION",payload:{animationName:s[i]}})))}}}class c{constructor(){this[o.MOUSE.MOUSE_MOVE]=[],this[o.MOUSE.MOUSE_DOWN]=[],this[o.KEYBOARD.KEY_PRESS]=[],this[o.KEYBOARD.KEY_DOWN]=[],this[o.ANIMATION.ANIMATION_END]=[]}handle(t){const e=this[t.type];if(e)for(let n of e)n(t)}addEventListener(t,e){this[t]&&this[t].push(e)}}const g=document.createElement("canvas").getContext("2d"),u=(t,e,n)=>(g.font=`${n}px ${e}`,g.measureText(t).width);class m{constructor(t=0,e=0,n=0,s=0,i=null,r){this.parentComponent=i,this.properties={},this.properties.drawBorder=!1,this.properties.overflow="visible",this.hovered=!1,this.properties.color={backgroundColor:"rgba(0,0,0,0)",borderColor:"#000000"},this.backgroundImage=null,this.properties.top=t,this.properties.left=e,this.properties.width=n,this.properties.height=s,this.properties.cursor="auto",this.collision=new l,this.animations=new d(this),this.handlers=new c,this.handlers.addEventListener(o.MOUSE.MOUSE_MOVE,this.handleHover),({top:t,left:e,width:n,height:s}=this.convertFromPercentageToPixel(t,e,n,s)),this.hoverProperties={},Object(a.merge)(this.hoverProperties,this.properties),this.setBoundingClientRect(t,e,n,s),this.scrollXOffset=0,this.scrollYOffset=0,null!==i?(i.addComponent(this,r),Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect)):(this.initialBoundingClientRect={},Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect))}addEventListener(t,e){this.handlers.addEventListener(t,e)}convertFromPercentageToPixel(t,e,n,s){const i=this.getParentComponent();let o,r;const a=/%/,h=Math.floor;return null===i?(o=window.innerWidth,r=window.innerHeight):({width:o,height:r}=i.getBoundingClientRect()),"string"==typeof t&&a.test(t)&&(t=h(parseFloat(t)/100*r)),"string"==typeof e&&a.test(e)&&(e=h(parseFloat(e)/100*o)),"string"==typeof n&&a.test(n)&&(n=h(parseFloat(n)/100*o)),"string"==typeof s&&a.test(s)&&(s=h(parseFloat(s)/100*r)),{top:t,left:e,width:n,height:s}}traverse(t){return t(this)}alignCenter(){const t=this.getParentComponent();let e=window.innerWidth,n=window.innerHeight;null!==t&&({width:e,height:n}=t.getBoundingClientRect());const{width:s,height:i}=this.getBoundingClientRect();let o=Math.round((n-i)/2),r=Math.round((e-s)/2);this.setBoundingClientRect(o,r,s,i)}setBackgroundImage(t=null){this.backgroundImage=t;const{width:e,height:n}=this.getBoundingClientRect();this.backgroundImage.setSize(e,n)}calculateTotalWidthComponent(t,e,n,s,i){const o=Object(a.get)(t,i);e[String(s)]=n+o}handleHover(t){const e=t.target,n=document.querySelector("canvas");n.style.cursor!==e.properties.cursor&&(n.style.cursor=e.properties.cursor),!0!==e.hovered&&(e.hovered=!0,Object(a.merge)(e.animations.animatedProperties,e.hoverProperties))}getBoundingClientRect(){return this.animations.animatedProperties.boundingClientRect}getClippedBoundingClientRect(){return this.animations.animatedProperties.clippedBoundingClientRect}setHovered(t){this.hovered!==t&&(this.hovered=t,t?Object(a.merge)(this.animations.animatedProperties,this.hoverProperties):Object(a.merge)(this.animations.animatedProperties,this.properties))}setBoundingClientRect(t,e,n,s){const i=this.getBoundingClientRect();let o,r,h,l;i&&({top:o,left:r,width:h,height:l}=i),void 0===t&&i&&"number"!=typeof t&&(t=o),void 0===e&&i&&"number"!=typeof e&&(e=r),void 0===n&&i&&"number"!=typeof n&&(n=h),void 0===s&&i&&"number"!=typeof s&&(s=l),this.properties.top=t,this.properties.left=e,this.properties.width=n,this.properties.height=s,this.properties.boundingClientRect={top:t,left:e,width:n,height:s,right:e+n,bottom:t+s},this.animations.animatedProperties.boundingClientRect={},this.hoverProperties.boundingClientRect={},Object(a.merge)(this.animations.animatedProperties.boundingClientRect,this.properties.boundingClientRect),Object(a.merge)(this.hoverProperties.boundingClientRect,this.properties.boundingClientRect)}setBoundingClippedClientRect(t=0,e=0,n=0,s=0){this.properties.clippedBoundingClientRect={top:t,left:e,width:n,height:s,right:e+n,bottom:t+s},this.animations.animatedProperties.clippedBoundingClientRect={},this.hoverProperties.clippedBoundingClientRect={},Object(a.merge)(this.animations.animatedProperties.clippedBoundingClientRect,this.properties.clippedBoundingClientRect),Object(a.merge)(this.hoverProperties.clippedBoundingClientRect,this.properties.clippedBoundingClientRect)}setBackgroundColor(t="#000000"){this.properties.color.backgroundColor=t,this.hoverProperties.color.backgroundColor=t,this.animations.animatedProperties.color.backgroundColor=t}setBorderColor(t="#000000"){this.properties.color.borderColor=t,this.hoverProperties.color.borderColor=t,this.animations.animatedProperties.color.borderColor=t}setParentComponent(t){this.parentComponent=t;let{top:e,left:n,width:s,height:i}=this.properties;({top:e,left:n,width:s,height:i}=this.convertFromPercentageToPixel(e,n,s,i)),this.setBoundingClientRect(e,n,s,i),this.initialBoundingClientRect={},Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect)}setOverflow(t){if(this.properties.overflow=t,this.hoverProperties.overflow=t,this.animations.animatedProperties.overflow=t,"overflow"===t&&this.calculateClippedSize(),"scroll"===t){const t=this.calculateTotalHeightComponent(),e=this.calculateTotalWidthComponent(),{width:n,height:s}=this.getBoundingClientRect();t>s&&(this.scrollY=new f("vertical",t,this)),e>n&&(this.scrollX=new f("horizontal",e,this))}}calculateClippedSize(){this.traverse(t=>{const e=t.getParentComponent();let{top:n,right:s,bottom:i,left:o}=t.getBoundingClientRect();if(null!==e){const t=e.getBoundingClientRect();o<0&&(o=0),n<0&&(n=0),t.width<s&&(s=t.width),t.height<i&&(i=n>t.top?n:t.height)}t.setBoundingClippedClientRect(n,o,Math.abs(s-o),Math.abs(i-n))})}getParentComponent(){return this.parentComponent}getBackgroundImage(){return this.backgroundImage}getOverflow(){return this.properties.overflow}addComponent(t){}removeComponent(t){}setContextProperties(t,e){this.animations.animate(t,this,e)}paintComponent(t,e){let{top:n,left:s,width:i,height:o}=this.getBoundingClientRect(),r=this.animations.animatedProperties.color;if(this.drawBorder&&(t.strokeStyle=r.borderColor,t.strokeRect(s,n,i,o)),t.fillStyle=r.backgroundColor,t.fillRect(s,n,i,o),"scroll"===this.properties.overflow||"overflow"===this.properties.overflow){const e=new Path2D;e.rect(s,n,i,o),t.clip(e,"nonzero")}null!==this.backgroundImage&&this.backgroundImage.draw(t,s,n)}drawComponent(t,e){this.setContextProperties(t,e),this.paintComponent(t,e)}draw(t,e){t.save();const n=this.getParentComponent();if(null!==n&&t.translate(n.getBoundingClientRect().left,n.getBoundingClientRect().top),this.drawComponent(t,e),this.children)for(let n of this.children)n.component.draw(t,e);t.restore()}}class p extends m{constructor(t=0,e=0,n=0,s=0,i=null){super(t,e,n,s,i),this.children=[]}addComponent(t,e){t.setParentComponent(this),void 0!==e&&"string"==typeof e?this.children.push({component:t,name:e}):this.children.push({component:t,name:Object(a.uniqueId)("component ")})}removeComponent(t){const e=this.children.findIndex(({component:e})=>e===t);return 0!=~e&&(this.children.splice(e,1),!0)}getChildComponent(t){if("number"==typeof t&&this.children.length<t&&t>=0)return this.children[t].component;const e=this.children.find(e=>e.name===t);return e?e.component:null}dropChildren(){this.children=[]}traverse(t){if(!t(this)&&this.children)for(let e of this.children){const{component:n}=e;if(n.traverse)n.traverse(t);else{if(t(n))return}}}setScrollYOffer(t){this.scrollYOffset=t,this.children.forEach(({component:e})=>{if(e instanceof f)return;const{top:n}=e.initialBoundingClientRect;e.setBoundingClientRect(n+t);const s=this.getBackgroundImage();s&&s.setScrollYOffer(s.y+t)})}setScrollXOffer(t){this.scrollXOffset=t,this.children.forEach(({component:e})=>{if(e instanceof f)return;const{left:n}=e.initialBoundingClientRect;e.setBoundingClientRect(void 0,n+t);const s=this.getBackgroundImage();s&&s.setScrollXOffer(s.x+t)})}calculateTotalWidthComponent(){if(0===this.children.length)return null;let t=this.children[0].component;const{left:e,width:n}=t.getBoundingClientRect();let s=e+n;for(let t=1;t<this.children.length;t++){const e=this.children[t].component;let{left:n,width:i}=e.getBoundingClientRect();n+i>s&&(s=n+i)}return s}calculateTotalHeightComponent(){if(0===this.children.length)return null;let t=this.children[0].component;const{top:e,height:n}=t.getBoundingClientRect();let s=e+n;for(let t=1;t<this.children.length;t++){const e=this.children[t].component;let{top:n,height:i}=e.getBoundingClientRect();n+i>s&&(s=n+i)}return s}checkForCollision(t){const e=[];let n=1;return this.traverse(s=>{const{top:i,left:o,width:r,height:a}=s.getBoundingClientRect(),h={width:r,height:a};let l=0,d=0,c=1,g=s.getParentComponent();const u=[];for(;null!==g;){let{top:t,left:e}=g.getBoundingClientRect();l+=t,d+=e,c+=1,"scroll"!==g.getOverflow()&&"overflow"!==g.getOverflow()||u.push(g),g=g.getParentComponent()}if(l+=i,d+=o,h.top=l,h.left=d,0!==u.length)for(let t=0;t<u.length;t++){let{top:e,left:n,width:i,height:o}=u[t].getBoundingClientRect(),r=e,a=n,l=u[t].getParentComponent();for(;null!==l;){let{top:t,left:e}=l.getBoundingClientRect();r+=t,a+=e,l=l.getParentComponent()}const d={top:r,left:a,width:i,height:o};if(!s.collision.isInside(d,h))return null}this.collision.isInside(h,t)&&(e.push({o:s,depth:c}),c>n&&(n=c))}),0!==e.length?e:null}}class f extends p{constructor(t,e,n){let s,i=window.innerWidth,r=window.innerHeight;n&&({width:i,height:r}=n.getBoundingClientRect()),"vertical"===t?super(0,i-17,17,s=r,n):super(r-17,0,s=i,17,n),this.childWidth=e,this.setBackgroundColor("#F1F1F1");let a,h=String.fromCharCode(parseInt("25c4",16)),l=String.fromCharCode(parseInt("25ba",16));"vertical"===t&&(h=String.fromCharCode(parseInt("25b2",16)),l=String.fromCharCode(parseInt("25bc",16))),this.orientation=t;const d=new C(0,0,17,17,h,this);let c;a="vertical"===t?new C(s-34,0,17,17,l,this):new C(0,s-34,17,17,l,this),d.setBackgroundColor("#F1F1F1"),a.setBackgroundColor("#F1F1F1"),d.hoverProperties.color.backgroundColor="#D2D2D2",a.hoverProperties.color.backgroundColor="#D2D2D2";const g=s-51;let u,f,w;c="vertical"===t?new p(17,0,17,g,this):new p(0,17,g,17,this),f="vertical"===t?r/e:i/e,(u="vertical"===t?new m(0,2,13,Math.floor(f*g),c):new m(2,0,Math.floor(f*g),13,c)).setBackgroundColor("#C1C1C1"),this.scrollPos=0,this.scrollPosMax=g-Math.floor(f*g),this.partOfParent=f,w="vertical"===t?e-r:e-i;let y=0,I=10/this.scrollPosMax;d.addEventListener(o.MOUSE.MOUSE_DOWN,t=>{this.scrollPos+10<0?(this.scrollPos+=10,y+=I*w):(this.scrollPos=0,y=0),"vertical"===this.orientation?(u.setBoundingClientRect(-this.scrollPos),n.setScrollYOffer(y)):(u.setBoundingClientRect(void 0,-this.scrollPos),n.setScrollXOffer(y))}),a.addEventListener(o.MOUSE.MOUSE_DOWN,t=>{this.scrollPos-10>-this.scrollPosMax?(this.scrollPos-=10,y-=I*w):(this.scrollPos=-this.scrollPosMax,y=-w),"vertical"===this.orientation?(u.setBoundingClientRect(-this.scrollPos),n.setScrollYOffer(y)):(u.setBoundingClientRect(void 0,-this.scrollPos),n.setScrollXOffer(y))})}}class C extends m{constructor(t=0,e=0,n=0,s=0,i="",o=null){super(t,e,n,s,o);const r=u(i,"monospace","16px");this.label=new w(Math.floor(s/2)-8,Math.floor(n/2)-Math.floor(r/2),r+1,16,i),this.properties.cursor="pointer"}paintComponent(t,e){super.paintComponent(t,e);const{top:n,left:s}=this.getBoundingClientRect();t.save(),t.translate(s,n),this.label.draw(t,e),t.restore()}}class w extends m{constructor(t=0,e=0,n=0,s=0,i="",r=null){super(t,e,n,s,r),this.text=i,this.properties.color.textColor="#000000",this.properties.textProperties={textAlign:"left",textBaseline:"top",fontSize:16,fontFamily:"monospace"},this.maxTextLength="infinite",this.editable=!1,this.handlers.addEventListener(o.MOUSE.MOUSE_DOWN,this.handleMouseDown),this.handlers.addEventListener(o.KEYBOARD.KEY_PRESS,this.handleKeyPress),this.handlers.addEventListener(o.KEYBOARD.KEY_DOWN,this.handleKeyDown),this.linesMetric=[],this.textLines=[],this.cursorPosition={row:0,column:0,index:0},this.properties.cursor="text",Object(a.merge)(this.animations.animatedProperties,this.properties),Object(a.merge)(this.hoverProperties,this.properties),this.neededToRecalculate={needed:!0,row:0},this.cursor=new h(0,0,1,this.properties.textProperties.fontSize)}handleMouseDown(t){if(t.target.editable){const e=t.target;if(""===e.text)return e.cursor.setPosition(0,0),void(e.cursorPosition={row:0,column:0,index:0});let n=!1;const{top:s,left:i}=e.getBoundingClientRect();let o=s,r=i,a=e.getParentComponent();for(;a;){const{top:t,left:e}=a.getBoundingClientRect();o+=t,r+=e,a=a.getParentComponent()}const h={top:t.payload.mouseCoord.top,left:t.payload.mouseCoord.left,width:1,height:1};for(let t=0;t<e.glyphPosition.length&&!n;t++){const s=e.glyphPosition[t];for(let i=0;i<s.length&&!n;i++){const{top:a,left:l,width:d,height:c}=s[i];(n=e.collision.isInside({top:a+o,left:l+r,width:d,height:c},h))&&(e.cursor.setPosition(a,l),e.cursorPosition={row:t,column:i,index:e.textLines[t].startOfLine+i})}}if(!n)for(let t=0;t<e.linesMetric.length&&!n;t++){const{top:s,left:i,width:a,height:l}=e.linesMetric[t];(n=e.collision.isInside({top:s+o,left:i+r,width:e.getBoundingClientRect().width,height:l},h))&&(e.cursor.setPosition(s,a),e.cursorPosition={row:t,column:e.glyphPosition[t].length,index:e.textLines[t].startOfLine+e.glyphPosition[t].length})}if(!n){const{top:t,width:n}=e.linesMetric[e.linesMetric.length-1];e.cursor.setPosition(t,n),e.cursorPosition={row:e.linesMetric.length-1,column:e.glyphPosition[e.glyphPosition.length-1].length,index:e.textLines[e.glyphPosition.length-1].startOfLine+e.glyphPosition[e.glyphPosition.length-1].length}}}}handleKeyPress(t){if(t.target.editable){const e=t.target;if("number"==typeof e.maxTextLength&&e.text.length>=e.maxTextLength)return;if("Delete"===t.payload.key)return;if("Backspace"===t.payload.key)return;if("Enter"===t.payload.key)return;e.text=e.insertGlyph(t.payload.key,e.cursorPosition.index,e.text),e.cursorPosition.index+=1,e.neededToRecalculate.needed=!0}}handleKeyDown(t){if(t.target.editable){const e=t.target;let n=t.payload.key,s=e.cursorPosition.index;if("Delete"===n){if(s>=e.text.length)return;e.text=e.deleteGlyph(s,e.text)}else if("Backspace"===n){if(0===s)return;e.text=e.deleteGlyph(s-1,e.text),s-=1}e.cursorPosition.index=s,e.neededToRecalculate.needed=!0}}deleteGlyph(t,e){return e.slice(0,t)+e.slice(t+1)}insertGlyph(t,e,n){return e>=n.length?n+t:0===e?t+n:n.slice(0,e)+t+n.slice(e)}getText(){return this.text}setText(t=""){this.neededToRecalculate.needed=!0,this.text=t}setFontSize(t=16){this.properties.textProperties.fontSize=t}setTextColor(t="#000000"){this.properties.color.textColor=t}setFont(t){this.textProperties.font=t}setCursorPositionFrom2D(t,e){0!==this.glyphPosition.length?e>=this.glyphPosition[t].length?this.cursor.setPosition(this.glyphPosition[t][e-1].top,this.glyphPosition[t][e-1].left+this.glyphPosition[t][e-1].width):this.cursor.setPosition(this.glyphPosition[t][e].top,this.glyphPosition[t][e].left):this.cursor.setPosition(0,0)}setContextProperties(t,e){t.fillStyle=this.animations.animatedProperties.color.textColor,t.font=`${this.animations.animatedProperties.textProperties.fontSize}px ${this.animations.animatedProperties.textProperties.fontFamily}`,t.textAlign=this.animations.animatedProperties.textProperties.textAlign,t.textBaseline=this.animations.animatedProperties.textProperties.textBaseline,super.setContextProperties(t,e)}calculateLines(t){const e=this.getBoundingClientRect().width,n=this.animations.animatedProperties.textProperties.fontSize;this.textLines=[],this.linesMetric=[];let s=0,i=0,o=0,r="";this.text.split("").forEach((a,h)=>{if(i=t.measureText(a).width,s+i<e)return r+=a,void(s+=i);this.linesMetric.push({top:this.textLines.length*n,left:0,width:s,height:n}),this.textLines.push({startOfLine:o,line:r}),o+=r.length,i=t.measureText(a).width,s=i,r=a}),""!==r&&(this.linesMetric.push({top:this.textLines.length*n,left:0,width:t.measureText(r).width,height:n}),this.textLines.push({startOfLine:o,line:r})),this.calculateGlyphPosition(t)}calculateGlyphPosition(t){this.glyphPosition=[];const e=this.animations.animatedProperties.textProperties.fontSize;this.textLines.forEach(({line:n},s)=>{const i=[];let o=0;n.split("").forEach(n=>{const r=t.measureText(n).width;i.push({glyph:n,left:o,top:e*s,width:r,height:e}),o+=r}),this.glyphPosition.push(i)})}convertIndexTo2DPosition(t){let e=0,n=0;for(let n=0;n<this.textLines.length&&this.textLines[n].startOfLine<t;n++)e=n;return 0!==this.textLines.length?(n=t-this.textLines[e].startOfLine)>=this.glyphPosition[e].length&&(n=this.glyphPosition[e].length,t=this.textLines[e].startOfLine+n):(n=0,t=0),{row:e,column:n,index:t}}paintComponent(t,e){super.paintComponent(t,e);let{top:n,left:s}=this.getBoundingClientRect();if(t.save(),t.translate(s,n),this.neededToRecalculate.needed){this.calculateLines(t,this.text,this.neededToRecalculate.row);const{row:e,column:n,index:s}=this.convertIndexTo2DPosition(this.cursorPosition.index);this.cursorPosition.row=e,this.cursorPosition.column=n,this.cursorPosition.index=s,this.setCursorPositionFrom2D(e,n),this.neededToRecalculate.needed=!1}t.fillStyle=this.properties.color.textColor,t.font=`${this.properties.textProperties.fontSize}px ${this.properties.textProperties.fontFamily}`,this.textLines.forEach(({line:e},n)=>{t.fillText(e,0,this.linesMetric[n].top)}),this.isSelected&&this.editable&&this.cursor.draw(t,e),t.restore()}}class y{constructor(t,e=0,n=0,s,i,o,r,a=0,h=0,l,d){this.htmlComponent=t,this.x=e,this.y=n,void 0!==o&&(this.width=o),void 0!==r&&(this.height=r),void 0!==l&&(this.sWidth=l),void 0!==d&&(this.sHeight=d),this.naturalWidth=s,this.naturalHeight=i,this.offsetX=0,this.offsetY=0,this.scrollXOffset=0,this.scrollYOffset=0,this.sx=a,this.sy=h}setSize(t,e){this.width=t,this.height=e,this.recalculateFrames()}setScrollXOffer(t){this.scrollXOffset=t}setScrollYOffer(t){this.scrollYOffset=t}setDXPosition(t,e){this.x=t,this.y=e}recalculateFrames(){void 0!==this.naturalWidth?(this.xFramesCount=Math.floor((this.naturalWidth-this.sx)/this.sWidth),this.xFramesCount<1&&(this.xFramesCount=1)):this.xFramesCount=1,void 0!==this.naturalHeight?(this.yFramesCount=Math.floor((this.naturalHeight-this.sy)/this.sHeight),this.yFramesCount<1&&(this.yFramesCount=1)):this.yFramesCount=1,this.currentXFrame=1,this.currentYFrame=1}getHtml(){return this.htmlComponent}getXFramesCount(){return this.xFramesCount}getYFramesCount(){return this.yFramesCount}getFramesCount(){return this.xFramesCount*this.yFramesCount}getRemainXFramesCount(){return this.xFramesCount-this.currentXFrame}getRemainYFramesCount(){return this.yFramesCount-this.currentYFrame}getRemainFramesCount(){return(this.xFramesCount-this.currentXFrame)*(this.yFramesCount-this.currentYFrame)}setNextFrame(){this.currentXFrame+1>this.xFramesCount?this.currentYFrame+1>this.yFramesCount?(this.currentXFrame=1,this.currentYFrame=1):(this.currentYFrame+=1,this.currentXFrame=1):this.currentXFrame+=1,this.offsetX=this.sx+this.sWidth*(this.currentXFrame-1),this.offsetY=this.sy+this.sHeight*(this.currentYFrame-1)}setFrame(t){let e=this.getFramesCount(),n=Math.floor(e*t)+1;n>e&&(n=e);let s=this.getXFramesCount();n<s?(this.currentXFrame=n,this.currentYFrame=1):(this.currentYFrame=Math.ceil(n/s),this.currentXFrame=n-(this.currentYFrame-1)*s),this.offsetX=this.sx+this.sWidth*(this.currentXFrame-1),this.offsetY=this.sy+this.sHeight*(this.currentYFrame-1)}setOffset(t){let e=this.naturalWidth-this.sWidth,n=this.getYFramesCount()*e,s=Math.floor(n*t),i=Math.floor(s/this.sWidth);this.offsetY=this.sHeight*Math.floor(s/e),this.offsetX=s-i*this.sWidth}draw(t,e,n){let s=this.x,i=this.y;void 0!==e&&void 0!==n&&(s=e,i=n),void 0!==this.width?t.drawImage(this.htmlComponent,this.offsetX,this.offsetY,this.sWidth,this.sHeight,s+this.scrollXOffset,i+this.scrollYOffset,this.width,this.height):t.drawImage(this.htmlComponent,s+this.scrollXOffset,i+this.scrollYOffset)}}class I extends m{constructor(t=0,e=0,n=0,s=0,i="",o=null){super(t,e,n,s,o);const r=u(i,"monospace","16px");this.label=new w(Math.floor(s/2)-8,Math.floor(n/2)-Math.floor(r/2),r+1,16,i),this.properties.cursor="pointer"}paintComponent(t,e){super.paintComponent(t,e);const{top:n,left:s}=this.getBoundingClientRect();t.save(),t.translate(s,n),this.label.draw(t,e),t.restore()}}class M extends p{constructor(t=0,e=0,n=0,s=0,i,o=null){super(t,e,n,s,o);const r=Math.ceil(n/2),a=Math.ceil(s/2),h=Math.ceil((u(i,"monospace","16px")+1)/2),l=Math.ceil(.6*r),d=Math.ceil(u("x","monospace","16px")),c=new w(a-10-20-3,r-l,2*h,20,i),g=new w(a-10,r-l,2*l,20,""),m=new I(2*a-50-5,2*r-100-5,100,50,"");g.editable=!0,g.setBackgroundColor("#bb0000"),g.maxTextLength=Math.floor(l/d*2),c.setBackgroundColor("#00bbbb"),m.setBackgroundColor("#aaaaaa"),g.setTextColor("#FFFF00"),g.cursor.setColor("#08B600"),this.descriptionKey="description",this.userInputKey="userinput",this.buttonKey="button",this.addComponent(c,this.descriptionKey),this.addComponent(g,this.userInputKey),this.addComponent(m,this.buttonKey)}addButtonEventListener(t,e){this.getChildComponent(this.buttonKey).addEventListener(t,e)}getOkButtonComponent(){return this.getChildComponent(this.buttonKey)}getDescriptionComponent(){return this.getChildComponent(this.descriptionKey)}getInputUserComponent(){return this.getChildComponent(this.userInputKey)}getInputUser(){return this.getChildComponent(this.userInputKey).text}}class x extends p{constructor(t=0,e=0,n=0,s=0,i=[],o={},r=null){super(t,e,n,s,r),this.magics=[...i],this.totalWidth=0;const a=o.back,{naturalWidth:h,naturalHeight:l}=a,d=new y(a,0,0,h,l,h,l,0,0,h,l);this.setBackgroundImage(d),this.magics.forEach(t=>{const e=t.getGraphicComponent(),{width:n,height:s}=e.getBoundingClientRect(),i=t.getName(),o=Math.ceil(u(i,"monospace","16px"));e.setBoundingClientRect(0,0,n,s);const r=new p(5,this.totalWidth+5,n,s+3+16),a=new w(0,0,o,16,i);a.properties.cursor="auto",r.addComponent(e,"picture"),r.addComponent(a,"name"),a.alignCenter(),a.setBoundingClientRect(s+3),a.setTextColor("#E8D478"),this.addComponent(r,t.getName()),this.totalWidth+=5+n})}addMagicSelectingEventListener(t,e){this.getChildComponent(this.buttonKey),this.magics.forEach(n=>{n.getGraphicComponent().addEventListener(t,e)})}findMagicByGraphicComponent(t){const e=this.magics.find(e=>{const n=e.getGraphicComponent();return t===n});return e||null}selectMagic(){return new Promise(t=>{this.addMagicSelectingEventListener(o.MOUSE.MOUSE_DOWN,e=>{t(e.target.getParentComponent().getParentComponent().findMagicByGraphicComponent(e.target))})})}}class B extends p{constructor(t=0,e=0,n=0,s=0,i,o,r,a=null){super(t,e,n,s,a),this.minValue=i,this.maxValue=o,this.currentValue=r,this.oneInPixel=(n-2)/(o-i);const h=new m(1,1,this.oneInPixel*(r-i),s-2);h.setBackgroundColor("#aa0000"),this.setBackgroundColor("#ffffff"),this.barComponentKey="bar";const l=`${r}/${o}`,d=Math.ceil(u(l,"monospace",16))+1,c=new w(0,0,d,16,l);this.labelComponentKey="label",this.addComponent(h,this.barComponentKey),this.addComponent(c,this.labelComponentKey),c.alignCenter()}getTextComponent(){return this.getChildComponent(this.labelComponentKey)}getBarComponent(){return this.getChildComponent(this.barComponentKey)}setBarColor(t="#aa0000"){this.getChildComponent(this.barComponentKey).setBackgroundColor(t)}setValue(t){this.currentValue=t;const e=this.getChildComponent(this.barComponentKey),{top:n,left:s,height:i}=e.getBoundingClientRect();e.setBoundingClientRect(n,s,Math.floor(t*this.oneInPixel),i);const o=`${t}/${this.maxValue}`,r=this.getChildComponent(this.labelComponentKey);r.setText(o);const{height:a}=r.getBoundingClientRect(),h=Math.ceil(u(o,"monospace",16))+1;r.setBoundingClientRect(0,0,h,a),r.alignCenter()}}class E extends p{constructor(t=0,e=0,n=0,s=0,i={},o=null){super(t,e,n,s,o),this.enemyInfoWindowKey="enemy",this.playerInfoWindowKey="player";const r=i.back,a=i.left,h=i.right,{naturalWidth:l,naturalHeight:d}=r,{naturalWidth:c,naturalHeight:g}=a,{naturalWidth:u,naturalHeight:p}=h,f=new y(r,0,0,l,d,l,d,0,0,l,d),C=new y(a,0,0,c,g,c,g,0,0,c,g),w=new y(h,0,0,u,p,u,p,0,0,u,p);let I=0;for(;I<n;){const t=new m(0,I,l,d);t.setBackgroundImage(f),this.addComponent(t),I+=l}const M=new m(0,0,c,g);M.setBackgroundImage(C),this.addComponent(M);const x=new m(0,n-u,u,p);x.setBackgroundImage(w),this.addComponent(x)}getPlayerInfoWindow(){return this.getChildComponent(this.playerInfoWindowKey)}getEnemyInfoWindow(){return this.getChildComponent(this.enemyInfoWindowKey)}setEnemyInfoWindow(t){const e=this.getChildComponent(this.enemyInfoWindowKey);e&&this.removeComponent(e),this.addComponent(t,this.enemyInfoWindowKey)}setPlayerInfoWindow(t){const e=this.getChildComponent(this.playerInfoWindowKey);e&&this.removeComponent(e),this.addComponent(t,this.playerInfoWindowKey)}setEnemyInfo(t,e){const n=this.getChildComponent(this.enemyInfoWindowKey);n.getChildComponent(n.healthBarKey).setValue(e);const s=n.getChildComponent(n.nameLabelKey);s.setText(t);const{top:i,left:o,height:r}=s.getBoundingClientRect(),a=Math.ceil(u(t,s.properties.textProperties.fontFamily,s.properties.textProperties.fontSize));s.setBoundingClientRect(i,o,a,r)}setPlayerInfo(t,e){const n=this.getChildComponent(this.playerInfoWindowKey);n.getChildComponent(n.healthBarKey).setValue(e);const s=n.getChildComponent(n.nameLabelKey);s.setText(t);const{top:i,left:o,height:r}=s.getBoundingClientRect(),a=Math.ceil(u(t,s.properties.textProperties.fontFamily,s.properties.textProperties.fontSize));s.setBoundingClientRect(i,o,a,r)}}class b extends p{constructor(t=0,e=0,n=0,s=0,i="",o,r,a,h={},l=null){super(t,e,n,s,l);const d=Math.ceil(u(`${i}:`,"monospace",16))+1,c=new w(15,10,d+1,16,`${i}:`),g=new B(34,10,n-24,25,o,r,a);this.nameLabelKey="namelabel",this.healthBarKey="healtbar",c.setTextColor("#ffffff");const{naturalWidth:m,naturalHeight:p}=h.back,f=new y(h.back,0,0,m,p,m,p,0,0,m,p);this.addComponent(c,this.nameLabelKey),this.addComponent(g,this.healthBarKey),this.setBackgroundImage(f)}getHealthBar(){return this.getChildComponent(this.healthBarKey)}}class v extends p{constructor(t=0,e=0,n=0,s=0,i=0,o=0,r=0,a=0,h=null){super(t,e,n,s,h),this.columnCount=o,this.rowCount=i;let l=0;for(let t=0;t<i;t++){let e=0;for(let n=0;n<o;n++){const s=new p(l,e,r,a);this.addComponent(s,String(t*o+n)),s.setBackgroundColor("rgba(0, 0, 0, 0)"),e+=r}l+=a}}getTableComponent(t=0,e=0){const n=this.getChildComponent(String(t*this.columnCount+e));return n||null}}const A=t=>new Promise(e=>{const n=new XMLHttpRequest;n.open("HEAD",t,!0),n.onreadystatechange=(()=>{n.readyState==n.DONE&&e(n.getResponseHeader("Content-Length"))}),n.send()}),P=(t,e,n)=>new Promise(s=>{const i=new XMLHttpRequest;i.open("GET",t,!0),i.responseType="arraybuffer";let o=-1;i.onload=(t=>{const e=new Blob([i.response]);s(window.URL.createObjectURL(e))}),i.onprogress=(({loaded:t})=>{t!==o&&(o=t,e(t,n))}),i.send()}),k=t=>new Promise(e=>{t.onload=(t=>{e(t.srcElement)})});class S{constructor(){this.totalSize=0,this.currentLoadedSize=0,this.imageUrl=[],this.loadedImages=[],this.soundUrl=[],this.loadedSound=[]}addUrl(t,e){const n=t.sound,s=t.image,i=e.sound,o=e.image;let r=-1;s&&(~(r=this.imageUrl.findIndex(({name:t})=>t===o))?this.imageUrl[r].urls=[...this.imageUrl[r].urls,...s]:this.imageUrl.push({urls:[...s],name:o})),n&&(~(r=this.soundUrl.findIndex(({name:t})=>t===i))?this.soundUrl[r].urls=[...this.soundUrl[r].urls,...n]:this.soundUrl.push({urls:[...n],name:i}))}async calculateTotalSize(){const t=[];let e=0;this.imageUrl.forEach(({urls:n})=>{n.forEach(n=>{t.push(A(n)),e+=1})}),this.soundUrl.forEach(({urls:e})=>{e.forEach(e=>{t.push(A(e))})});const n=await Promise.all(t);return this.totalSize=n.reduce((t,e)=>t+parseInt(e,10),0),this.imagesSize=n.slice(0,e),this.soundSize=n.slice(e),this.totalSize}async load(t){const e=[],n={},s=(e,s)=>{n[s]=e;let i=0;const o=Object.keys(n);for(let t=0;t<o.length;t++)i+=n[o[t]];this.currentLoadedSize=i;const r=Math.round(this.currentLoadedSize/this.totalSize*100);console.log(r),t&&t(r)};let i=0,o=0;this.imageUrl.forEach(({urls:t})=>{t.forEach(t=>{e.push(P(t,s,o)),o+=1,i+=1})}),this.soundUrl.forEach(({urls:t})=>{t.forEach(t=>{e.push(P(t,s,o)),o+=1})});const r=await Promise.all(e),a=r.slice(0,i).map(t=>{const e=new Image;return e.src=t,k(e)}),h=r.slice(i).map(t=>{const e=new Audio;return e.src=t,e}),l=[...a];let d=await Promise.all(l);d=[...d,...h];const c={images:[],sound:[]};let g=0;for(let t=0;t<this.imageUrl.length;t++){const e=this.imageUrl[t].urls.length,n=this.imageUrl[t].name;c.images.push({images:d.slice(g,g+e),name:n}),g+=e}for(let t=0;t<this.soundUrl.length;t++){const e=this.soundUrl[t].urls.length,n=this.soundUrl[t].name;c.sound.push({sound:d.slice(g,g+e),name:n}),g+=e}return this.imageUrl=[],this.soundUrl=[],this.loaded={...this.loadedImages,...c},c}getImagesByName(t){const e=this.loaded.images.findIndex(({name:e})=>e===t);return~e?this.loaded.images[e].images:null}getSoundByName(t){const e=this.loaded.sound.findIndex(({name:e})=>e===t);return~e?this.loaded.sound[e].sound:null}}class R{constructor(){this.keys=[],this.records=[];for(let t=0;t<localStorage.length;t++){const e=localStorage.key(t);e.match(/malekylik-game/)&&this.keys.push(e)}this.parseRecords()}saveResult(t,e){this.records.push({name:t,monsterKilled:e}),this.records.sort((t,e)=>t.time-e.time);for(let t=0;t<this.records.length&&t<10;t++){const{name:e,monsterKilled:n}=this.records[t],s=`name=${e};monsterKilled=${n};`;localStorage.setItem("malekylik-game="+t,s)}this.records.length>10&&(this.records=this.records.slice(0,10))}parseRecords(){for(let t=0;t<this.keys.length;t++){const e=localStorage.getItem(this.keys[t]).split(";"),n={name:e[0].split("=")[1],monsterKilled:e[1].split("=")[1]};this.records.push(n)}}getSortedRecords(){return this.records.sort((t,e)=>e.monsterKilled-t.monsterKilled),this.records}}var O={IMAGE:{HEAD_IMAGES:"/assets/images/monsters/heads",BODY_IMAGES:"/assets/images/monsters/bodies",LEFT_ARM_IMAGES:"/assets/images/monsters/arms/left",RIGHT_ARM_IMAGES:"/assets/images/monsters/arms/right",LEG_IMAGES:"/assets/images/monsters/legs",BACKGROUND_IMAGES:"/assets/images",MAIN_CHAR:"/assets/images",MAGIC:"/assets/images/magic",UI:"/assets/images/ui"},SOUND:{MAGIC:"/assets/sound/magic"}};class K extends p{constructor(t,e,n,s,i,o,r,a=null){const{naturalWidth:h,naturalHeight:l}=n,{naturalWidth:d,naturalHeight:c}=o,{naturalWidth:g,naturalHeight:u}=s,{naturalWidth:p,naturalHeight:f}=i,{naturalWidth:C,naturalHeight:w}=r,I=g+d+p,M=l+c+w-30;super(t,e,I,M,a);const x=new m(M-w-c,I/2-d/2,d,c);x.setBackgroundImage(new y(o,0,0,d,c,d,c,0,0,d,c));const B=new m(M-w-c-l+30,I/2-h/2-15,h,l);B.setBackgroundImage(new y(n,0,0,h,l,h,l,0,0,h,l));const E=new m(M-w,I/2-C/2-13,C,w);E.setBackgroundImage(new y(r,0,0,C,w,C,w,0,0,C,w));const b=new m(M-w-c+45,I/2-15,g,u);b.setBackgroundImage(new y(s,0,0,g,u,g,u,0,0,g,u));const v=new m(M-w-c+40,I/2-89,p,f);v.setBackgroundImage(new y(i,0,0,p,f,p,f,0,0,p,f)),this.addComponent(x,"body"),this.addComponent(B,"head"),this.addComponent(E,"leg"),this.addComponent(b,"leftarm"),this.addComponent(v,"rightarm")}}class T{constructor(t,e,n,s=null){this.name=t,this.currentHP=n,this.maxHP=e,this.graphicComponent=s,this.magics=[],this.hpChangeListeners=[]}getGraphicComponent(){return this.graphicComponent}async attack(t,e,n){e?(await e.attack(this,t,n),t.takeAttack(e.damage)):t.takeAttack(5)}takeAttack(t){return this.currentHP-=t,this.currentHP<0?(this.currentHP=0,!0):(this.hpChangeListeners.forEach(t=>{t(this.currentHP)}),!1)}addMagic(t){this.magics.push(t)}getMagics(){return this.magics}getName(){return this.name}getCurrentHP(){return this.currentHP}getMaxHP(){return this.maxHP}isAlive(){return this.currentHP>0}addHPChangeListener(t){this.hpChangeListeners.push(t)}}const F=["Ужасный","Злобный","Сопливый"],G=["Огр","Гном","Гоблин"],U=["Том","Макс","Дима"];class L{constructor(t,e,n,s,i){this.headImgs=[...t],this.leftArmImgs=[...e],this.rightArmImgs=[...n],this.bodyImgs=[...s],this.legImgs=[...i]}createMonster(t=0,e=0){const n=Math.random,s=Math.round,i=s(n()*(this.headImgs.length-1)),o=s(n()*(this.leftArmImgs.length-1)),r=s(n()*(this.rightArmImgs.length-1)),a=s(n()*(this.bodyImgs.length-1)),h=s(n()*(this.legImgs.length-1)),l=new K(t,e,this.headImgs[i],this.leftArmImgs[o],this.rightArmImgs[r],this.bodyImgs[a],this.legImgs[h]),{width:d,height:c}=l.getBoundingClientRect();l.setBoundingClientRect(Math.floor((window.innerHeight-150)/2-c/2),Math.floor(window.innerWidth/2+100),d,c);const g=F[s(n()*(F.length-1))],u=G[s(n()*(G.length-1))],m=U[s(n()*(U.length-1))];return new T(`${g} ${u} ${m}`,100,100,l)}}class _ extends p{constructor(t=0,e=0,n=0,s=0,i="",o={},r=null){super(t,e,n,s,r);const a=Math.ceil(n/2),h=Math.ceil(s/2),l=Math.ceil((u(i,"monospace","16px")+1)/2),d=new w(10,a-l,2*l,30,i),c=new I(2*h-50-5,2*a-100-5,100,50,"");d.setBackgroundColor("#00bbbb"),c.setBackgroundColor("#aaaaaa"),this.descriptionKey="description",this.buttonKey="button",this.addComponent(d,this.descriptionKey),this.addComponent(c,this.buttonKey),d.setBackgroundColor("rgba(0, 0, 0, 0)"),d.setTextColor("#ffffff");const g=o.modalWindowImage,{naturalWidth:m,naturalHeight:p}=g,f=o.okButtonImage,{naturalWidth:C,naturalHeight:M}=f;this.setBackgroundImage(new y(g,0,0,m,p,m,p,0,0,m,p)),c.setBoundingClientRect(p-19-M,m-19-C/2,C/2,M),c.setBackgroundImage(new y(f,0,0,C,M,C,M,0,0,C/2,M))}addButtonEventListener(t,e){this.getChildComponent(this.buttonKey).addEventListener(t,e)}answerIsRight(){return!1}getResult(){return new Promise(t=>{this.addButtonEventListener(o.MOUSE.MOUSE_DOWN,()=>{t(this.answerIsRight())})})}}const N=[{charPresentation:"+",perform:(t,e)=>t+e},{charPresentation:"-",perform:(t,e)=>t-e},{charPresentation:"x",perform:(t,e)=>t*e}];var H=[{word:"age",translate:["возраст","век","эпоха","период","стареть"]},{word:"appear",translate:["появляться","казаться","предстать"]},{word:"artist",translate:["художник","артист"]},{word:"autumn",translate:["осень","осенний"]},{word:"bay",translate:["залив","бухта","отсек","губа"]},{word:"beak",translate:["клюв"]},{word:"bloom",translate:["цветение","расцвет","цвести","расцвести"]},{word:"bumpy",translate:["ухабистый","неровный"]},{word:"burst",translate:["взрыв","вспышка","разрыв","лопнуть","разрывать"]},{word:"buzz",translate:["гудеть","жужжать","гул","жужжание","слухи"]},{word:"care",translate:["забота","уход","заботиться","ухаживать"]},{word:"check",translate:["проверка","чек","контроль","проверять","контролировать"]},{word:"chilly",translate:["холодно","сухо","зябко","холодный","прохладный","зябкий","промозглый"]},{word:"comfort",translate:["комфорт","удобства","уют","утешить","утешать"]},{word:"community",translate:["сообщество","община","общество","общность"]},{word:"country",translate:["страна","местность","загородный"]},{word:"covered",translate:["крытый","покрытый"]},{word:"cradle",translate:["колыбель","люлька","гнездо"]},{word:"dangle",translate:["мотаться","болтаться","свисать","качаться"]},{word:"decision",translate:["решение"]},{word:"delicious",translate:["вкусно","восхитительный"]},{word:"dentist",translate:["дантист","зубной врач"]},{word:"dew",translate:["роса"]},{word:"disappear",translate:["исчезать","пропадать"]},{word:"dusty",translate:["пыльный"]},{word:"edge",translate:["край","преимущество","кромка"]},{word:"farmer",translate:["фермер","колхозник"]},{word:"fear",translate:["страх","боязнь","опасение","бояться","опасаться"]},{word:"firefly",translate:["светляк","светлячок"]},{word:"fix",translate:["фиксировать","исправлять","устанавливать","чинить"]},{word:"fluffy",translate:["пушистый"]},{word:"follow",translate:["следовать","следить","придерживаться","идти"]},{word:"gallop",translate:["галопом","галоп","скачка","проскакать","скакать галопом","галопировать"]},{word:"gentle",translate:["нежный","мягкий","вежливый"]},{word:"glance",translate:["взгляд","зрение","вид","зрелище","прицел","увидеть"]},{word:"glossy",translate:["глянцевый","блестящий"]},{word:"glow",translate:["пылать","светиться","пылать","свечение","жар","румянец"]},{word:"goal",translate:["цель","гол","задача"]},{word:"half",translate:["половина","часть","наполовину"]},{word:"healthy",translate:["здоровый","полезный"]},{word:"hoof",translate:["копыто","нога"]},{word:"include",translate:["включать"]},{word:"invitation",translate:["приглашение"]},{word:"knight",translate:["рыцарь"]},{word:"lazy",translate:["ленивый"]},{word:"leaf",translate:["лист","листовой"]},{word:"leak",translate:["утечка","течь","просачиваться"]},{word:"library",translate:["библиотека","библиотечный"]},{word:"market",translate:["рынок","базар","продавать","рыночный"]},{word:"melt",translate:["таять","плавиться","растопить","плавиться","плавить"]},{word:"miserable",translate:["несчастный","жалкий","убогий"]},{word:"month",translate:["месяц"]},{word:"muddy",translate:["мутить","грязный","мутный","тусклый"]},{word:"museum",translate:["музей"]},{word:"note",translate:["заметка","внимание","примечание","записка"]},{word:"pair",translate:["пара","чета","парный"]},{word:"patient",translate:["пациент","терпеливый","пациент","больной"]},{word:"peaceful",translate:["мирное","спокойный","мирный"]},{word:"peck",translate:["клевать","долбить","клевок"]},{word:"pilot",translate:["пилот","летчик","пилотировать"]},{word:"plan",translate:["план","схема","проект","замысел","планировать"]},{word:"pointy",translate:["заостренный"]},{word:"pond",translate:["пруд","водоем","бассейн"]},{word:"president",translate:["президент","председатель"]},{word:"protect",translate:["защищать","охранять","беречь","оберегать"]},{word:"race",translate:["раса","гонки","гонка","род"]},{word:"reach",translate:["достичь","охват","досягаемость","достигать","связаться","доходить"]},{word:"relax",translate:["расслабиться","отдыхать"]},{word:"rotten",translate:["гнилой","прогнивший","тухлый"]},{word:"round",translate:["круглый","раунд","тур","круг","вокруг","кругом","округлять"]},{word:"row",translate:["ряд","грести"]},{word:"sail",translate:["паруса","парус","плыть","плавать"]},{word:"scene",translate:["сцена","картина","эпизод","место действия"]},{word:"scrub",translate:["скраб","кустарник","скрести","тереть"]},{word:"shade",translate:["тень","оттенок"]},{word:"ship",translate:["корабль","судно"]},{word:"shore",translate:["берег","побережье","береговой","подпирать"]},{word:"silky",translate:["шелковистый","шелковый"]},{word:"slide",translate:["горка","слайд","скольжение","ползун","скользить"]},{word:"sniff",translate:["сопение","вдох","нюхать","вдыхать","сопеть"]},{word:"soapy",translate:["мыльный","мылкий"]},{word:"sparkle",translate:["искриться","сверкать","блистать","блестеть","блеск","сияние","искорка","сверкание"]},{word:"spotted",translate:["пятнистый","запятнанный"]},{word:"spring",translate:["весна","пружина","рессора","источник","родник","весенний","возникать"]},{word:"stare",translate:["глазеть","пялиться","поглазеть","пристальный взгляд"]},{word:"summer",translate:["лето"]},{word:"supplies",translate:["предметы снабжения","запас","припасы"]},{word:"tangled",translate:["запутанный"]},{word:"tent",translate:["палатка","навес"]},{word:"tomorrow",translate:["завтра","завтрашний день","завтрашний"]},{word:"trade",translate:["сделка","торговля","торговать","торговый"]},{word:"warm",translate:["тепло","теплый","горячий","жаркий","нагреваться","согревать","греть"]},{word:"wave",translate:["волна","волновой","махать","махнуть","размахивать","развеваться"]},{word:"week",translate:["неделю","неделя"]},{word:"wiggle",translate:["покачивание","покачиваться","извиваться","покачивать","ерзать","покачивание"]},{word:"winter",translate:["зима","зимний"]},{word:"wish",translate:["желание","пожелание","желать"]},{word:"yesterday",translate:["вчера","вчерашний день"]},{word:"young",translate:["молодой","юный","молодежь"]}];const W=window.SpeechRecognition||window.webkitSpeechRecognition;const D=[class extends _{constructor(t=0,e=0,n=0,s=0,i={},o=null){super(t,e,n,s,"Решите данное выражение:",i,o);const r=N[Math.round(Math.random()*(N.length-1))];this.operation=r;const a=i.textFieldImage,{naturalWidth:h,naturalHeight:l}=a;let d=1,c=1;if(d=Math.round(1e3*Math.random()),"x"===r.charPresentation){const t=Math.ceil(1e4/d);c=Math.floor(Math.random()*t)}else c=Math.round(1e3*Math.random());this.first=d,this.second=c;const g=`${d} ${r.charPresentation} ${c} =`,m=Math.ceil(n/2),p=Math.ceil(s/2),f=Math.ceil((u(g,"monospace","16px")+1)/2),C=Math.ceil((u("9999","monospace","16px")+1)/2),I=C+f+3,M=new w(p-15,m-I,2*f,30,g),x=new w(p-15,m-I+2*f+3,2*C,l,"");M.setBackgroundColor("rgba(0, 0, 0, 0)"),M.setTextColor("#ffffff"),x.editable=!0,x.setBackgroundColor("rgba(0, 0, 0, 0)"),x.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h,l)),x.maxTextLength=4,x.setTextColor("#FFFF00"),x.cursor.setColor("#08B600"),this.expressionKey="expression",this.answerKey="answer",this.addComponent(M,this.expressionKey),this.addComponent(x,this.answerKey)}answerIsRight(){return parseFloat(this.getChildComponent(this.answerKey).getText())===this.operation.perform(this.first,this.second)}},class extends _{constructor(t=0,e=0,n=0,s=0,i={},o=null){super(t,e,n,s,"Переведите слово:",i,o),this.wordObj=H[Math.round(Math.random()*(H.length-1))];const r=i.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=`${this.wordObj.word}: `,d=Math.ceil(s/2),c=Math.ceil((u(l,"monospace","16px")+1)/2),g=new w(d-h-8,5,2*c,h,l),m=new w(d-15,5,a,h,"");m.editable=!0,m.setBackgroundColor("#bb0000");const p=Math.ceil(u("x","monospace","16px"));m.maxTextLength=Math.floor(a/p)+1,m.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),m.setTextColor("#FFFF00"),m.cursor.setColor("#08B600"),g.setBackgroundColor("rgba(0, 0, 0, 0)"),g.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(g,this.expressionKey),this.addComponent(m,this.answerKey),m.alignCenter(),g.setBoundingClientRect(void 0,m.getBoundingClientRect().left)}answerIsRight(){const t=this.getChildComponent(this.answerKey).getText().trim().toLowerCase(),e=this.wordObj.translate;let n=!1;for(let s=0;s<e.length;s++)if(n=t===e[s])return n;return n}},class extends _{constructor(t=0,e=0,n=0,s=0,i={},r=null){super(t,e,n,s,"Произнесите слово:",i,r);const a=i.textFieldImage,{naturalWidth:h,naturalHeight:l}=a,d=i.microButtonImage,{naturalWidth:c,naturalHeight:g}=d;this.word=H[Math.round(Math.random()*(H.length-1))].word;const m=`${this.word}: `,p=new W;p.lang="en-US",p.interimResults=!1,p.maxAlternatives=1,this.recognition=p;const f=Math.ceil(s/2),C=Math.ceil((u(m,"monospace","16px")+1)/2),M=new w(f-l-8,5,2*C,l,m),x=new w(f-15,5,h,l,""),B=new I(f-15,n-10-30,c/2,g,"");B.setBackgroundImage(new y(d,0,0,c,g,c,g,0,0,c/2,g)),x.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h,l)),x.setTextColor("#FFFF00"),M.setBackgroundColor("rgba(0, 0, 0, 0)"),M.setTextColor("#ffffff");const E=Math.ceil(u("x","monospace","16px"));x.maxTextLength=Math.floor((n-10)/E),B.setBackgroundColor("#aaaaaa"),this.expressionKey="expression",this.answerKey="answer",this.microButtonKey="microbutton",this.addComponent(M,this.expressionKey),this.addComponent(x,this.answerKey),this.addComponent(B,this.microButtonKey),x.alignCenter(),B.alignCenter(),M.setBoundingClientRect(void 0,x.getBoundingClientRect().left),B.setBoundingClientRect(void 0,x.getBoundingClientRect().right+5);let b=!1;B.addEventListener(o.MOUSE.MOUSE_DOWN,t=>{b?(p.stop(),b=!1,B.getBackgroundImage().setFrame(0)):(p.start(),b=!0,B.getBackgroundImage().setFrame(.6))}),p.onresult=(t=>{t.results.length>0&&x.setText(t.results[0][0].transcript)}),p.onspeechend=(()=>{p.stop(),b=!1,B.getBackgroundImage().setFrame(0)}),p.onerror=(t=>{console.log("Error occurred in recognition: "+t.error),B.getBackgroundImage().setFrame(0)})}answerIsRight(){return this.getChildComponent(this.answerKey).getText().toLowerCase()===this.word}}];class ${constructor(t){this.uiImages=t}createTask(t,e,n,s){const i={textFieldImage:this.uiImages[1],modalWindowImage:this.uiImages[2],okButtonImage:this.uiImages[3],microButtonImage:this.uiImages[4]};return new(0,D[Math.round(Math.random()*(D.length-1))])(t,e,n,s,i)}}class Y{constructor(t,e,n){this.name=t,this.damage=e,this.graphicComponent=n}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}}class j extends Y{constructor(t,e,n,s,i){super(t,e,n),this.attackAnimations=s,this.sound=i}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}async attack(t,e,n){const{left:s,width:i}=t.getGraphicComponent().getBoundingClientRect(),{top:r,left:a,height:h}=e.getGraphicComponent().getBoundingClientRect();let l=a-s+Math.floor(i/4);this.attackAnimations[0].animations.setAnimation("asd",.924,1,(t,e,n,i,o)=>{o.backgroundImage.setFrame(i),o.setBoundingClientRect(void 0,s+l*i)});const d=new Promise(t=>{this.attackAnimations[0].addEventListener(o.ANIMATION.ANIMATION_END,e=>{n.removeScene(this.attackAnimations[0]),t()})});this.attackAnimations[0].setBoundingClientRect(r+Math.floor(h/2),s),n.addScene(this.attackAnimations[0]),this.sound.play(),await d,this.attackAnimations[1].animations.setAnimation("asd",.924,1,(t,e,n,s,i)=>{i.backgroundImage.setFrame(s)});const c=new Promise(t=>{this.attackAnimations[1].addEventListener(o.ANIMATION.ANIMATION_END,e=>{n.removeScene(this.attackAnimations[1]),t()})});this.attackAnimations[1].setBoundingClientRect(r+Math.floor(h/2),a+Math.floor(i/4)),n.addScene(this.attackAnimations[1]),await c}}class X extends Y{constructor(t,e,n,s,i){super(t,e,n),this.attackAnimations=s,this.sound=i}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}async attack(t,e,n){const{top:s,left:i,width:r}=e.getGraphicComponent().getBoundingClientRect();this.attackAnimations[0].animations.setAnimation("asd",.924,1,(t,e,n,s,i)=>{i.backgroundImage.setFrame(s)});const a=new Promise(t=>{this.attackAnimations[0].addEventListener(o.ANIMATION.ANIMATION_END,e=>{n.removeScene(this.attackAnimations[0]),t()})});this.attackAnimations[0].setBoundingClientRect(s,Math.floor(i+r/3)),this.sound.play(),n.addScene(this.attackAnimations[0]),await a}}class z extends m{constructor(t,e,n,s,i=null){const{naturalWidth:o,naturalHeight:r}=s,a=o*n,h=r*n;super(t,e,a,h,i),s instanceof Image&&this.setBackgroundImage(new y(s,0,0,o,r,a,h,0,0,o,r)),this.properties.cursor="pointer"}}class q{constructor(){this.assets={}}addMagicAssets(t,e,n){this.assets[n]={images:t,sound:e}}createMagicArrow(t,e=!1){if(!this.assets.magicArrow)return null;const n=this.assets.magicArrow.images,s=this.assets.magicArrow.sound,i=n[0];let o=n[1];const r=n[3];e&&(o=n[2]);let{naturalWidth:a,naturalHeight:h}=o;const l=new y(o,0,0,a,h,a/14,h,0,0,a/14,h),d=new m(0,0,a/14,h);d.setBackgroundImage(l),({naturalWidth:a,naturalHeight:h}=r);const c=new y(r,0,0,a,h,a/14,h,0,0,a/14,h),g=new m(0,0,a/14,h);g.setBackgroundImage(c);const u=new z(10,10,2,i);return new j("Волшебная стрела",t,u,[d,g],s)}createImplosionArrow(t){if(!this.assets.implosion)return null;const e=this.assets.implosion.images,n=this.assets.implosion.sound,s=e[0],i=e[1];let{naturalWidth:o,naturalHeight:r}=i;const a=new y(i,0,0,o,r,o/19,r,0,0,o/19,r),h=new m(0,0,o/19,r);h.setBackgroundImage(a);const l=new z(10,10,2,s);return new X("Взрыв",t,l,[h],n)}}class V extends m{constructor(t,e,n,s=null){const{naturalWidth:i,naturalHeight:o}=n;super(t,e,i,o,s),this.setBackgroundImage(new y(n,0,0,i,o,i,o,0,0,i,o))}}window.onload=(()=>{new class{constructor(){this.backgroundImgsKey="background",this.mainCharImgsKey="mainchar",this.headImgsKey="heads",this.bodyImgsKey="bodies",this.leftArmImgsKey="leftarms",this.rightArmImgsKey="rightarms",this.legImgsKey="legs",this.magicImgsKey="magics",this.uiImgsKey="ui",this.magicSoundKey="magics",this.statusBarKey="statusbar",this.monsterKillCount=0,this.loadManager=new S,this.storageManager=new R,this.canvas=new s,this.eventQueue=new i,this.ui=new r,this.uiComponents,this.background=new m(0,0,"100%","100%"),this.init(),this.main=this.main.bind(this),this.main(0)}async init(){const t=await this.showLoadingScreen(),e=t.getLoadingProgressBar();this.initLoadingPath();const n=this.loadManager,s=await n.calculateTotalSize();console.log(`total: ${s}`),await n.load(t=>e.setValue(t)),console.log("loaded"),this.canvas.removeScene(t);const i=n.getImagesByName(this.backgroundImgsKey)[0],{width:o,height:r}=this.background.getBoundingClientRect();this.background.setBackgroundImage(new y(i,0,0,i.naturalWidth,i.naturalHeight,o,r,0,0,i.naturalWidth,i.naturalHeight)),this.canvas.addScene(this.background),this.setEventListenersToCanvas();const a=n.getImagesByName(this.headImgsKey),h=n.getImagesByName(this.bodyImgsKey),l=n.getImagesByName(this.leftArmImgsKey),d=n.getImagesByName(this.rightArmImgsKey),c=n.getImagesByName(this.legImgsKey);this.taskFactory=new $(this.loadManager.getImagesByName(this.uiImgsKey)),this.magicFactory=new q,this.monsterFactory=new L(a,l,d,h,c),this.magicFactory.addMagicAssets(n.getImagesByName(this.magicImgsKey).slice(0,4),n.getSoundByName(this.magicSoundKey)[0],"magicArrow"),this.magicFactory.addMagicAssets(n.getImagesByName(this.magicImgsKey).slice(4,6),n.getSoundByName(this.magicSoundKey)[1],"implosion"),this.setUpUI()}setUpUI(t=""){const e=this.loadManager;this.uiComponents=new p(0,0,window.innerWidth,window.innerHeight);const n=e.getImagesByName(this.uiImgsKey).slice(5,8),s={back:n[0],left:n[1],right:n[2]},i=new E(window.innerHeight-150,0,window.innerWidth,150,s);i.setBackgroundColor("#00ff00");const r=e.getImagesByName(this.uiImgsKey)[8],a=new b(10,Math.ceil(window.innerWidth/2)-200-150,200,130,"",0,100,0,{back:r}),h=new b(10,Math.ceil(window.innerWidth/2)+150,200,130,"",0,100,0,{back:r});i.setPlayerInfoWindow(a),i.setEnemyInfoWindow(h),a.setBackgroundColor("#f4f142"),h.setBackgroundColor("#f4f142"),this.ui.add(this.uiComponents);const l=this.showNameEnter(t);l.addButtonEventListener(o.MOUSE.MOUSE_DOWN,t=>{const e=t.target.getParentComponent().getInputUser();this.uiComponents.removeComponent(l),this.canvas.getHtml().style.cursor="auto",this.uiComponents.addComponent(i,this.statusBarKey),this.mainLogic(e)}),this.uiComponents.addComponent(l),this.canvas.addUI(this.ui)}initLoadingPath(){const t=this.loadManager;return t.addUrl({image:[`${O.IMAGE.UI}/bardata.jpg`,`${O.IMAGE.UI}/textfield.jpg`,`${O.IMAGE.UI}/leather.jpg`,`${O.IMAGE.UI}/okbutton.jpg`,`${O.IMAGE.UI}/microbutton.jpg`,`${O.IMAGE.UI}/status.jpg`,`${O.IMAGE.UI}/statusleft.jpg`,`${O.IMAGE.UI}/statusright.jpg`,`${O.IMAGE.UI}/characterinfowindow.jpg`,`${O.IMAGE.UI}/spellsel.jpg`,`${O.IMAGE.UI}/table.jpg`,`${O.IMAGE.UI}/reloadbutton.jpg`]},{image:this.uiImgsKey}),t.addUrl({image:[`${O.IMAGE.BACKGROUND_IMAGES}/dungeon.jpg`]},{image:this.backgroundImgsKey}),t.addUrl({image:[`${O.IMAGE.MAIN_CHAR}/mainChar.png`]},{image:this.mainCharImgsKey}),t.addUrl({image:[`${O.IMAGE.HEAD_IMAGES}/head_1.png`,`${O.IMAGE.HEAD_IMAGES}/head_2.png`,`${O.IMAGE.HEAD_IMAGES}/head_3.png`,`${O.IMAGE.HEAD_IMAGES}/head_4.png`]},{image:this.headImgsKey}),t.addUrl({image:[`${O.IMAGE.BODY_IMAGES}/body_1.png`,`${O.IMAGE.BODY_IMAGES}/body_2.png`,`${O.IMAGE.BODY_IMAGES}/body_3.png`,`${O.IMAGE.BODY_IMAGES}/body_4.png`]},{image:this.bodyImgsKey}),t.addUrl({image:[`${O.IMAGE.LEFT_ARM_IMAGES}/arm_1.png`,`${O.IMAGE.LEFT_ARM_IMAGES}/arm_2.png`,`${O.IMAGE.LEFT_ARM_IMAGES}/arm_3.png`,`${O.IMAGE.LEFT_ARM_IMAGES}/arm_4.png`]},{image:this.leftArmImgsKey}),t.addUrl({image:[`${O.IMAGE.RIGHT_ARM_IMAGES}/arm_1.png`,`${O.IMAGE.RIGHT_ARM_IMAGES}/arm_2.png`,`${O.IMAGE.RIGHT_ARM_IMAGES}/arm_3.png`,`${O.IMAGE.RIGHT_ARM_IMAGES}/arm_4.png`]},{image:this.rightArmImgsKey}),t.addUrl({image:[`${O.IMAGE.LEG_IMAGES}/leg_1.png`,`${O.IMAGE.LEG_IMAGES}/leg_2.png`,`${O.IMAGE.LEG_IMAGES}/leg_3.png`,`${O.IMAGE.LEG_IMAGES}/leg_4.png`]},{image:this.legImgsKey}),t.addUrl({image:[`${O.IMAGE.MAGIC}/magicArrow/magicArrow.png`,`${O.IMAGE.MAGIC}/magicArrow/magicArrowMotionAnimation.png`,`${O.IMAGE.MAGIC}/magicArrow/magicArrowMotionAnimationReverse.png`,`${O.IMAGE.MAGIC}/magicArrow/magicArrowBlowAnimation.png`,`${O.IMAGE.MAGIC}/decay/decay.png`,`${O.IMAGE.MAGIC}/decay/decayBlow.png`],sound:[`${O.SOUND.MAGIC}/magicArrow/MAGICARW.mp3`,`${O.SOUND.MAGIC}/decay/DECAY.mp3`]},{image:this.magicImgsKey,sound:this.magicSoundKey}),t}async mainLogic(t){const e=this.loadManager,n=this.monsterFactory,s=this.taskFactory,i=this.magicFactory,o=this.uiComponents,r=e.getImagesByName(this.uiImgsKey)[9],a=e.getImagesByName(this.mainCharImgsKey)[0],h=new V("1%","11%",a),{width:l,height:d}=h.getBoundingClientRect();h.setBoundingClientRect(Math.floor((window.innerHeight-150)/2-d/2),Math.floor(window.innerWidth/2-l-100),l,d);let c=n.createMonster("1%","11%");this.setEnemy(c),c.addMagic(i.createMagicArrow(5,!0)),c.addMagic(i.createImplosionArrow(5));let g=0;const u=new T(t,100,100,h);for(u.addMagic(i.createMagicArrow(40)),u.addMagic(i.createImplosionArrow(40)),this.setPlayer(u);u.isAlive();){c.isAlive()||(c=n.createMonster("1%","11%"),this.setEnemy(c),c.addMagic(i.createMagicArrow(5,!0)),c.addMagic(i.createImplosionArrow(5)),g+=1);const t=new x(Math.ceil(window.innerHeight/2-55-75),Math.floor(window.innerWidth/2-214),428,132,u.getMagics(),{back:r});t.setBackgroundColor("#a0256b"),t.setOverflow("scroll"),o.addComponent(t);const e=await t.selectMagic();if(null===e){console.log("magic selecting error");break}o.removeComponent(t);const a=s.createTask(Math.ceil(window.innerHeight/2)-172-50,Math.ceil((window.innerWidth-460)/2),460,344);a.setBackgroundColor("#ffff00"),o.addComponent(a);const h=await a.getResult();if(o.removeComponent(a),h&&await u.attack(c,e,this.canvas),c.isAlive()){const t=c.getMagics(),e=Math.round(Math.random()*(t.length-1));await c.attack(u,t[e],this.canvas)}}this.showResultTable(u,g)}async showLoadingScreen(){const t=new Image;t.src=`${O.IMAGE.UI}/bardata.jpg`,await k(t);const{naturalWidth:e,naturalHeight:n}=t,s=new y(t,0,0,e,n,e,n,0,0,e,n),i=new p(0,0,window.innerWidth,window.innerHeight),o=new p(0,0,e,n,i);o.alignCenter(),o.setBackgroundImage(s),i.setBackgroundColor("#000000");const r=new B(0,0,114,16,0,100,0);return o.addComponent(r),r.alignCenter(),r.setBackgroundColor("rgba(0, 0, 0, 0)"),r.getTextComponent().setTextColor("#ffffff"),this.canvas.addScene(i),i.getLoadingProgressBar=(()=>r),i}showNameEnter(t=""){const e=this.loadManager.getImagesByName(this.uiImgsKey)[1],{naturalWidth:n,naturalHeight:s}=e,i=this.loadManager.getImagesByName(this.uiImgsKey)[2],{naturalWidth:o,naturalHeight:r}=i,a=this.loadManager.getImagesByName(this.uiImgsKey)[3],{naturalWidth:h,naturalHeight:l}=a,d=new M(0,0,o,r,"Введите свое имя:");d.setBackgroundColor("#3c76a7"),d.alignCenter(),d.setBackgroundImage(new y(i,0,0,o,r,o,r,0,0,o,r)),d.getInputUserComponent().setBoundingClientRect(void 0,void 0,n,s),d.getInputUserComponent().setBackgroundImage(new y(e,0,0,n,s,n,s,0,0,n,s));const c=Math.ceil(u("x","monospace","16px"));return d.getInputUserComponent().maxTextLength=Math.floor(n/c)+1,d.getDescriptionComponent().setBackgroundColor("rgba(0, 0, 0, 0)"),d.getDescriptionComponent().setTextColor("#ffffff"),d.getOkButtonComponent().setBoundingClientRect(r-19-l,o-19-h/2,h/2,l),d.getOkButtonComponent().setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h/2,l)),d.getInputUserComponent().setText(t),d}showResultTable(t,e){const n=this.loadManager.getImagesByName(this.uiImgsKey)[10],s=this.loadManager.getImagesByName(this.uiImgsKey)[11],{naturalWidth:i,naturalHeight:r}=n,a=new y(n,0,0,i,r,i,r,0,0,i,r),{naturalWidth:h,naturalHeight:l}=s,d=new y(s,0,0,h,l,h,l,0,0,h,l);this.storageManager.saveResult(t.getName(),e);const c=this.storageManager.getSortedRecords(),g=new v(0,0,i,252,c.length+1,2,131,25);this.uiComponents.addComponent(g),g.alignCenter(),g.setBackgroundImage(a),g.getBackgroundImage().setSize(i,r);const m=new w(0,0,Math.ceil(u("Имя:","monospace",16)),16,"Имя:"),p=new w(0,0,Math.ceil(u("Убито монстров:","monospace",16)),16,"Убито монстров:");m.setTextColor("#ffffff"),p.setTextColor("#ffffff"),p.setFontSize(14),g.getTableComponent(0,0).addComponent(m),m.alignCenter(),g.getTableComponent(0,1).addComponent(p),p.alignCenter(),c.forEach((t,e)=>{const{name:n,monsterKilled:s}=t;void 0===n&&(n="");const i=new w(0,0,Math.ceil(u(n,"monospace",16)),16,n),o=new w(0,0,Math.ceil(u(s,"monospace",16)),16,String(s));i.setTextColor("#ffffff"),o.setTextColor("#ffffff"),g.getTableComponent(1+e,0).addComponent(i),i.alignCenter(),g.getTableComponent(1+e,1).addComponent(o),o.alignCenter()}),g.setOverflow("scroll");const{top:f,right:C}=g.getBoundingClientRect(),M=new I(f,C+5,h,l,"");return M.setBackgroundImage(d),M.addEventListener(o.MOUSE.MOUSE_DOWN,t=>{this.uiComponents.dropChildren();const e=this.player.getName();this.setPlayer(null),this.setEnemy(null),this.canvas.getHtml().style.cursor="auto",this.setUpUI(e)}),this.uiComponents.addComponent(M,"restart"),g}setPlayer(t){if(this.player&&this.canvas.removeScene(this.player.getGraphicComponent()),this.player=t,null===t)return;this.uiComponents.getChildComponent(this.statusBarKey).setPlayerInfo(`${t.getName()}:`,t.getCurrentHP());const e=t.getGraphicComponent();null!==e&&this.canvas.addScene(e);const n=this.uiComponents.getChildComponent(this.statusBarKey).getPlayerInfoWindow().getHealthBar();t.addHPChangeListener(n.setValue.bind(n))}setEnemy(t){if(this.enemy&&this.canvas.removeScene(this.enemy.getGraphicComponent()),null===t)return;this.enemy=t,this.uiComponents.getChildComponent(this.statusBarKey).setEnemyInfo(`${t.getName()}:`,t.getCurrentHP());const e=t.getGraphicComponent();null!==e&&this.canvas.addScene(e);const n=this.uiComponents.getChildComponent(this.statusBarKey).getEnemyInfoWindow().getHealthBar();t.addHPChangeListener(n.setValue.bind(n))}setEventListenersToCanvas(){this.canvas.getHtml().addEventListener("mousedown",t=>{this.eventQueue.add({type:o.MOUSE.MOUSE_DOWN,subtype:"MOUSE",payload:{mouseCoord:{top:t.offsetY,left:t.offsetX}}})}),this.canvas.getHtml().addEventListener("keydown",t=>{this.eventQueue.add({type:o.KEYBOARD.KEY_DOWN,subtype:"KEYBOARD",payload:{key:t.key}})}),this.canvas.getHtml().addEventListener("keypress",t=>{this.eventQueue.add({type:o.KEYBOARD.KEY_PRESS,subtype:"KEYBOARD",payload:{key:t.key}})}),this.canvas.getHtml().addEventListener("mousemove",t=>{this.eventQueue.add({type:o.MOUSE.MOUSE_MOVE,subtype:"MOUSE",payload:{mouseCoord:{top:t.offsetY,left:t.offsetX}}})})}main(t){requestAnimationFrame(this.main),void 0!==t&&(void 0===this.prevTime&&(this.prevTime=t),this.update(),this.render(t-this.prevTime),this.prevTime=t)}update(){for(;this.eventQueue.hasNext();){const t=this.eventQueue.getNext();this.ui.handleEvent(t)}}render(t){this.canvas.draw(t)}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
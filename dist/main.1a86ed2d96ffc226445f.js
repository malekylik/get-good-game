!function(t){function e(e){for(var s,r,a=e[0],h=e[1],l=e[2],c=0,g=[];c<a.length;c++)r=a[c],o[r]&&g.push(o[r][0]),o[r]=0;for(s in h)Object.prototype.hasOwnProperty.call(h,s)&&(t[s]=h[s]);for(d&&d(e);g.length;)g.shift()();return i.push.apply(i,l||[]),n()}function n(){for(var t,e=0;e<i.length;e++){for(var n=i[e],s=!0,a=1;a<n.length;a++){var h=n[a];0!==o[h]&&(s=!1)}s&&(i.splice(e--,1),t=r(r.s=n[0]))}return t}var s={},o={0:0},i=[];function r(e){if(s[e])return s[e].exports;var n=s[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=s,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="";var a=window.webpackJsonp=window.webpackJsonp||[],h=a.push.bind(a);a.push=e,a=a.slice();for(var l=0;l<a.length;l++)e(a[l]);var d=h;i.push([3,1]),n()}({3:function(t,e,n){"use strict";n.r(e);class s{constructor(t,e){this.htmlComponent=document.createElement("canvas"),this.htmlComponent.setAttribute("tabindex",0),this.context=this.htmlComponent.getContext("2d"),void 0===t&&(t=1366),void 0===e&&(e=635),this.setSize(t,e),document.body.appendChild(this.htmlComponent),this.scenes=[],this.uis=[]}getHtml(){return this.htmlComponent}getContext(){return this.context}setSize(t,e){this.width=t,this.height=e,this.htmlComponent.style.width=`${t}px`,this.htmlComponent.style.height=`${e}px`,this.context.canvas.width=t,this.context.canvas.height=e}getSize(){return{width:this.width,height:this.height}}clear(t="#000000"){this.context.fillStyle=t,this.context.fillRect(0,0,this.width,this.height)}addScene(t){this.scenes.push(t)}addUI(t){this.uis.push(t)}removeScene(t){const e=this.scenes.indexOf(t);return 0!=~e&&(this.scenes.splice(e,1),!0)}resetScenes(){this.scenes=[]}resetUI(){this.uis=[]}draw(t){this.clear();for(let e of this.scenes)e.draw(this.context,t);for(let e of this.uis)for(let n of e.uiComponents)n.draw(this.context,t)}}class o{constructor(){this.queue=[],this.queueIndex=0}add(t){this.queue.push(t)}getNext(){if(0===this.queue.length)return null;if(this.queueIndex<this.queue.length){const t=this.queue[this.queueIndex];return this.queueIndex+=1,t}return this.queueIndex=0,this.queue=[],null}hasNext(){const t=!!(this.queue.length-this.queueIndex);return t||0===this.queue.length||(this.queueIndex=0,this.queue=[]),t}remain(){return this.queue.length-this.queueIndex}}var i={MOUSE:{MOUSE_MOVE:"mousemove",MOUSE_ENTER:"mouseenter",MOUSE_LEAVE:"mouseleave",MOUSE_DOWN:"mousedown",MOUSE_UP:"mouseup"},KEYBOARD:{KEY_PRESS:"keypress",KEY_DOWN:"keydown"},ANIMATION:{ANIMATION_END:"animationend"}};class r{constructor(t){this.selected=null,this.hovered=null,this.uiComponents=[],this.tabTree=[],this.tabIndex=-1,this.canvas=t}updateTabTree(){this.tabTree=[];for(let t of this.uiComponents)t.traverse(t=>{t.tabable&&this.tabTree.push(t)});this.tabIndex=this.tabTree.indexOf(this.selected)}resetCursorToArrow(){"auto"!==this.canvas.style.cursor&&(this.canvas.style.cursor="auto")}getMostDeepElement(t){let e=0,n=-1;return t.forEach(({depth:t},s)=>{t>=e&&(e=t,n=s)}),t[n].o}changeHoveredElement(t){null!==this.hovered&&(this.hovered.handlers.handle({...event,type:i.MOUSE.MOUSE_LEAVE,target:this.hovered,relatedTarget:t}),this.hovered.setHovered(!1)),null!==t&&t.handlers.handle({...event,type:i.MOUSE.MOUSE_ENTER,target:t,relatedTarget:this.hovered}),this.hovered=t}changeSelectedElement(t){this.selected&&(this.selected.isSelected=!1),this.selected=t,null!==t&&(t.isSelected=!0),this.tabIndex=this.tabTree.indexOf(this.selected)}dropUI(){this.uiComponents=[],this.changeSelectedElement(null)}handleMouseEvent(t){for(let e of this.uiComponents){const n=e.checkForCollision({...t.payload.mouseCoord,width:1,height:1});let s=null;null!==n?(s=this.getMostDeepElement(n),t.target=s):this.resetCursorToArrow(),this.hovered!==s&&this.changeHoveredElement(s),t.type!==i.MOUSE.MOUSE_UP&&t.type!==i.MOUSE.MOUSE_DOWN||this.selected!==s&&this.changeSelectedElement(s),null!==s&&(n.sort((t,e)=>e.depth-t.depth),n.forEach(({o:e})=>{e.handlers.handle(t)}))}}handleKeyboardEvent(t){const e=this.selected;t.target=e,e.handlers.handle(t);let n=e.getParentComponent();for(;null!==n;)n.handlers.handle(t),n=n.getParentComponent()}handleEvent(t){t.cancelBubble=!1,i[t.subtype]===i.MOUSE&&this.handleMouseEvent(t),i[t.subtype]===i.KEYBOARD&&("Tab"===t.payload.key?this.setNextSelectedElement():this.selected&&this.handleKeyboardEvent(t))}setNextSelectedElement(){const t=this.tabTree[(this.tabIndex+1)%this.tabTree.length]||null;null!==t&&this.changeSelectedElement(t)}add(t){this.uiComponents.push(t),this.updateTabTree()}remove(t){const e=this.uiComponents.indexOf(t);~e&&(this.uiComponents.splice(e,1),this.updateTabTree())}}var a=n(0);class h{constructor(t,e,n,s){this.metric={top:t,left:e,width:n,height:s},this.blinkTime=500,this.elapsedTime=0,this.color="#000000"}setPosition(t,e){this.metric.top=t,this.metric.left=e}setColor(t="#000000"){this.color=t}draw(t,e){t.save(),this.elapsedTime<this.blinkTime&&(t.strokeStyle!==this.color&&(t.strokeStyle=this.color),t.beginPath(),t.moveTo(this.metric.left,this.metric.top),t.lineTo(this.metric.left,Math.round(this.metric.top+this.metric.height+.2*this.metric.height)),t.stroke()),this.elapsedTime+=e,this.elapsedTime>2*this.blinkTime&&(this.elapsedTime=0),t.restore()}}class l{isInside(t,e){return t.left<e.left+e.width&&t.left+t.width>e.left&&t.top<e.top+e.height&&t.height+t.top>e.top}}class d{constructor(t){this.animatedProperties={},Object(a.merge)(this.animatedProperties,t.properties),this.animations={}}setAnimation(t,e,n,s){this.animations[t]={animationFunc:s,timeCount:n,time:1e3*e,elapseTime:0,animationTimesPast:0}}deleteAnimation(t){delete this.animations[t]}resetAnimatedProperties(t){this.animatedProperties={},t.hovered?Object(a.merge)(this.animatedProperties,t.hoverProperties):Object(a.merge)(this.animatedProperties,t.properties)}incrementAnimationTimesPast(t,e,n){e.elapseTime>e.time&&(e.elapseTime=0,this.resetAnimatedProperties(n),"infinite"!==e.timeCount&&(e.animationTimesPast+=1,e.animationTimesPast>=e.timeCount&&(delete this.animations[t],n.handlers.handle({target:n,type:i.ANIMATION.ANIMATION_END,subtype:"ANIMATION",payload:{animationName:t}}))))}animate(t,e,n){Object.keys(this.animations).forEach(s=>{const o=this.animations[s];o.animationFunc(t,e.properties,this.animatedProperties,o.elapseTime/o.time,e),o.elapseTime+=n,this.incrementAnimationTimesPast(s,o,e)})}}class c{constructor(){this[i.MOUSE.MOUSE_MOVE]=[],this[i.MOUSE.MOUSE_UP]=[],this[i.MOUSE.MOUSE_DOWN]=[],this[i.MOUSE.MOUSE_ENTER]=[],this[i.MOUSE.MOUSE_LEAVE]=[],this[i.KEYBOARD.KEY_PRESS]=[],this[i.KEYBOARD.KEY_DOWN]=[],this[i.ANIMATION.ANIMATION_END]=[]}handle(t){const e=this[t.type];if(e)for(let n of e)n(t)}addEventListener(t,e){this[t]&&this[t].push(e)}removeEventListener(t,e){if(this[t]){const n=this[t].findIndex(t=>t===e);~n&&this[t].splice(n,1)}}}const g=document.createElement("canvas").getContext("2d"),u=(t,e,n)=>(g.font=`${n}px ${e}`,g.measureText(t).width);class m{constructor(t=0,e=0,n=0,s=0,o=null,r){this.parentComponent=o,this.properties={},this.properties.drawBorder=!1,this.properties.overflow="visible",this.hovered=!1,this.isSelected=!1,this.drawBorder=!1,this.tabable=!1,this.properties.color={backgroundColor:"rgba(0,0,0,0)",borderColor:"rgb(77, 144, 254)"},this.backgroundImage=null,this.onremove=null,this.properties.top=t,this.properties.left=e,this.properties.width=n,this.properties.height=s,this.properties.cursor="auto",this.collision=new l,this.animations=new d(this),this.handlers=new c,this.handlers.addEventListener(i.MOUSE.MOUSE_MOVE,this.handleHover),({top:t,left:e,width:n,height:s}=this.convertFromPercentageToPixel(t,e,n,s)),this.hoverProperties={},Object(a.merge)(this.hoverProperties,this.properties),this.setBoundingClientRect(t,e,n,s),this.scrollXOffset=0,this.scrollYOffset=0,null!==o?(o.addComponent(this,r),Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect)):(this.initialBoundingClientRect={},Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect))}addEventListener(t,e){this.handlers.addEventListener(t,e)}removeEventListener(t,e){this.handlers.removeEventListener(t,e)}convertFromPercentageToPixel(t,e,n,s){const o=this.getParentComponent();let i,r;const a=/%/,h=Math.floor;return null===o?(i=window.innerWidth,r=window.innerHeight):({width:i,height:r}=o.getBoundingClientRect()),"string"==typeof t&&a.test(t)&&(t=h(parseFloat(t)/100*r)),"string"==typeof e&&a.test(e)&&(e=h(parseFloat(e)/100*i)),"string"==typeof n&&a.test(n)&&(n=h(parseFloat(n)/100*i)),"string"==typeof s&&a.test(s)&&(s=h(parseFloat(s)/100*r)),{top:t,left:e,width:n,height:s}}traverse(t){return t(this)}alignCenter(t,e){const n=this.getParentComponent();let s=0,o=0;void 0!==t&&void 0!==e?(s=t,o=e):null!==n?({width:s,height:o}=n.getBoundingClientRect()):(s=window.innerWidth,o=window.innerHeight);const{width:i,height:r}=this.getBoundingClientRect();let a=Math.round((o-r)/2),h=Math.round((s-i)/2);this.setBoundingClientRect(a,h,i,r)}setBackgroundImage(t=null){this.backgroundImage=t;const{width:e,height:n}=this.getBoundingClientRect();this.backgroundImage.setSize(e,n)}calculateTotalWidthComponent(t,e,n,s,o){const i=Object(a.get)(t,o);e[String(s)]=n+i}handleHover(t){const e=t.target,n=t.canvas;n.style.cursor!==e.properties.cursor&&(n.style.cursor=e.properties.cursor),!0!==e.hovered&&(e.hovered=!0,Object(a.merge)(e.animations.animatedProperties,e.hoverProperties))}getBoundingClientRect(){return this.animations.animatedProperties.boundingClientRect}setHovered(t){this.hovered!==t&&(this.hovered=t,t?Object(a.merge)(this.animations.animatedProperties,this.hoverProperties):Object(a.merge)(this.animations.animatedProperties,this.properties))}setBoundingClientRect(t,e,n,s){const o=this.getBoundingClientRect();let i,r,h,l;o&&({top:i,left:r,width:h,height:l}=o),void 0===t&&o&&"number"!=typeof t&&(t=i),void 0===e&&o&&"number"!=typeof e&&(e=r),void 0===n&&o&&"number"!=typeof n&&(n=h),void 0===s&&o&&"number"!=typeof s&&(s=l),this.properties.top=t,this.properties.left=e,this.properties.width=n,this.properties.height=s,this.properties.boundingClientRect={top:t,left:e,width:n,height:s,right:e+n,bottom:t+s},this.animations.animatedProperties.boundingClientRect={},this.hoverProperties.boundingClientRect={},Object(a.merge)(this.animations.animatedProperties.boundingClientRect,this.properties.boundingClientRect),Object(a.merge)(this.hoverProperties.boundingClientRect,this.properties.boundingClientRect)}setBackgroundColor(t="#000000"){this.properties.color.backgroundColor=t,this.hoverProperties.color.backgroundColor=t,this.animations.animatedProperties.color.backgroundColor=t}setBorderColor(t="#000000"){this.properties.color.borderColor=t,this.hoverProperties.color.borderColor=t,this.animations.animatedProperties.color.borderColor=t}setParentComponent(t){this.parentComponent=t;let{top:e,left:n,width:s,height:o}=this.properties;({top:e,left:n,width:s,height:o}=this.convertFromPercentageToPixel(e,n,s,o)),this.setBoundingClientRect(e,n,s,o),this.initialBoundingClientRect={},Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect)}setOverflow(t){if(this.properties.overflow=t,this.hoverProperties.overflow=t,this.animations.animatedProperties.overflow=t,"scroll"===t){const t=this.calculateTotalHeightComponent(),e=this.calculateTotalWidthComponent(),{width:n,height:s}=this.getBoundingClientRect();t>s&&(this.scrollY=new C("vertical",t,this)),e>n&&(this.scrollX=new C("horizontal",e,this))}}getParentComponent(){return this.parentComponent}getBackgroundImage(){return this.backgroundImage}getOverflow(){return this.properties.overflow}getAbsoluteCoord(){let{top:t,left:e}=this.getBoundingClientRect(),n=this.getParentComponent();for(;null!==n;){const{top:s,left:o}=n.getBoundingClientRect();t+=s,e+=o,n=n.getParentComponent()}return{top:t,left:e}}addComponent(t){}removeComponent(t){}setContextProperties(t,e){this.animations.animate(t,this,e)}paintComponent(t,e){let{top:n,left:s,width:o,height:i}=this.getBoundingClientRect(),r=this.animations.animatedProperties.color;if(t.fillStyle=r.backgroundColor,t.fillRect(s,n,o,i),"scroll"===this.properties.overflow||"overflow"===this.properties.overflow){const e=new Path2D;e.rect(s,n,o,i),t.clip(e,"nonzero")}null!==this.backgroundImage&&this.backgroundImage.draw(t,s,n),this.drawBorder&&this.isSelected&&(t.strokeStyle=r.borderColor,t.strokeRect(s,n,o,i))}drawComponent(t,e){this.setContextProperties(t,e),this.paintComponent(t,e)}draw(t,e){t.save();const n=this.getParentComponent();if(null!==n&&t.translate(n.getBoundingClientRect().left,n.getBoundingClientRect().top),this.drawComponent(t,e),this.children)for(let n of this.children)n.component.draw(t,e);t.restore()}}class p extends m{constructor(t=0,e=0,n=0,s=0,o=null){super(t,e,n,s,o),this.children=[]}addComponent(t,e){t.setParentComponent(this),void 0!==e&&"string"==typeof e?this.children.push({component:t,name:e}):this.children.push({component:t,name:Object(a.uniqueId)("component ")})}removeComponent(t){const e=this.children.findIndex(({component:e})=>e===t);return 0!=~e&&("function"==typeof this.children[e].component.onremove&&this.children[e].component.onremove(),this.children.splice(e,1),!0)}getChildComponent(t){if("number"==typeof t&&this.children.length<t&&t>=0)return this.children[t].component;const e=this.children.find(e=>e.name===t);return e?e.component:null}dropChildren(){this.children=[]}traverse(t){if(!t(this)&&this.children)for(let e of this.children){const{component:n}=e;if(n.traverse)n.traverse(t);else{if(t(n))return}}}setScrollYOffer(t){this.scrollYOffset=t,this.children.forEach(({component:e})=>{if(e instanceof C)return;const{top:n}=e.initialBoundingClientRect;e.setBoundingClientRect(n+t);const s=this.getBackgroundImage();s&&s.setScrollYOffer(s.y+t)})}setScrollXOffer(t){this.scrollXOffset=t,this.children.forEach(({component:e})=>{if(e instanceof C)return;const{left:n}=e.initialBoundingClientRect;e.setBoundingClientRect(void 0,n+t);const s=this.getBackgroundImage();s&&s.setScrollXOffer(s.x+t)})}calculateTotalWidthComponent(){if(0===this.children.length)return null;let t=this.children[0].component;const{left:e,width:n}=t.getBoundingClientRect();let s=e+n;for(let t=1;t<this.children.length;t++){const e=this.children[t].component;let{left:n,width:o}=e.getBoundingClientRect();n+o>s&&(s=n+o)}return s}calculateTotalHeightComponent(){if(0===this.children.length)return null;let t=this.children[0].component;const{top:e,height:n}=t.getBoundingClientRect();let s=e+n;for(let t=1;t<this.children.length;t++){const e=this.children[t].component;let{top:n,height:o}=e.getBoundingClientRect();n+o>s&&(s=n+o)}return s}getAbsoluteCoord(){let t=this.getParentComponent(),{top:e,left:n}=this.getBoundingClientRect();for(;null!==t;){const{top:s,left:o}=t.getBoundingClientRect();e+=s,n+=o,t=t.getParentComponent()}return{top:e,left:n}}checkForCollision(t){const e=[];let n=1;return this.traverse(s=>{const{width:o,height:i}=s.getBoundingClientRect(),{top:r,left:a}=s.getAbsoluteCoord(),h={top:r,left:a,width:o,height:i};let l=1,d=s.getParentComponent();const c=[];for(;null!==d;)l+=1,"scroll"!==d.getOverflow()&&"overflow"!==d.getOverflow()||c.push(d),d=d.getParentComponent();if(0!==c.length)for(let t=0;t<c.length;t++){const{top:e,left:n}=c[t].getAbsoluteCoord(),{width:o,height:i}=c[t].getBoundingClientRect();if(!s.collision.isInside(h,{top:e,left:n,width:o,height:i}))return null}this.collision.isInside(h,t)&&(e.push({o:s,depth:l}),l>n&&(n=l))}),0!==e.length?e:null}}class C extends p{constructor(t,e,n){let s,o=window.innerWidth,r=window.innerHeight;n&&({width:o,height:r}=n.getBoundingClientRect()),"vertical"===t?super(0,o-17,17,s=r,n):super(r-17,0,s=o,17,n),this.prevButtonHandler=this.prevButtonHandler.bind(this),this.nextButtonHandler=this.nextButtonHandler.bind(this),this.childWidth=e,this.orientation=t,this.setBackgroundColor("#F1F1F1");const{prevButton:a,nextButton:h}=this.createScrollButtons(t,s,17);"vertical"===t?(this.partOfParent=r/e,this.parAndChildDif=e-r):(this.partOfParent=o/e,this.parAndChildDif=e-o),this.scroll=this.createScroll(t,s,17,this.partOfParent),this.currentChildPos=0,this.part=10/this.scrollPosMax,this.scrollPos=0,a.addEventListener(i.MOUSE.MOUSE_DOWN,this.prevButtonHandler),h.addEventListener(i.MOUSE.MOUSE_DOWN,this.nextButtonHandler)}prevButtonHandler(t){const e=this.getParentComponent(),n=this.scroll;this.scrollPos+10<0?(this.scrollPos+=10,this.currentChildPos+=this.part*this.parAndChildDif):(this.scrollPos=0,this.currentChildPos=0),"vertical"===this.orientation?(n.setBoundingClientRect(-this.scrollPos),e.setScrollYOffer(Math.round(this.currentChildPos))):(n.setBoundingClientRect(void 0,-this.scrollPos),e.setScrollXOffer(Math.round(this.currentChildPos)))}nextButtonHandler(t){const e=this.getParentComponent(),n=this.scroll;this.scrollPos-10>-this.scrollPosMax?(this.scrollPos-=10,this.currentChildPos-=this.part*this.parAndChildDif):(this.scrollPos=-this.scrollPosMax,this.currentChildPos=-this.parAndChildDif),"vertical"===this.orientation?(n.setBoundingClientRect(-this.scrollPos),e.setScrollYOffer(Math.round(this.currentChildPos))):(n.setBoundingClientRect(void 0,-this.scrollPos),e.setScrollXOffer(Math.round(this.currentChildPos)))}getScrollButtonsChar(t){let e=String.fromCharCode(parseInt("25c4",16)),n=String.fromCharCode(parseInt("25ba",16));return"vertical"===t&&(e=String.fromCharCode(parseInt("25b2",16)),n=String.fromCharCode(parseInt("25bc",16))),{prevButtonText:e,nextButtonText:n}}createScroll(t,e,n,s){let o;const i=e-3*n;let r;return o="vertical"===t?new p(n,0,n,i,this):new p(0,n,i,n,this),(r="vertical"===t?new m(0,2,n-4,Math.floor(s*i),o):new m(2,0,Math.floor(s*i),n-4,o)).setBackgroundColor("#C1C1C1"),this.scrollPosMax=i-Math.floor(s*i),r}createScrollButtons(t,e,n){let s,{prevButtonText:o,nextButtonText:i}=this.getScrollButtonsChar(t);const r=new f(0,0,n,n,o,this);return s="vertical"===t?new f(e-2*n,0,n,n,i,this):new f(0,e-2*n,n,n,i,this),r.setBackgroundColor("#F1F1F1"),s.setBackgroundColor("#F1F1F1"),r.hoverProperties.color.backgroundColor="#D2D2D2",s.hoverProperties.color.backgroundColor="#D2D2D2",{prevButton:r,nextButton:s}}}class f extends m{constructor(t=0,e=0,n=0,s=0,o="",i=null){super(t,e,n,s,i);const r=u(o,"monospace",16);this.label=new w(Math.floor(s/2)-8,Math.floor(n/2)-Math.floor(r/2),r+1,16,o),this.properties.cursor="pointer"}paintComponent(t,e){super.paintComponent(t,e);const{top:n,left:s}=this.getBoundingClientRect();t.save(),t.translate(s,n),this.label.draw(t,e),t.restore()}}class w extends m{constructor(t=0,e=0,n=0,s=0,o="",r=null){super(t,e,n,s,r),this.text=o,this.properties.color.textColor="#000000",this.properties.textProperties={textAlign:"left",textBaseline:"top",fontSize:16,fontFamily:"monospace"},this.maxTextLength="infinite",this.editable=!1,this.handlers.addEventListener(i.MOUSE.MOUSE_DOWN,this.handleMouseDown),this.handlers.addEventListener(i.KEYBOARD.KEY_PRESS,this.handleKeyPress),this.handlers.addEventListener(i.KEYBOARD.KEY_DOWN,this.handleKeyDown),this.linesMetric=[],this.textLines=[],this.cursorPosition={row:0,column:0,index:0},this.properties.cursor="text",Object(a.merge)(this.animations.animatedProperties,this.properties),Object(a.merge)(this.hoverProperties,this.properties),this.neededToRecalculate={needed:!0,row:0},this.cursor=new h(0,0,1,this.properties.textProperties.fontSize)}checkCollisionWithGlyphs(t,e,n){let s=!1;for(let o=0;o<this.glyphPosition.length;o++){const i=this.glyphPosition[o];for(let r=0;r<i.length;r++){const{top:a,left:h,width:l,height:d}=i[r];if(s=this.collision.isInside({top:a+t,left:h+e,width:l,height:d},n))return{top:a,left:h,row:o,column:r,index:this.textLines[o].startOfLine+r}}}return null}checkCollisionWithLines(t,e,n){let s=!1;for(let o=0;o<this.linesMetric.length;o++){const{top:i,left:r,width:a,height:h}=this.linesMetric[o];if(s=this.collision.isInside({top:i+t,left:r+e,width:this.getBoundingClientRect().width,height:h},n))return{top:i,width:a,row:o,column:this.glyphPosition[o].length,index:this.textLines[o].startOfLine+this.glyphPosition[o].length}}return null}handleMouseDown(t){if(t.target.editable){const e=t.target;if(""===e.text)return e.cursor.setPosition(0,0),void(e.cursorPosition={row:0,column:0,index:0});const n={top:t.payload.mouseCoord.top,left:t.payload.mouseCoord.left,width:1,height:1},{top:s,left:o}=e.getAbsoluteCoord(),i=e.checkCollisionWithGlyphs(s,o,n);if(null!==i){const{top:t,left:n,row:s,column:o,index:r}=i;return e.cursor.setPosition(t,n),void(e.cursorPosition={row:s,column:o,index:r})}const r=e.checkCollisionWithLines(s,o,n);if(null!==r){const{top:t,width:n,row:s,column:o,index:i}=r;return e.cursor.setPosition(t,n),void(e.cursorPosition={row:s,column:o,index:i})}const{top:a,width:h}=e.linesMetric[e.linesMetric.length-1];e.cursor.setPosition(a,h),e.cursorPosition={row:e.linesMetric.length-1,column:e.glyphPosition[e.glyphPosition.length-1].length,index:e.textLines[e.glyphPosition.length-1].startOfLine+e.glyphPosition[e.glyphPosition.length-1].length}}}handleKeyPress(t){if(t.target.editable){const e=t.target;if("number"==typeof e.maxTextLength&&e.text.length>=e.maxTextLength)return;if("Delete"===t.payload.key)return;if("Backspace"===t.payload.key)return;if("Enter"===t.payload.key)return;e.text=e.insertGlyph(t.payload.key,e.cursorPosition.index,e.text),e.cursorPosition.index+=1,e.neededToRecalculate.needed=!0}}handleKeyDown(t){if(t.target.editable){const e=t.target;let n=t.payload.key,s=e.cursorPosition.index;if("Delete"===n){if(s>=e.text.length)return;e.text=e.deleteGlyph(s,e.text)}else if("Backspace"===n){if(0===s)return;e.text=e.deleteGlyph(s-1,e.text),s-=1}else{if(" "===n)return void e.handleKeyPress(t);if("ArrowRight"===n){if(s>=e.text.length)return;s+=1}else if("ArrowLeft"===n){if(0===s)return;s-=1}else if("ArrowUp"===n){if(0===s)return;const t=e.textLines[e.cursorPosition.row-1]&&e.textLines[e.cursorPosition.row-1].line.length||-1,n=e.textLines[e.cursorPosition.row].line.length;(s-=Math.max(t,n))<0&&(s=0)}else if("ArrowDown"===n){if(s>=e.text.length)return;const t=e.textLines[e.cursorPosition.row].line.length,n=e.textLines[e.cursorPosition.row+1]&&e.textLines[e.cursorPosition.row+1].line.length||-1;(s+=Math.max(t,n))>=e.text.length&&(s=e.text.length)}}e.cursorPosition.index=s,e.neededToRecalculate.needed=!0}}deleteGlyph(t,e){return e.slice(0,t)+e.slice(t+1)}insertGlyph(t,e,n){return e>=n.length?n+t:0===e?t+n:n.slice(0,e)+t+n.slice(e)}getText(){return this.text}setText(t=""){this.neededToRecalculate.needed=!0,this.text=t}setFontSize(t=16){this.properties.textProperties.fontSize=t}setTextColor(t="#000000"){this.properties.color.textColor=t}setFont(t){this.textProperties.font=t}setCursorPositionFrom2D(t,e){0!==this.glyphPosition.length?e>=this.glyphPosition[t].length?this.cursor.setPosition(this.glyphPosition[t][e-1].top,this.glyphPosition[t][e-1].left+this.glyphPosition[t][e-1].width):this.cursor.setPosition(this.glyphPosition[t][e].top,this.glyphPosition[t][e].left):this.cursor.setPosition(0,0)}setContextProperties(t,e){t.fillStyle=this.animations.animatedProperties.color.textColor,t.font=`${this.animations.animatedProperties.textProperties.fontSize}px ${this.animations.animatedProperties.textProperties.fontFamily}`,t.textAlign=this.animations.animatedProperties.textProperties.textAlign,t.textBaseline=this.animations.animatedProperties.textProperties.textBaseline,super.setContextProperties(t,e)}calculateLines(t){const e=this.getBoundingClientRect().width,n=this.animations.animatedProperties.textProperties.fontSize;this.textLines=[],this.linesMetric=[];let s=0,o=0,i=0,r="";this.text.split("").forEach(a=>{if(o=t.measureText(a).width,s+o<e)return r+=a,void(s+=o);this.linesMetric.push({top:this.textLines.length*n,left:0,width:s,height:n}),this.textLines.push({startOfLine:i,line:r}),i+=r.length,o=t.measureText(a).width,s=o,r=a}),""!==r&&(this.linesMetric.push({top:this.textLines.length*n,left:0,width:t.measureText(r).width,height:n}),this.textLines.push({startOfLine:i,line:r})),this.calculateGlyphPosition(t)}calculateGlyphPosition(t){this.glyphPosition=[];const e=this.animations.animatedProperties.textProperties.fontSize;this.textLines.forEach(({line:n},s)=>{const o=[];let i=0;n.split("").forEach(n=>{const r=t.measureText(n).width;o.push({glyph:n,left:i,top:e*s,width:r,height:e}),i+=r}),this.glyphPosition.push(o)})}setCursorToEnd(){this.cursorPosition.index=this.text.length,this.neededToRecalculate.needed=!0}convertIndexTo2DPosition(t){let e=0,n=0;for(let n=0;n<this.textLines.length&&this.textLines[n].startOfLine<=t;n++)e=n;return 0!==this.textLines.length?(n=t-this.textLines[e].startOfLine)>=this.glyphPosition[e].length&&(n=this.glyphPosition[e].length,t=this.textLines[e].startOfLine+n):(n=0,t=0),{row:e,column:n,index:t}}paintComponent(t,e){super.paintComponent(t,e);let{top:n,left:s}=this.getBoundingClientRect();if(t.save(),t.translate(s,n),this.neededToRecalculate.needed){this.calculateLines(t,this.text,this.neededToRecalculate.row);const{row:e,column:n,index:s}=this.convertIndexTo2DPosition(this.cursorPosition.index);this.cursorPosition.row=e,this.cursorPosition.column=n,this.cursorPosition.index=s,this.setCursorPositionFrom2D(e,n),this.neededToRecalculate.needed=!1}t.fillStyle=this.properties.color.textColor,t.font=`${this.properties.textProperties.fontSize}px ${this.properties.textProperties.fontFamily}`,this.textLines.forEach(({line:e},n)=>{t.fillText(e,0,this.linesMetric[n].top)}),this.isSelected&&this.editable&&this.cursor.draw(t,e),t.restore()}}class y{constructor(t,e=0,n=0,s,o,i,r,a=0,h=0,l,d){this.htmlComponent=t,this.x=e,this.y=n,void 0!==i&&(this.width=i),void 0!==r&&(this.height=r),void 0!==l&&(this.sWidth=l),void 0!==d&&(this.sHeight=d),this.naturalWidth=s,this.naturalHeight=o,this.offsetX=0,this.offsetY=0,this.scrollXOffset=0,this.scrollYOffset=0,this.sx=a,this.sy=h}setSize(t,e){this.width=t,this.height=e,this.recalculateFrames()}setScrollXOffer(t){this.scrollXOffset=t}setScrollYOffer(t){this.scrollYOffset=t}setDXPosition(t,e){this.x=t,this.y=e}recalculateFrames(){void 0!==this.naturalWidth?(this.xFramesCount=Math.floor((this.naturalWidth-this.sx)/this.sWidth),this.xFramesCount<1&&(this.xFramesCount=1)):this.xFramesCount=1,void 0!==this.naturalHeight?(this.yFramesCount=Math.floor((this.naturalHeight-this.sy)/this.sHeight),this.yFramesCount<1&&(this.yFramesCount=1)):this.yFramesCount=1,this.currentXFrame=1,this.currentYFrame=1}getHtml(){return this.htmlComponent}getXFramesCount(){return this.xFramesCount}getYFramesCount(){return this.yFramesCount}getFramesCount(){return this.xFramesCount*this.yFramesCount}getRemainXFramesCount(){return this.xFramesCount-this.currentXFrame}getRemainYFramesCount(){return this.yFramesCount-this.currentYFrame}getRemainFramesCount(){return(this.xFramesCount-this.currentXFrame)*(this.yFramesCount-this.currentYFrame)}setNextFrame(){this.currentXFrame+1>this.xFramesCount?this.currentYFrame+1>this.yFramesCount?(this.currentXFrame=1,this.currentYFrame=1):(this.currentYFrame+=1,this.currentXFrame=1):this.currentXFrame+=1,this.offsetX=this.sx+this.sWidth*(this.currentXFrame-1),this.offsetY=this.sy+this.sHeight*(this.currentYFrame-1)}setFrame(t){let e=this.getFramesCount(),n=Math.floor(e*t)+1;n>e&&(n=e);let s=this.getXFramesCount();n<s?(this.currentXFrame=n,this.currentYFrame=1):(this.currentYFrame=Math.ceil(n/s),this.currentXFrame=n-(this.currentYFrame-1)*s),this.offsetX=this.sx+this.sWidth*(this.currentXFrame-1),this.offsetY=this.sy+this.sHeight*(this.currentYFrame-1)}setOffset(t){let e=this.naturalWidth-this.sWidth,n=this.getYFramesCount()*e,s=Math.floor(n*t),o=Math.floor(s/this.sWidth);this.offsetY=this.sHeight*Math.floor(s/e),this.offsetX=s-o*this.sWidth}draw(t,e,n){let s=this.x,o=this.y;void 0!==e&&void 0!==n&&(s=e,o=n),void 0!==this.width?t.drawImage(this.htmlComponent,this.offsetX,this.offsetY,this.sWidth,this.sHeight,s+this.scrollXOffset,o+this.scrollYOffset,this.width,this.height):t.drawImage(this.htmlComponent,s+this.scrollXOffset,o+this.scrollYOffset)}}class x extends p{constructor(t=0,e=0,n=0,s=0,o,i,r=null){super(t,e,n,s,r);const a=Math.ceil(n/2),h=Math.ceil(s/2),l=Math.ceil((u(o,"monospace",16)+1)/2),d=Math.ceil(.6*a),c=Math.ceil(u("x","monospace",16)),g=new w(h-10-20-3,a-d,2*l,20,o),m=new w(h-10,a-d,2*d,20,""),p=new f(2*h-50-5,2*a-100-5,100,50,"");m.editable=!0,m.tabable=!0,m.drawBorder=!0,m.setBackgroundColor("#bb0000"),m.maxTextLength=Math.floor(d/c*2),g.setBackgroundColor("#00bbbb"),p.setBackgroundColor("#aaaaaa"),p.tabable=!0,p.drawBorder=!0,m.setTextColor("#FFFF00"),m.cursor.setColor("#08B600"),this.descriptionKey="description",this.userInputKey="userinput",this.buttonKey="button",this.addComponent(g,this.descriptionKey),this.addComponent(m,this.userInputKey),this.addComponent(p,this.buttonKey),this.initEvents(p,i)}initEvents(t,e){const n=()=>{t.isSelected&&t.getBackgroundImage().setFrame(1)},s=()=>{t.removeEventListener(i.MOUSE.MOUSE_ENTER,n),t.getBackgroundImage().setFrame(0)};t.addEventListener(i.MOUSE.MOUSE_DOWN,()=>{t.getBackgroundImage().setFrame(1),t.addEventListener(i.MOUSE.MOUSE_ENTER,n)}),e.addEventListener(i.MOUSE.MOUSE_UP,s),t.addEventListener(i.MOUSE.MOUSE_LEAVE,()=>{t.isSelected&&t.getBackgroundImage().setFrame(0)}),this.onremove=(()=>{e.removeEventListener(i.MOUSE.MOUSE_UP,s)})}addButtonEventListener(t,e){this.getChildComponent(this.buttonKey).addEventListener(t,e)}removeButtonEventListener(t,e){this.getChildComponent(this.buttonKey).removeEventListener(t,e)}getOkButtonComponent(){return this.getChildComponent(this.buttonKey)}getDescriptionComponent(){return this.getChildComponent(this.descriptionKey)}getInputUserComponent(){return this.getChildComponent(this.userInputKey)}getInputUser(){return this.getChildComponent(this.userInputKey).text}}class M extends p{constructor(t=0,e=0,n=0,s=0,o=[],i={},r=null){super(t,e,n,s,r),this.magics=[...o],this.totalWidth=0;const a=i.back,{naturalWidth:h,naturalHeight:l}=a,d=new y(a,0,0,h,l,h,l,0,0,h,l);this.setBackgroundImage(d),this.fillWithMagics()}fillWithMagics(){this.magics.forEach(t=>{const e=t.getGraphicComponent(),{width:n,height:s}=e.getBoundingClientRect(),o=t.getName(),i=Math.ceil(u(o,"monospace",16));e.drawBorder=!0,e.setBoundingClientRect(0,0,n,s);const r=new p(5,this.totalWidth+5,n,s+3+16),a=new w(0,0,i,16,o);a.properties.cursor="auto",r.addComponent(e,"picture"),r.addComponent(a,"name"),a.alignCenter(),a.setBoundingClientRect(s+3),a.setTextColor("#E8D478"),t.getGraphicComponent().tabable=!0,this.addComponent(r,t.getName()),this.totalWidth+=5+n})}addMagicSelectingEventListener(t,e){this.getChildComponent(this.buttonKey),this.magics.forEach(n=>{n.getGraphicComponent().addEventListener(t,e)})}findMagicByGraphicComponent(t){const e=this.magics.find(e=>{const n=e.getGraphicComponent();return t===n});return e||null}getMagic(t){return this.magics[t]||null}selectMagic(){return new Promise(t=>{this.addMagicSelectingEventListener(i.MOUSE.MOUSE_UP,e=>{t(e.target.getParentComponent().getParentComponent().findMagicByGraphicComponent(e.target))}),this.addEventListener(i.KEYBOARD.KEY_PRESS,e=>{"Enter"===e.payload.key&&t(e.target.getParentComponent().getParentComponent().findMagicByGraphicComponent(e.target))})})}}class I extends p{constructor(t=0,e=0,n=0,s=0,o,i,r,a=null){super(t,e,n,s,a),this.minValue=o,this.maxValue=i,this.currentValue=r,this.oneInPixel=(n-2)/(i-o);const h=new m(1,1,this.oneInPixel*(r-o),s-2);h.setBackgroundColor("#aa0000"),this.setBackgroundColor("#ffffff"),this.barComponentKey="bar";const l=`${r}/${i}`,d=Math.ceil(u(l,"monospace",16)),c=new w(0,0,d,16,l);this.labelComponentKey="label",this.addComponent(h,this.barComponentKey),this.addComponent(c,this.labelComponentKey),c.alignCenter()}getTextComponent(){return this.getChildComponent(this.labelComponentKey)}getBarComponent(){return this.getChildComponent(this.barComponentKey)}setBarColor(t="#aa0000"){this.getChildComponent(this.barComponentKey).setBackgroundColor(t)}setValue(t){this.currentValue=t;const e=this.getChildComponent(this.barComponentKey),{top:n,left:s,height:o}=e.getBoundingClientRect();e.setBoundingClientRect(n,s,Math.floor(t*this.oneInPixel),o);const i=`${t}/${this.maxValue}`,r=this.getChildComponent(this.labelComponentKey);r.setText(i);const{height:a}=r.getBoundingClientRect(),h=Math.ceil(u(i,"monospace",16))+1;r.setBoundingClientRect(0,0,h,a),r.alignCenter()}}class E extends p{constructor(t=0,e=0,n=0,s=0,o,i=null){super(t,e,n,s,i);const{naturalWidth:r,naturalHeight:a}=o,h=new y(o,0,0,r,a,r,a,0,0,r,a),l=new p(0,0,r,a,this);l.alignCenter(),l.setBackgroundImage(h),this.setBackgroundColor("#000000");const d=new I(0,0,114,16,0,100,0);l.addComponent(d),d.alignCenter(),d.setBackgroundColor("rgba(0, 0, 0, 0)"),d.getTextComponent().setTextColor("#ffffff"),this.loadingProgressBar=d}getLoadingProgressBar(){return this.loadingProgressBar}}class B extends p{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,i),this.enemyInfoWindowKey="enemy",this.playerInfoWindowKey="player",this.setBackground(o.left,o.right,o.back)}setBackground(t,e,n){const s=this.getBoundingClientRect().width,{naturalWidth:o,naturalHeight:i}=n,{naturalWidth:r,naturalHeight:a}=t,{naturalWidth:h,naturalHeight:l}=e,d=new y(n,0,0,o,i,o,i,0,0,o,i),c=new y(t,0,0,r,a,r,a,0,0,r,a),g=new y(e,0,0,h,l,h,l,0,0,h,l);let u=0;for(;u<s;){const t=new m(0,u,o,i);t.setBackgroundImage(d),this.addComponent(t),u+=o}const p=new m(0,0,r,a);p.setBackgroundImage(c),this.addComponent(p);const C=new m(0,s-h,h,l);C.setBackgroundImage(g),this.addComponent(C)}getPlayerInfoWindow(){return this.getChildComponent(this.playerInfoWindowKey)}getEnemyInfoWindow(){return this.getChildComponent(this.enemyInfoWindowKey)}setEnemyInfoWindow(t){const e=this.getChildComponent(this.enemyInfoWindowKey);e&&this.removeComponent(e),this.addComponent(t,this.enemyInfoWindowKey)}setPlayerInfoWindow(t){const e=this.getChildComponent(this.playerInfoWindowKey);e&&this.removeComponent(e),this.addComponent(t,this.playerInfoWindowKey)}setEnemyInfo(t,e){const n=this.getChildComponent(this.enemyInfoWindowKey);n.getChildComponent(n.healthBarKey).setValue(e);const s=n.getChildComponent(n.nameLabelKey);s.setText(t);const{top:o,left:i,height:r}=s.getBoundingClientRect(),a=Math.ceil(u(t,s.properties.textProperties.fontFamily,s.properties.textProperties.fontSize));s.setBoundingClientRect(o,i,a,r)}setPlayerInfo(t,e){const n=this.getChildComponent(this.playerInfoWindowKey);n.getChildComponent(n.healthBarKey).setValue(e);const s=n.getChildComponent(n.nameLabelKey);s.setText(t);const{top:o,left:i,height:r}=s.getBoundingClientRect(),a=Math.ceil(u(t,s.properties.textProperties.fontFamily,s.properties.textProperties.fontSize));s.setBoundingClientRect(o,i,a,r)}}class A extends p{constructor(t=0,e=0,n=0,s=0,o="",i,r,a,h={},l=null){super(t,e,n,s,l);const d=Math.ceil(u(`${o}:`,"monospace",16)),c=new w(15,10,d+1,16,`${o}:`),g=new I(34,10,n-24,25,i,r,a);this.nameLabelKey="namelabel",this.healthBarKey="healtbar",c.setTextColor("#ffffff");const{naturalWidth:m,naturalHeight:p}=h.back,C=new y(h.back,0,0,m,p,m,p,0,0,m,p);this.addComponent(c,this.nameLabelKey),this.addComponent(g,this.healthBarKey),this.setBackgroundImage(C)}getHealthBar(){return this.getChildComponent(this.healthBarKey)}}class b extends p{constructor(t=0,e=0,n=0,s=0,o=0,r=0,a=0,h=0,l=null){super(t,e,n,s,l),this.columnCount=r,this.rowCount=o,this.arrowKeyHandler=this.arrowKeyHandler.bind(this);let d=0;for(let t=0;t<o;t++){let e=0;for(let n=0;n<r;n++){const s=new p(d,e,a,h);this.addComponent(s,String(t*r+n)),s.setBackgroundColor("rgba(0, 0, 0, 0)"),e+=a}d+=h}this.addEventListener(i.KEYBOARD.KEY_DOWN,this.arrowKeyHandler)}arrowKeyHandler(t){const e=this.scrollX,n=this.scrollY,s=t.payload.key;e&&("ArrowLeft"===s&&e.prevButtonHandler(t),"ArrowRight"===s&&e.nextButtonHandler(t)),n&&("ArrowUp"===s&&n.prevButtonHandler(t),"ArrowDown"===s&&n.nextButtonHandler(t))}getTableComponent(t=0,e=0){const n=this.getChildComponent(String(t*this.columnCount+e));return n||null}}const v=t=>new Promise(e=>{const n=new XMLHttpRequest;n.open("HEAD",t,!0),n.onreadystatechange=(()=>{n.readyState==n.DONE&&e(n.getResponseHeader("Content-Length"))}),n.send()}),S=(t,e,n)=>new Promise(s=>{const o=new XMLHttpRequest;o.open("GET",t,!0),o.responseType="arraybuffer";let i=-1;o.onload=(t=>{const e=new Blob([o.response]);s(window.URL.createObjectURL(e))}),o.onprogress=(({loaded:t})=>{t!==i&&(i=t,e(t,n))}),o.send()}),T=t=>new Promise(e=>{t.onload=(t=>{e(t.srcElement)})});class k{constructor(){this.totalSize=0,this.currentLoadedSize=0,this.imageUrl=[],this.loadedImages=[],this.soundUrl=[],this.loadedSound=[]}addUrl(t,e){const n=t.sound,s=t.image,o=e.sound,i=e.image;s&&this.updateArray(this.imageUrl,s,i),n&&this.updateArray(this.soundUrl,n,o)}updateArray(t,e,n){let s=t.findIndex(({name:t})=>t===n);~s?t[s].urls=[...t[s].urls,...e]:t.push({urls:[...e],name:n})}async calculateTotalSize(){const t=[];let e=0;this.imageUrl.forEach(({urls:n})=>{n.forEach(n=>{t.push(v(n)),e+=1})}),this.soundUrl.forEach(({urls:e})=>{e.forEach(e=>{t.push(v(e))})});const n=await Promise.all(t);return this.totalSize=n.reduce((t,e)=>t+parseInt(e,10),0),this.imagesSize=n.slice(0,e),this.soundSize=n.slice(e),this.totalSize}async load(t){const e=[],n={},s=(e,s)=>{n[s]=e;let o=0;const i=Object.keys(n);for(let t=0;t<i.length;t++)o+=n[i[t]];this.currentLoadedSize=o;const r=Math.round(this.currentLoadedSize/this.totalSize*100);t&&t(r)};let o=0,i=0;this.imageUrl.forEach(({urls:t})=>{t.forEach(t=>{e.push(S(t,s,i)),i+=1,o+=1})}),this.soundUrl.forEach(({urls:t})=>{t.forEach(t=>{e.push(S(t,s,i)),i+=1})});const r=await Promise.all(e),a=r.slice(0,o).map(t=>{const e=new Image;return e.src=t,T(e)}),h=r.slice(o).map(t=>{const e=new Audio;return e.src=t,e}),l=[...a];let d=await Promise.all(l);const c=this.getGroupedLoadedAssets([...d,...h]);return this.imageUrl=[],this.soundUrl=[],this.loaded={...this.loadedImages,...c},c}getGroupedLoadedAssets(t){const e={images:[],sound:[]};let n=0;for(let s=0;s<this.imageUrl.length;s++){const o=this.imageUrl[s].urls.length,i=this.imageUrl[s].name;e.images.push({images:t.slice(n,n+o),name:i}),n+=o}for(let s=0;s<this.soundUrl.length;s++){const o=this.soundUrl[s].urls.length,i=this.soundUrl[s].name;e.sound.push({sound:t.slice(n,n+o),name:i}),n+=o}return e}getImagesByName(t){const e=this.loaded.images.findIndex(({name:e})=>e===t);return~e?this.loaded.images[e].images:null}getSoundByName(t){const e=this.loaded.sound.findIndex(({name:e})=>e===t);return~e?this.loaded.sound[e].sound:null}}class K{constructor(){this.keys=[],this.records=[],this.maxRecordsNumber=10;for(let t=0;t<localStorage.length;t++){const e=localStorage.key(t);e.match(/malekylik-game/)&&this.keys.push(e)}this.parseRecords()}saveResult(t,e){const n=this.maxRecordsNumber;this.records.push({name:t,monsterKilled:e}),this.records.sort((t,e)=>t.time-e.time);for(let t=0;t<this.records.length&&t<n;t++){const{name:e,monsterKilled:n}=this.records[t],s=`name=${e};monsterKilled=${n};`;localStorage.setItem("malekylik-game="+t,s)}this.records.length>n&&(this.records=this.records.slice(0,n))}parseRecords(){for(let t=0;t<this.keys.length;t++){const e=localStorage.getItem(this.keys[t]).split(";"),n={name:e[0].split("=")[1],monsterKilled:e[1].split("=")[1]};this.records.push(n)}}getSortedRecords(){return this.records.sort((t,e)=>e.monsterKilled-t.monsterKilled),this.records}}var P={IMAGE:{HEAD_IMAGES:"./assets/images/monsters/heads",BODY_IMAGES:"./assets/images/monsters/bodies",LEFT_ARM_IMAGES:"./assets/images/monsters/arms/left",RIGHT_ARM_IMAGES:"./assets/images/monsters/arms/right",LEG_IMAGES:"./assets/images/monsters/legs",BACKGROUND_IMAGES:"./assets/images",MAIN_CHAR:"./assets/images",MAGIC:"./assets/images/magic",UI:"./assets/images/ui",TASK:{NAME:"./assets/images/task/name",NAME_COUNTRY_BY_FLAG:"./assets/images/task/nameCountryByFlag"}},SOUND:{MAGIC:"./assets/sound/magic"}};class O extends p{constructor(t,e,n,s,o,i,r,a=null){const{naturalHeight:h}=n,{naturalWidth:l,naturalHeight:d}=i,{naturalWidth:c}=s,{naturalWidth:g}=o,{naturalHeight:u}=r;super(t,e,c+l+g,h+d+u-30,a);const{headComponent:m,bodyComponent:p,leftArmComponent:C,rightArmComponent:f,legComponent:w}=this.initMonsterParts(n,i,s,o,r);this.addComponent(p,"body"),this.addComponent(m,"head"),this.addComponent(w,"leg"),this.addComponent(C,"leftarm"),this.addComponent(f,"rightarm"),this.initAnimationToHead(m)}initMonsterParts(t,e,n,s,o){const{naturalWidth:i,naturalHeight:r}=t,{naturalWidth:a,naturalHeight:h}=e,{naturalWidth:l,naturalHeight:d}=n,{naturalWidth:c,naturalHeight:g}=s,{naturalWidth:u,naturalHeight:p}=o,{width:C,height:f}=this.getBoundingClientRect(),w=new m(f-p-h,C/2-a/2,a,h);w.setBackgroundImage(new y(e,0,0,a,h,a,h,0,0,a,h));const x=new m(f-p-h-r+30,C/2-i/2-15,i,r);x.setBackgroundImage(new y(t,0,0,i,r,i,r,0,0,i,r));const M=new m(f-p,C/2-u/2-13,u,p);M.setBackgroundImage(new y(o,0,0,u,p,u,p,0,0,u,p));const I=new m(f-p-h+45,C/2-15,l,d);I.setBackgroundImage(new y(n,0,0,l,d,l,d,0,0,l,d));const E=new m(f-p-h+40,C/2-89,c,g);return E.setBackgroundImage(new y(s,0,0,c,g,c,g,0,0,c,g)),{headComponent:x,bodyComponent:w,leftArmComponent:I,rightArmComponent:E,legComponent:M}}initAnimationToHead(t){const e=Math.floor(30),n=-e/500,s=-e/500;t.animations.setAnimation("headMoving",2,"infinite",(t,e,o,i,r)=>{let a;i<=.25?a=n:i>.25&&i<=.75?a=.06:i>.75&&(a=s),o.boundingClientRect.top+=a})}}class R{constructor(t,e,n,s=null){this.name=t,this.currentHP=n,this.maxHP=e,this.graphicComponent=s,this.magics=[],this.hpChangeListeners=[]}getGraphicComponent(){return this.graphicComponent}async attack(t,e,n){e?(await e.attack(this,t,n),t.takeAttack(e.damage)):t.takeAttack(5)}takeAttack(t){return this.currentHP-=t,this.currentHP<0?(this.currentHP=0,!0):(this.hpChangeListeners.forEach(t=>{t(this.currentHP)}),!1)}addMagic(t){this.magics.push(t)}getMagics(){return this.magics}getName(){return this.name}getCurrentHP(){return this.currentHP}getMaxHP(){return this.maxHP}isAlive(){return this.currentHP>0}addHPChangeListener(t){this.hpChangeListeners.push(t)}}const F=["Ужасный","Сопливый","Адский","Безбожный","Безжалостный","Буйный","Дикий","Дьявольский","Жестокий","Зверский","Злобный","Наглый","Неистовый","Неудержимый","Сатанинский","Сумасшедший"],L=["Огр","Гном","Гоблин","Вампир","Демон","Зомби","Оборотень","Тролль"],U=["Том","Макс","Дима","Денис","Артем","Вадим","Вася","Гена","Женя","Илья","Кирилл","Макар","Никита","Олег","Паша","Рома"];class _{constructor(t,e,n,s,o){this.headImgs=[...t],this.leftArmImgs=[...e],this.rightArmImgs=[...n],this.bodyImgs=[...s],this.legImgs=[...o]}createMonster(t,e){const n=Math.random,s=Math.round,o=s(n()*(this.headImgs.length-1)),i=s(n()*(this.leftArmImgs.length-1)),r=s(n()*(this.rightArmImgs.length-1)),a=s(n()*(this.bodyImgs.length-1)),h=s(n()*(this.legImgs.length-1)),l=new O(0,0,this.headImgs[o],this.leftArmImgs[i],this.rightArmImgs[r],this.bodyImgs[a],this.legImgs[h]),{width:d,height:c}=l.getBoundingClientRect();l.setBoundingClientRect(Math.floor((e-150)/2-c/2),Math.floor(t/2+100),d,c);const g=F[s(n()*(F.length-1))],u=L[s(n()*(L.length-1))],m=U[s(n()*(U.length-1))];return new R(`${g} ${u} ${m}`,100,100,l)}}var G=[{country:"Австралия",capital:"канберра",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/australia.png`},{country:"Австрия",capital:"вена",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/austria.png`},{country:"Беларусь",capital:"минск",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/belarus.png`},{country:"Бразилия",capital:"бразилиа",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/brazil.png`},{country:"Великобритания",capital:"лондон",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/unitedkingdom.png`},{country:"Греция",capital:"афины",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/greece.png`},{country:"Египет",capital:"каир",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/egypt.png`},{country:"Индия",capital:"дели",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/india.png`},{country:"Испания",capital:"мадрид",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/spain.png`},{country:"Италия",capital:"рим",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/italy.png`},{country:"Казахстан",capital:"астана",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/kazakhstan.png`},{country:"Китай",capital:"пекин",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/china.png`},{country:"Корея Северная",capital:"пхеньян",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/northkorea.png`},{country:"Корея Южная",capital:"сеул",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/southkorea.png`},{country:"Российская Федерация",capital:"москва",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/russia.png`},{country:"США",capital:"вашингтон",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/unitedstates.png`},{country:"Украина",capital:"киев",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/ukraine.png`},{country:"Япония",capital:"токио",flagImage:`${P.IMAGE.TASK.NAME_COUNTRY_BY_FLAG}/japan.png`}];var N=[{names:["alligator","crocodile"],image:`${P.IMAGE.TASK.NAME}/alligator.jpg`},{names:["bear"],image:`${P.IMAGE.TASK.NAME}/bear.jpg`},{names:["crow"],image:`${P.IMAGE.TASK.NAME}/crow.jpg`},{names:["dolphin"],image:`${P.IMAGE.TASK.NAME}/dolphin.jpg`},{names:["fox"],image:`${P.IMAGE.TASK.NAME}/fox.jpg`},{names:["tiger"],image:`${P.IMAGE.TASK.NAME}/tiger.jpg`},{names:["lion","lev","lew"],image:`${P.IMAGE.TASK.NAME}/lion.jpg`},{names:["cat","male cat"],image:`${P.IMAGE.TASK.NAME}/cat.jpg`},{names:["dog"],image:`${P.IMAGE.TASK.NAME}/dog.jpg`},{names:["horse"],image:`${P.IMAGE.TASK.NAME}/horse.jpg`},{names:["zebra"],image:`${P.IMAGE.TASK.NAME}/zebra.jpg`}];class Y extends p{constructor(t=0,e=0,n=0,s=0,o="",i={},r,a=null){super(t,e,n,s,a);const h=Math.ceil(n/2);let l=Math.ceil(u(o,"monospace","16px")/2);l>h-20&&(l=h-20);const d=new w(10,h-l,2*l,30,o),c=new f(0,0,100,100,"");d.setBackgroundColor("#00bbbb"),c.setBackgroundColor("#aaaaaa"),this.descriptionKey="description",this.buttonKey="button",this.addComponent(d,this.descriptionKey),this.addComponent(c,this.buttonKey),d.setBackgroundColor("rgba(0, 0, 0, 0)"),d.setTextColor("#ffffff");const g=i.images.modalWindowImage,{naturalWidth:m,naturalHeight:p}=g,C=i.images.okButtonImage,{naturalWidth:x,naturalHeight:M}=C;this.setBackgroundImage(new y(g,0,0,m,p,m,p,0,0,m,p));c.setBoundingClientRect(p-19-M,m-19-x/2,x/2,M),c.setBackgroundImage(new y(C,0,0,x,M,x,M,0,0,x/2,M)),c.tabable=!0,c.drawBorder=!0,this.initEvents(c,r)}initEvents(t,e){const n=()=>{t.isSelected&&t.getBackgroundImage().setFrame(1)},s=()=>{t.removeEventListener(i.MOUSE.MOUSE_ENTER,n)};t.addEventListener(i.MOUSE.MOUSE_DOWN,()=>{t.getBackgroundImage().setFrame(1),t.addEventListener(i.MOUSE.MOUSE_ENTER,n)}),e.addEventListener(i.MOUSE.MOUSE_UP,s),t.addEventListener(i.MOUSE.MOUSE_LEAVE,()=>{t.isSelected&&t.getBackgroundImage().setFrame(0)}),this.onremove=(()=>{e.removeEventListener(i.MOUSE.MOUSE_UP,s)})}getDefaultComponent(){return this.getOkButtonComponent()}getOkButtonComponent(){return this.getChildComponent(this.buttonKey)}getTaskDescriptionComponent(){return this.getChildComponent(this.descriptionKey)}addButtonEventListener(t,e){this.getChildComponent(this.buttonKey).addEventListener(t,e)}answerIsRight(){return!1}getResult(){return new Promise(t=>{this.addButtonEventListener(i.MOUSE.MOUSE_UP,()=>{this.getOkButtonComponent().getBackgroundImage().setFrame(0),t(this.answerIsRight())}),this.addEventListener(i.KEYBOARD.KEY_PRESS,e=>{"Enter"===e.payload.key&&!0!==e.cancelBubble&&t(this.answerIsRight())})})}}const H=[{charPresentation:"+",perform:(t,e)=>t+e},{charPresentation:"-",perform:(t,e)=>t-e},{charPresentation:"x",perform:(t,e)=>t*e}];var W=[{word:"age",translate:["возраст","век","эпоха","период","стареть"]},{word:"appear",translate:["появляться","казаться","предстать"]},{word:"artist",translate:["художник","артист"]},{word:"autumn",translate:["осень","осенний"]},{word:"bay",translate:["залив","бухта","отсек","губа"]},{word:"beak",translate:["клюв"]},{word:"bloom",translate:["цветение","расцвет","цвести","расцвести"]},{word:"bumpy",translate:["ухабистый","неровный"]},{word:"burst",translate:["взрыв","вспышка","разрыв","лопнуть","разрывать"]},{word:"buzz",translate:["гудеть","жужжать","гул","жужжание","слухи"]},{word:"care",translate:["забота","уход","заботиться","ухаживать"]},{word:"check",translate:["проверка","чек","контроль","проверять","контролировать"]},{word:"chilly",translate:["холодно","сухо","зябко","холодный","прохладный","зябкий","промозглый"]},{word:"comfort",translate:["комфорт","удобства","уют","утешить","утешать"]},{word:"community",translate:["сообщество","община","общество","общность"]},{word:"country",translate:["страна","местность","загородный"]},{word:"covered",translate:["крытый","покрытый"]},{word:"cradle",translate:["колыбель","люлька","гнездо"]},{word:"dangle",translate:["мотаться","болтаться","свисать","качаться"]},{word:"decision",translate:["решение"]},{word:"delicious",translate:["вкусно","восхитительный"]},{word:"dentist",translate:["дантист","зубной врач"]},{word:"dew",translate:["роса"]},{word:"disappear",translate:["исчезать","пропадать"]},{word:"dusty",translate:["пыльный"]},{word:"edge",translate:["край","преимущество","кромка"]},{word:"farmer",translate:["фермер","колхозник"]},{word:"fear",translate:["страх","боязнь","опасение","бояться","опасаться"]},{word:"firefly",translate:["светляк","светлячок"]},{word:"fix",translate:["фиксировать","исправлять","устанавливать","чинить"]},{word:"fluffy",translate:["пушистый"]},{word:"follow",translate:["следовать","следить","придерживаться","идти"]},{word:"gallop",translate:["галопом","галоп","скачка","проскакать","скакать галопом","галопировать"]},{word:"gentle",translate:["нежный","мягкий","вежливый"]},{word:"glance",translate:["взгляд","зрение","вид","зрелище","прицел","увидеть"]},{word:"glossy",translate:["глянцевый","блестящий"]},{word:"glow",translate:["пылать","светиться","пылать","свечение","жар","румянец"]},{word:"goal",translate:["цель","гол","задача"]},{word:"half",translate:["половина","часть","наполовину"]},{word:"healthy",translate:["здоровый","полезный"]},{word:"hoof",translate:["копыто","нога"]},{word:"include",translate:["включать"]},{word:"invitation",translate:["приглашение"]},{word:"knight",translate:["рыцарь"]},{word:"lazy",translate:["ленивый"]},{word:"leaf",translate:["лист","листовой"]},{word:"leak",translate:["утечка","течь","просачиваться"]},{word:"library",translate:["библиотека","библиотечный"]},{word:"market",translate:["рынок","базар","продавать","рыночный"]},{word:"melt",translate:["таять","плавиться","растопить","плавиться","плавить"]},{word:"miserable",translate:["несчастный","жалкий","убогий"]},{word:"month",translate:["месяц"]},{word:"muddy",translate:["мутить","грязный","мутный","тусклый"]},{word:"museum",translate:["музей"]},{word:"note",translate:["заметка","внимание","примечание","записка"]},{word:"pair",translate:["пара","чета","парный"]},{word:"patient",translate:["пациент","терпеливый","пациент","больной"]},{word:"peaceful",translate:["мирное","спокойный","мирный"]},{word:"peck",translate:["клевать","долбить","клевок"]},{word:"pilot",translate:["пилот","летчик","пилотировать"]},{word:"plan",translate:["план","схема","проект","замысел","планировать"]},{word:"pointy",translate:["заостренный"]},{word:"pond",translate:["пруд","водоем","бассейн"]},{word:"president",translate:["президент","председатель"]},{word:"protect",translate:["защищать","охранять","беречь","оберегать"]},{word:"race",translate:["раса","гонки","гонка","род"]},{word:"reach",translate:["достичь","охват","досягаемость","достигать","связаться","доходить"]},{word:"relax",translate:["расслабиться","отдыхать","расслабляться"]},{word:"rotten",translate:["гнилой","прогнивший","тухлый"]},{word:"round",translate:["круглый","раунд","тур","круг","вокруг","кругом","округлять"]},{word:"row",translate:["ряд","грести"]},{word:"sail",translate:["паруса","парус","плыть","плавать"]},{word:"scene",translate:["сцена","картина","эпизод","место действия"]},{word:"scrub",translate:["скраб","кустарник","скрести","тереть"]},{word:"shade",translate:["тень","оттенок"]},{word:"ship",translate:["корабль","судно"]},{word:"shore",translate:["берег","побережье","береговой","подпирать"]},{word:"silky",translate:["шелковистый","шелковый"]},{word:"slide",translate:["горка","слайд","скольжение","ползун","скользить"]},{word:"sniff",translate:["сопение","вдох","нюхать","вдыхать","сопеть"]},{word:"soapy",translate:["мыльный","мылкий"]},{word:"sparkle",translate:["искриться","сверкать","блистать","блестеть","блеск","сияние","искорка","сверкание"]},{word:"spotted",translate:["пятнистый","запятнанный"]},{word:"spring",translate:["весна","пружина","рессора","источник","родник","весенний","возникать"]},{word:"stare",translate:["глазеть","пялиться","поглазеть","пристальный взгляд"]},{word:"summer",translate:["лето"]},{word:"supplies",translate:["предметы снабжения","запас","припасы"]},{word:"tangled",translate:["запутанный"]},{word:"tent",translate:["палатка","навес"]},{word:"tomorrow",translate:["завтра","завтрашний день","завтрашний"]},{word:"trade",translate:["сделка","торговля","торговать","торговый"]},{word:"warm",translate:["тепло","теплый","горячий","жаркий","нагреваться","согревать","греть"]},{word:"wave",translate:["волна","волновой","махать","махнуть","размахивать","развеваться"]},{word:"week",translate:["неделю","неделя"]},{word:"wiggle",translate:["покачивание","покачиваться","извиваться","покачивать","ерзать","покачивание"]},{word:"winter",translate:["зима","зимний"]},{word:"wish",translate:["желание","пожелание","желать"]},{word:"yesterday",translate:["вчера","вчерашний день"]},{word:"young",translate:["молодой","юный","молодежь"]}];const D=window.SpeechRecognition||window.webkitSpeechRecognition;class $ extends m{constructor(t=0,e=0,n=0,s=0,o,r=null){super(t,e,n,s,r),this.properties.cursor="pointer";const a=t+s,h=e+n;this.cellCount=o;this.originCoord={x:e+20,y:a-20},this.xAxisCoord={x:h-10,y:this.originCoord.y},this.yAxisCoord={x:this.originCoord.x,y:t+10},this.lastCellXAxisCoord={x:this.xAxisCoord.x-20,y:this.xAxisCoord.y},this.lastCellYAxisCoord={x:this.yAxisCoord.x,y:this.yAxisCoord.y+20},this.xAxisArrow={leftPoint:{x:this.xAxisCoord.x-6,y:this.xAxisCoord.y-8},rightPoint:{x:this.xAxisCoord.x-6,y:this.xAxisCoord.y+8}},this.yAxisArrow={leftPoint:{x:this.yAxisCoord.x-8,y:this.yAxisCoord.y+6},rightPoint:{x:this.yAxisCoord.x+8,y:this.yAxisCoord.y+6}},this.xAxisWidth=this.lastCellXAxisCoord.x-this.originCoord.x,this.yAxisWidth=this.originCoord.y-this.lastCellYAxisCoord.y,this.oneCellX=this.xAxisWidth/(o+1),this.oneCellY=this.yAxisWidth/(o+1),this.point=null,this.onchartchange=null,this.addEventListener(i.MOUSE.MOUSE_DOWN,this.handleClick)}handleClick(t){const e=t.target,{top:n,left:s}=e.getAbsoluteCoord(),{top:o,left:i}=t.payload.mouseCoord,r=o-n+e.getBoundingClientRect().top,a=i-s+e.getBoundingClientRect().left;if(r<e.lastCellYAxisCoord.y+e.oneCellY/2||r>e.originCoord.y||a<e.originCoord.x||a>e.lastCellXAxisCoord.x-e.oneCellX/2)e.point=null;else{const t=Math.round((e.originCoord.y-r)/e.oneCellY),n=Math.round((a-e.originCoord.x)/e.oneCellX);e.setPoint(n,t)}"function"==typeof e.onchartchange&&e.onchartchange(e.point)}getPoint(){return null===this.point?null:{x:this.point.x,y:this.point.y}}paintChartAxises(t,e,n){t.strokeStyle="#000000",t.lineWidth=3,t.beginPath(),t.moveTo(e,n),t.lineTo(this.xAxisCoord.x,this.xAxisCoord.y),t.moveTo(this.xAxisCoord.x,this.xAxisCoord.y),t.lineTo(this.xAxisArrow.leftPoint.x,this.xAxisArrow.leftPoint.y),t.moveTo(this.xAxisCoord.x,this.xAxisCoord.y),t.lineTo(this.xAxisArrow.rightPoint.x,this.xAxisArrow.rightPoint.y),t.moveTo(this.yAxisCoord.x,this.yAxisCoord.y),t.lineTo(this.yAxisArrow.leftPoint.x,this.yAxisArrow.leftPoint.y),t.moveTo(this.yAxisCoord.x,this.yAxisCoord.y),t.lineTo(this.yAxisArrow.rightPoint.x,this.yAxisArrow.rightPoint.y),t.moveTo(e,n),t.lineTo(this.yAxisCoord.x,this.yAxisCoord.y),t.stroke(),t.fillStyle="#000000",t.font="16px monospace",t.textBaseline="top",t.textAlign="center",t.fillText("0",e,n)}paintChartGrid(t,e,n){t.strokeStyle="#777777",t.lineWidth=2,t.beginPath();const s=this.lastCellYAxisCoord.y+this.oneCellY;for(let o=1;o<this.cellCount+1;o++){const i=e+o*this.oneCellX;t.moveTo(i,n),t.lineTo(i,s),t.fillText(String(o),i,n)}t.textBaseline="middle",t.textAlign="right";const o=this.lastCellXAxisCoord.x-this.oneCellX;for(let s=1;s<this.cellCount+1;s++){const i=n-(this.cellCount+1-s)*this.oneCellY;t.moveTo(e,i),t.lineTo(o,i),t.fillText(String(this.cellCount+1-s),e-3,i)}t.stroke()}paintPoint(t){t.save(),t.strokeStyle="#aa0000",t.beginPath(),t.arc(this.point.pointCoord.x,this.point.pointCoord.y,5,0,2*Math.PI),t.clip(),t.stroke(),t.fillStyle="#aa0000",t.fillRect(this.point.pointCoord.x-10,this.point.pointCoord.y-10,20,20),t.restore()}paintComponent(t,e){t.save(),super.paintComponent(t,e);const{top:n,left:s,width:o,height:i}=this.getBoundingClientRect(),{x:r,y:a}=this.originCoord;t.fillStyle="#ffffff",t.fillRect(s,n,o,i),this.paintChartAxises(t,r,a),this.paintChartGrid(t,r,a),null!==this.point&&this.paintPoint(t),t.restore()}setPoint(t,e){t>this.cellCount||t<0||e>this.cellCount||e<0?this.point=null:this.point={x:t,y:e,pointCoord:{x:this.originCoord.x+this.oneCellX*t,y:this.originCoord.y-this.oneCellY*e}}}}const j=(t,e,n,s)=>{let o,i=t,r=e;return i/n>r/s?(i>n&&(i=n),o=i/t,(r=Math.round(e*o))>s&&(r=s)):(r>s&&(r=s),o=r/e,(i=Math.round(t*o))>n&&(i=n)),{taskImageWidthProp:i,taskImageHeightProp:r}};class X extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Назови то, что нарисовано на картинке одним словом на английском:",o,i);const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=o.images.nameImage,{naturalWidth:d,naturalHeight:c}=l,g=Math.ceil(s/2),p=Math.round(h/2),C=new w(g-p,5,a,h,"");C.tabable=!0,C.editable=!0,C.drawBorder=!0,C.setBackgroundColor("#bb0000");const f=Math.ceil(u("x","monospace","16px"));C.maxTextLength=Math.floor(a/f)+1,C.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),C.setTextColor("#FFFF00"),C.cursor.setColor("#08B600"),this.answerKey="answer",this.addComponent(C,this.answerKey),C.alignCenter();const{top:x,height:M}=super.getOkButtonComponent().getBoundingClientRect();C.setBoundingClientRect(x+Math.round((M-h)/2));const{bottom:I,left:E}=super.getTaskDescriptionComponent().getBoundingClientRect();let{taskImageWidthProp:B,taskImageHeightProp:A}=j(d,c,n-2*E,s-(s-x)-I-20);this.taskImageKey="task";const b=new m(0,0,B,A);b.setBackgroundImage(new y(l,0,0,d,c,B,A,0,0,d,c)),this.addComponent(b,this.taskImageKey),b.alignCenter(),b.setBoundingClientRect(I+10),this.imageNames=o.additional.name.taskNames}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){const t=this.getChildComponent(this.answerKey).getText().trim().toLowerCase(),e=this.imageNames;let n=!1;for(let s=0;s<e.length;s++)if(n=t===e[s])return n;return n}}const z=[{charPresentation:"+",perform:(t,e)=>t+e},{charPresentation:"-",perform:(t,e)=>t-e},{charPresentation:"*",perform:(t,e)=>t*e}];const q=["black","blue","brown","green","orange","pink","red","white","yellow"];const V=[function(){const t=Math.round(8*Math.random())+2,e=Math.round(8*Math.random())+2;this.getTaskText=(()=>`Дан прямоугольный треугольник, у которого первый катет равен ${t}, а второй - ${e}. Найди его площадь. Ответ округли до целого числа:`),this.answer=Math.round(.5*t*e)},function(){const t=Math.round(8*Math.random())+2,e=Math.round(8*Math.random())+2;this.getTaskText=(()=>`Дан треугольник, у которого основание равно ${t}, а высота ${e}. Найди его площадь. Ответ округли до целого числа:`),this.answer=Math.round(.5*t*e)}];class Q extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Назови страну по флагу:",o,i);const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=o.images.nameCountryByFlagImage,{naturalWidth:d,naturalHeight:c}=l,g=Math.ceil(s/2),p=Math.round(h/2),C=new w(g-p,5,a,h,"");C.tabable=!0,C.editable=!0,C.drawBorder=!0,C.setBackgroundColor("#bb0000");const f=Math.ceil(u("x","monospace","16px"));C.maxTextLength=Math.floor(a/f)+1,C.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),C.setTextColor("#FFFF00"),C.cursor.setColor("#08B600"),this.answerKey="answer",this.addComponent(C,this.answerKey),C.alignCenter();const{top:x,height:M}=super.getOkButtonComponent().getBoundingClientRect();C.setBoundingClientRect(x+Math.round((M-h)/2));const{bottom:I,left:E}=super.getTaskDescriptionComponent().getBoundingClientRect();let{taskImageWidthProp:B,taskImageHeightProp:A}=j(d,c,n-2*E,s-(s-x)-I-20);this.taskImageKey="task";const b=new m(0,0,B,A);b.setBackgroundImage(new y(l,0,0,d,c,B,A,0,0,d,c)),this.addComponent(b,this.taskImageKey),b.alignCenter(),this.answer=o.additional.nameCountryByFlag.answer}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){return this.getChildComponent(this.answerKey).getText().trim().toLowerCase()===this.answer}}const J=[class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Переведи слово:",o,i),this.wordObj=W[Math.round(Math.random()*(W.length-1))];const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=`${this.wordObj.word}: `,d=Math.ceil(s/2),c=Math.ceil((u(l,"monospace",16)+1)/2),g=Math.round(h/2),m=new w(d-h-g,5,2*c,h,l),p=new w(d-g,5,a,h,"");p.editable=!0,p.tabable=!0,p.drawBorder=!0,p.setBackgroundColor("#bb0000");const C=Math.ceil(u("x","monospace",16));p.maxTextLength=Math.floor(a/C)+1,p.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),p.setTextColor("#FFFF00"),p.cursor.setColor("#08B600"),m.setBackgroundColor("rgba(0, 0, 0, 0)"),m.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(m,this.expressionKey),this.addComponent(p,this.answerKey),p.alignCenter(),m.setBoundingClientRect(void 0,p.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){const t=this.getChildComponent(this.answerKey).getText().trim().toLowerCase(),e=this.wordObj.translate;let n=!1;for(let s=0;s<e.length;s++)if(n=t===e[s])return n;return n}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Решите данное выражение:",o,i);const r=H[Math.round(Math.random()*(H.length-1))],a=o.images.textFieldImage,{naturalWidth:h,naturalHeight:l}=a,{firstOperand:d,secondOperand:c}=this.getOperands(r);this.taskRightAnswer=r.perform(d,c);const g=`${d} ${r.charPresentation} ${c} =`,m=Math.ceil(n/2),p=Math.ceil(s/2),C=Math.ceil((u(g,"monospace","16px")+1)/2),f=Math.ceil((u("9999","monospace","16px")+1)/2),x=f+C+3,M=Math.round(l/2),I=new w(p-M,m-x,2*C,l,g),E=new w(p-M,m-x+2*C+3,2*f,l,"");I.setBackgroundColor("rgba(0, 0, 0, 0)"),I.setTextColor("#ffffff"),E.editable=!0,E.tabable=!0,E.drawBorder=!0,E.setBackgroundColor("rgba(0, 0, 0, 0)"),E.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h,l)),E.maxTextLength=4,E.setTextColor("#FFFF00"),E.cursor.setColor("#08B600"),this.expressionKey="expression",this.answerKey="answer",this.addComponent(I,this.expressionKey),this.addComponent(E,this.answerKey)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}getOperands(t){let e=1,n=1;if(e=Math.round(50*Math.random()),"x"===t.charPresentation)if(0===e)n=Math.round(50*Math.random());else{const t=Math.ceil(100/e);n=Math.floor(Math.random()*t)}else n=Math.round(50*Math.random());return{firstOperand:e,secondOperand:n}}answerIsRight(){return parseFloat(this.getChildComponent(this.answerKey).getText())===this.taskRightAnswer}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){const r={x:Math.round(10*Math.random()),y:Math.round(10*Math.random())};super(t,e,n,s,`Поставте точку с координатами (${r.x}:${r.y}):`,o,i),this.onChartChange=this.onChartChange.bind(this),this.onInputChange=this.onInputChange.bind(this);const a=super.getTaskDescriptionComponent().getBoundingClientRect(),h=super.getOkButtonComponent().getBoundingClientRect();this.chartBoundingClientBox={top:a.bottom+5,left:20,bottom:s-20,right:h.left-5},this.point=r,this.chartBoundingClientBox.width=this.chartBoundingClientBox.right-this.chartBoundingClientBox.left,this.chartBoundingClientBox.height=this.chartBoundingClientBox.bottom-this.chartBoundingClientBox.top,this.chartKey="chart";const l=new $(this.chartBoundingClientBox.top,this.chartBoundingClientBox.left,this.chartBoundingClientBox.width,this.chartBoundingClientBox.height,10);l.onchartchange=this.onChartChange,this.addComponent(l,this.chartKey),this.initLabels(o)}getDefaultComponent(){return this.getXInput()}onChartChange(t){const e=this.getXInput(),n=this.getYInput();null!==t?(e.setText(String(t.x)),n.setText(String(t.y))):(e.setText(""),n.setText(""))}onInputChange(){const t=parseInt(this.getXInput().getText(),10),e=parseInt(this.getYInput().getText(),10),n=this.getChartComponent();t==t&&e==e?n.setPoint(t,e):n.setPoint(-1,-1)}getXInput(){return this.getChildComponent(this.xLabelInputKey)}getYInput(){return this.getChildComponent(this.yLabelInputKey)}initLabels(t){const e=t.images.textFieldImage,{naturalWidth:n,naturalHeight:s}=e;this.xLabelKey="xlabel",this.xLabelInputKey="xlabelinput",this.yLabelKey="ylabel",this.yLabelInputKey="ylabelinput";const o=s,r=Math.ceil(u("X:","monospace",o)),a=new w(this.chartBoundingClientBox.top,this.chartBoundingClientBox.right+5,r,o,"X:");a.setTextColor("#ffffff"),this.addComponent(a,this.xLabelKey);const h=new w(this.chartBoundingClientBox.top,a.getBoundingClientRect().right+3,r,o,"");h.editable=!0,h.tabable=!0,h.drawBorder=!0,h.setBackgroundImage(new y(e,0,0,n,s,n,s,0,0,n,s)),h.setBackgroundColor("#bb0000"),h.maxTextLength=2,h.setTextColor("#FFFF00"),h.cursor.setColor("#08B600"),this.addComponent(h,this.xLabelInputKey);const l=new w(a.getBoundingClientRect().bottom+5,this.chartBoundingClientBox.right+5,r,o,"Y:");l.setTextColor("#ffffff"),this.addComponent(l,this.yLabelKey);const d=new w(l.getBoundingClientRect().top,l.getBoundingClientRect().right+3,r,o,"");d.editable=!0,d.tabable=!0,d.drawBorder=!0,d.setBackgroundImage(new y(e,0,0,n,s,n,s,0,0,n,s)),d.setBackgroundColor("#bb0000"),d.maxTextLength=2,d.setTextColor("#FFFF00"),d.cursor.setColor("#08B600"),this.addComponent(d,this.yLabelInputKey),h.addEventListener(i.KEYBOARD.KEY_DOWN,this.onInputChange),h.addEventListener(i.KEYBOARD.KEY_PRESS,this.onInputChange),d.addEventListener(i.KEYBOARD.KEY_DOWN,this.onInputChange),d.addEventListener(i.KEYBOARD.KEY_PRESS,this.onInputChange)}answerIsRight(){const t=this.getChartComponent().getPoint();return null!==t&&this.point.x===t.x&&this.point.y===t.y}getChartComponent(){return this.getChildComponent(this.chartKey)}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Переведите число из десетичной в двоичную систему счисления:",o,i);const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r;this.numberToConvert=Math.round(32*Math.random());const l=`Число для перевода ${this.numberToConvert}:`,d=Math.round(h/2),c=Math.ceil(s/2),g=Math.ceil((u(l,"monospace","16px")+1)/2),m=new w(c-h-d,5,2*g,h,l),p=new w(c-d,5,a,h,"");p.tabable=!0,p.editable=!0,p.drawBorder=!0,p.setBackgroundColor("#bb0000"),p.maxTextLength=8,p.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),p.setTextColor("#FFFF00"),p.cursor.setColor("#08B600"),m.setBackgroundColor("rgba(0, 0, 0, 0)"),m.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(m,this.expressionKey),this.addComponent(p,this.answerKey),p.alignCenter(),m.setBoundingClientRect(void 0,p.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){return this.getChildComponent(this.answerKey).getText().trim().toLowerCase()===this.numberToConvert.toString(2)}},X,Q,class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Одно из слагаемых данно. Напиши второе слагаемое, чтобы сумма давала верное равенство:",o,i);const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=this.initTask(),d=Math.ceil(s/2),c=Math.round(h/2),g=Math.ceil((u(l,"monospace","16px")+1)/2),m=new w(d-h-c,5,2*g,h,l),p=new w(d-c,5,a,h,"");p.tabable=!0,p.editable=!0,p.drawBorder=!0,p.setBackgroundColor("#bb0000"),p.maxTextLength=2,p.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),p.setTextColor("#FFFF00"),p.cursor.setColor("#08B600"),m.setBackgroundColor("rgba(0, 0, 0, 0)"),m.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(m,this.expressionKey),this.addComponent(p,this.answerKey),p.alignCenter(),m.setBoundingClientRect(void 0,p.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}initTask(){let t,e=Math.round(97*Math.random())+2,n=Math.round(Math.random()*(e-2))+1;return this.number=e-n,t=Math.round(Math.random())?`? + ${n} = ${e}`:`${n} + ? = ${e}`}answerIsRight(){return parseInt(this.getChildComponent(this.answerKey).getText())===this.number}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Какой знак ты поставишь между этими числами (>, < или =):",o,i);const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r;this.first=Math.round(100*Math.random()),this.second=Math.round(100*Math.random());const l=`${this.first} ? ${this.second}:`,d=Math.round(h/2),c=Math.ceil(s/2),g=Math.ceil((u(l,"monospace","16px")+1)/2),m=new w(c-h-d,5,2*g,h,l),p=new w(c-d,5,a,h,"");p.editable=!0,p.tabable=!0,p.drawBorder=!0,p.setBackgroundColor("#bb0000"),p.maxTextLength=1,p.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),p.setTextColor("#FFFF00"),p.cursor.setColor("#08B600"),m.setBackgroundColor("rgba(0, 0, 0, 0)"),m.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(m,this.expressionKey),this.addComponent(p,this.answerKey),p.alignCenter(),m.setBoundingClientRect(void 0,p.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){const t=this.getChildComponent(this.answerKey).getText();return">"===t?this.first>this.second:"<"===t?this.first<this.second:"="===t&&this.first===this.second}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"В этом ряду есть закономерность, закончи его:",o,i);const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r;this.number=Math.round(95*Math.random())+4;const l=this.createSequenceText(),d=Math.round(h/2),c=Math.ceil(s/2),g=Math.ceil((u(l,"monospace","16px")+1)/2),m=new w(c-h-d,5,2*g,h,l),p=new w(c-d,5,a,h,"");p.editable=!0,p.tabable=!0,p.drawBorder=!0,p.setBackgroundColor("#bb0000"),p.maxTextLength=2,p.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),p.setTextColor("#FFFF00"),p.cursor.setColor("#08B600"),m.setBackgroundColor("rgba(0, 0, 0, 0)"),m.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(m,this.expressionKey),this.addComponent(p,this.answerKey),p.alignCenter(),m.setBoundingClientRect(void 0,p.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}createSequenceText(){let t=Math.floor(this.number/4),e=0;e=t>10?Math.round(8*Math.random())+1:Math.round(Math.random()*(t-1))+1;let n=this.number-1*e,s=this.number-2*e,o=this.number-3*e;return`${this.number-4*e}, ${o}, ${s}, ${n}, ?:`}answerIsRight(){return parseInt(this.getChildComponent(this.answerKey).getText(),10)===this.number}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"В выражении пропущен арифметический знак. Выбери подходящий из +, - и *:",o,i);const r=z[Math.round(Math.random()*(z.length-1))],a=o.images.textFieldImage,{naturalWidth:h,naturalHeight:l}=a,{firstOperand:d,secondOperand:c}=this.getOperands(r),g=r.perform(d,c);this.operationCharPresentation=r.charPresentation;const m=`${d} ? ${c} = ${g}`,p=Math.round(l/2),C=Math.ceil(s/2),f=Math.ceil((u(m,"monospace","16px")+1)/2),x=new w(C-l-p,5,2*f,l,m),M=new w(C-p,5,h,l,"");M.editable=!0,M.tabable=!0,M.drawBorder=!0,M.setBackgroundColor("#bb0000"),M.maxTextLength=1,M.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h,l)),M.setTextColor("#FFFF00"),M.cursor.setColor("#08B600"),x.setBackgroundColor("rgba(0, 0, 0, 0)"),x.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(x,this.expressionKey),this.addComponent(M,this.answerKey),M.alignCenter(),x.setBoundingClientRect(void 0,M.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}getOperands(t){let e=1,n=1;if(e=Math.round(50*Math.random()),"*"===t.charPresentation)if(0===e)n=Math.round(50*Math.random());else{const t=Math.ceil(100/e);n=Math.floor(Math.random()*t)}else n=Math.round(50*Math.random());return{firstOperand:e,secondOperand:n}}answerIsRight(){return this.getChildComponent(this.answerKey).getText()===this.operationCharPresentation}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Назови цвет на английском:",o,i);const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=Math.ceil(s/2),d=Math.round(h/2),c=new w(l-d,5,a,h,"");this.colorName=q[Math.round(Math.random()*(q.length-1))],c.tabable=!0,c.editable=!0,c.drawBorder=!0,c.setBackgroundColor("#bb0000");const g=Math.ceil(u("x","monospace","16px"));c.maxTextLength=Math.floor(a/g)+1,c.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),c.setTextColor("#FFFF00"),c.cursor.setColor("#08B600"),this.answerKey="answer",this.addComponent(c,this.answerKey),c.alignCenter();const{top:p,height:C}=super.getOkButtonComponent().getBoundingClientRect();c.setBoundingClientRect(p+Math.round((C-h)/2)),this.taskColorKey="task";const f=new m(0,0,Math.floor(n/2),Math.floor(s/2));f.setBackgroundColor(this.colorName),this.addComponent(f,this.taskColorKey),f.alignCenter()}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){return this.colorName===this.getChildComponent(this.answerKey).getText().trim().toLowerCase()}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Вычисли площадь треугольника:",o,i);const r=new(V[Math.round(Math.random()*(V.length-1))]),a=o.images.textFieldImage,{naturalWidth:h,naturalHeight:l}=a;this.answer=r.answer;const d=r.getTaskText(),c=Math.ceil(s/2),g=Math.ceil(u(d,"monospace","16px")),m=16*Math.ceil(g/h),p=Math.round(l/2),C=new w(c-p-m-8,5,h,m,d),f=new w(c-p,5,h,l,"");f.editable=!0,f.tabable=!0,f.drawBorder=!0,f.setBackgroundColor("#bb0000"),f.maxTextLength=2,f.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h,l)),f.setTextColor("#FFFF00"),f.cursor.setColor("#08B600"),C.setBackgroundColor("rgba(0, 0, 0, 0)"),C.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(C,this.expressionKey),this.addComponent(f,this.answerKey),f.alignCenter(),C.setBoundingClientRect(void 0,f.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){return parseInt(this.getChildComponent(this.answerKey).getText(),10)===this.answer}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Произнесите слово:",o,i);const r=o.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=o.images.microButtonImage,{naturalWidth:d,naturalHeight:c}=l;this.word=W[Math.round(Math.random()*(W.length-1))].word;const g=`${this.word}: `,m=Math.ceil(s/2),p=Math.ceil((u(g,"monospace","16px")+1)/2),C=Math.round(h/2),x=new w(m-h-C,5,2*p,h,g),M=new w(m-C,5,a,h,""),I=new f(m-Math.round(c/2),n-10-d,d/2,c,"");I.setBackgroundImage(new y(l,0,0,d,c,d,c,0,0,d/2,c)),M.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),M.setTextColor("#FFFF00"),M.properties.cursor="auto",x.setBackgroundColor("rgba(0, 0, 0, 0)"),x.setTextColor("#ffffff");const E=Math.ceil(u("x","monospace","16px"));M.maxTextLength=Math.floor((n-10)/E),I.setBackgroundColor("#aaaaaa"),I.tabable=!0,I.drawBorder=!0,this.expressionKey="expression",this.answerKey="answer",this.microButtonKey="microbutton",this.addComponent(x,this.expressionKey),this.addComponent(M,this.answerKey),this.addComponent(I,this.microButtonKey),M.alignCenter(),I.alignCenter(),x.setBoundingClientRect(void 0,M.getBoundingClientRect().left),I.setBoundingClientRect(void 0,M.getBoundingClientRect().right+5),this.initSpeechRecognition(),this.setSpeechEventHandler()}initSpeechRecognition(){const t=new D;return t.lang="en-US",t.interimResults=!1,t.maxAlternatives=1,this.recognition=t,t}getDefaultComponent(){return this.getChildComponent(this.microButtonKey)}setSpeechEventHandler(){const t=this.getChildComponent(this.microButtonKey),e=this.getChildComponent(this.answerKey),n=this.recognition;let s=!1;const o=e=>{e.cancelBubble=!0,s?(n.stop(),s=!1,t.getBackgroundImage().setFrame(0)):(n.start(),s=!0,t.getBackgroundImage().setFrame(1))};t.addEventListener(i.KEYBOARD.KEY_PRESS,o),t.addEventListener(i.MOUSE.MOUSE_DOWN,o),n.onresult=(t=>{t.results.length>0&&e.setText(t.results[0][0].transcript)}),n.onspeechend=(()=>{n.stop(),s=!1,t.getBackgroundImage().setFrame(0)}),n.onerror=(e=>{console.log("Error occurred in recognition: "+e.error),t.getBackgroundImage().setFrame(0)})}answerIsRight(){return this.getChildComponent(this.answerKey).getText().toLowerCase()===this.word}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Напиши столицу этой страны:",o,i);const r=G[Math.round(Math.random()*(G.length-1))];this.answer=r.capital;const a=o.images.textFieldImage,{naturalWidth:h,naturalHeight:l}=a,d=`${r.country}: `,c=Math.ceil(s/2),g=Math.ceil((u(d,"monospace","16px")+1)/2),m=Math.round(l/2),p=new w(c-l-m,5,2*g,l,d),C=new w(c-m,5,h,l,"");C.editable=!0,C.tabable=!0,C.drawBorder=!0,C.setBackgroundColor("#bb0000");const f=Math.ceil(u("x","monospace","16px"));C.maxTextLength=Math.floor(h/f)+1,C.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h,l)),C.setTextColor("#FFFF00"),C.cursor.setColor("#08B600"),p.setBackgroundColor("rgba(0, 0, 0, 0)"),p.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(p,this.expressionKey),this.addComponent(C,this.answerKey),C.alignCenter(),p.setBoundingClientRect(void 0,C.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){return this.getChildComponent(this.answerKey).getText().trim().toLowerCase()===this.answer}},class extends Y{constructor(t=0,e=0,n=0,s=0,o={},i=null){super(t,e,n,s,"Напиши пропущеную букву:",o,i);const r=W[Math.round(Math.random()*(W.length-1))].word,a=Math.round(Math.random()*(r.length-1));this.answer=r[a];const h=o.images.textFieldImage,{naturalWidth:l,naturalHeight:d}=h,c=`${r.replace(r[a],"?")}: `,g=Math.ceil(s/2),m=Math.ceil((u(c,"monospace","16px")+1)/2),p=Math.round(d/2),C=new w(g-d-p,5,2*m,d,c),f=new w(g-p,5,l,d,"");f.editable=!0,f.tabable=!0,f.drawBorder=!0,f.setBackgroundColor("#bb0000"),f.maxTextLength=1,f.setBackgroundImage(new y(h,0,0,l,d,l,d,0,0,l,d)),f.setTextColor("#FFFF00"),f.cursor.setColor("#08B600"),C.setBackgroundColor("rgba(0, 0, 0, 0)"),C.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(C,this.expressionKey),this.addComponent(f,this.answerKey),f.alignCenter(),C.setBoundingClientRect(void 0,f.getBoundingClientRect().left)}getDefaultComponent(){return this.getChildComponent(this.answerKey)}answerIsRight(){return this.getChildComponent(this.answerKey).getText().toLowerCase()===this.answer}}];class Z{constructor(t,e){this.uiImages=t,this.nameTaskImages=e.slice(0,N.length),this.nameCountryByFlagTaskImages=e.slice(N.length,N.length+G.length)}createTask(t,e,n,s,o){const i={images:{textFieldImage:this.uiImages[1],modalWindowImage:this.uiImages[2],okButtonImage:this.uiImages[3],microButtonImage:this.uiImages[4]},additional:{}},r=J[Math.round(Math.random()*(J.length-1))];if(r===X){const t=Math.round(Math.random()*(this.nameTaskImages.length-1));i.additional.name={taskNames:N[t].names},i.images.nameImage=this.nameTaskImages[t]}if(r===Q){const t=Math.round(Math.random()*(this.nameCountryByFlagTaskImages.length-1));i.additional.nameCountryByFlag={answer:G[t].country.toLocaleLowerCase()},i.images.nameCountryByFlagImage=this.nameCountryByFlagTaskImages[t]}return new r(t,e,n,s,i,o)}}class tt{constructor(t,e,n){this.name=t,this.damage=e,this.graphicComponent=n}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}}class et extends tt{constructor(t,e,n,s,o){super(t,e,n),this.attackAnimations=s,this.moveIndex=0,this.explosionIndex=1,this.sound=o}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}arrowMove(t,e,n,s){const o=this.attackAnimations[this.moveIndex];let r=t-n+Math.floor(e/4);return o.animations.setAnimation("move",.924,1,(t,e,s,o,i)=>{i.backgroundImage.setFrame(o),i.setBoundingClientRect(void 0,n+r*o)}),new Promise(t=>{o.addEventListener(i.ANIMATION.ANIMATION_END,()=>{s.removeScene(o),t()})})}explode(t){const e=this.attackAnimations[this.explosionIndex];return e.animations.setAnimation("explode",.924,1,(t,e,n,s,o)=>{o.backgroundImage.setFrame(s)}),new Promise(n=>{e.addEventListener(i.ANIMATION.ANIMATION_END,()=>{t.removeScene(e),n()})})}async attack(t,e,n){const s=this.attackAnimations[this.moveIndex],o=this.attackAnimations[this.explosionIndex],{left:i,width:r}=t.getGraphicComponent().getBoundingClientRect(),{top:a,left:h,height:l}=e.getGraphicComponent().getBoundingClientRect();s.setBoundingClientRect(a+Math.floor(l/2),i),n.addScene(s),this.sound.play(),await this.arrowMove(h,r,i,n),o.setBoundingClientRect(a+Math.floor(l/2),h+Math.floor(r/4)),n.addScene(o),await this.explode(n)}}class nt extends tt{constructor(t,e,n,s,o){super(t,e,n),this.attackAnimations=s,this.implosionIndex=0,this.sound=o}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}async attack(t,e,n){const{top:s,left:o,width:r}=e.getGraphicComponent().getBoundingClientRect(),a=this.attackAnimations[this.implosionIndex];a.animations.setAnimation("implosion",.924,1,(t,e,n,s,o)=>{o.backgroundImage.setFrame(s)}),a.setBoundingClientRect(s,Math.floor(o+r/3)),this.sound.play(),n.addScene(a),await new Promise(t=>{a.addEventListener(i.ANIMATION.ANIMATION_END,e=>{n.removeScene(a),t()})})}}class st extends m{constructor(t,e,n,s,o=null){const{naturalWidth:i,naturalHeight:r}=s,a=i*n,h=r*n;super(t,e,a,h,o),s instanceof Image&&this.setBackgroundImage(new y(s,0,0,i,r,a,h,0,0,i,r)),this.properties.cursor="pointer"}}class ot{constructor(){this.assets={}}addMagicAssets(t,e,n){this.assets[n]={images:t,sound:e}}createMagicArrow(t,e=!1){if(!this.assets.magicArrow)return null;const n=this.assets.magicArrow.images,s=n[0],o=n[3];let i=n[1];e&&(i=n[2]);let{naturalWidth:r,naturalHeight:a}=i;const h=new y(i,0,0,r,a,r/14,a,0,0,r/14,a),l=new m(0,0,r/14,a);l.setBackgroundImage(h),({naturalWidth:r,naturalHeight:a}=o);const d=new y(o,0,0,r,a,r/14,a,0,0,r/14,a),c=new m(0,0,r/14,a);c.setBackgroundImage(d);const g=new st(10,10,2,s);return new et("Волшебная стрела",t,g,[l,c],this.assets.magicArrow.sound)}createImplosionArrow(t){if(!this.assets.implosion)return null;const e=this.assets.implosion.images,n=e[0],s=e[1];let{naturalWidth:o,naturalHeight:i}=s;const r=new y(s,0,0,o,i,o/19,i,0,0,o/19,i),a=new m(0,0,o/19,i);a.setBackgroundImage(r);const h=new st(10,10,2,n);return new nt("Взрыв",t,h,[a],this.assets.implosion.sound)}}class it extends m{constructor(t,e,n,s=null){const{naturalWidth:o,naturalHeight:i}=n;super(t,e,o,i,s),this.setBackgroundImage(new y(n,0,0,o,i,o,i,0,0,o,i))}}const rt=9,at=32,ht=37,lt=38,dt=39,ct=40;window.onload=(()=>{window.addEventListener("keydown",function(t){[rt,at,ht,lt,dt,ct].indexOf(t.keyCode)>-1&&t.preventDefault()},!1);new class{constructor(){this.initTextKeys(),this.loadManager=new k,this.storageManager=new K,this.canvas=new s,this.eventQueue=new o,this.ui=new r(this.canvas),this.uiComponents;const{width:t,height:e}=this.canvas.getSize();this.background=new m(0,0,t,e),this.init(),this.main=this.main.bind(this),this.main(0)}initTextKeys(){this.backgroundImgsKey="background",this.mainCharImgsKey="mainchar",this.headImgsKey="heads",this.bodyImgsKey="bodies",this.leftArmImgsKey="leftarms",this.rightArmImgsKey="rightarms",this.legImgsKey="legs",this.magicImgsKey="magics",this.uiImgsKey="ui",this.taskImgsKey="task",this.magicSoundKey="magics",this.statusBarKey="statusbar"}async init(){const t=await this.showLoadingScreen(),e=t.getLoadingProgressBar();this.initLoadingPath();const n=this.loadManager;await n.calculateTotalSize(),await n.load(t=>e.setValue(t)),this.canvas.removeScene(t),this.initBackgroundImage(n),this.setEventListenersToCanvas();const s=n.getImagesByName(this.headImgsKey),o=n.getImagesByName(this.bodyImgsKey),i=n.getImagesByName(this.leftArmImgsKey),r=n.getImagesByName(this.rightArmImgsKey),a=n.getImagesByName(this.legImgsKey);this.monsterFactory=new _(s,i,r,o,a),this.taskFactory=new Z(this.loadManager.getImagesByName(this.uiImgsKey),this.loadManager.getImagesByName(this.taskImgsKey)),this.magicFactory=new ot,this.magicFactory.addMagicAssets(n.getImagesByName(this.magicImgsKey).slice(0,4),n.getSoundByName(this.magicSoundKey)[0],"magicArrow"),this.magicFactory.addMagicAssets(n.getImagesByName(this.magicImgsKey).slice(4,6),n.getSoundByName(this.magicSoundKey)[1],"implosion"),this.canvas.getHtml().focus(),this.setUpUI()}initBackgroundImage(t){const e=t.getImagesByName(this.backgroundImgsKey)[0],{width:n,height:s}=this.background.getBoundingClientRect();this.background.setBackgroundImage(new y(e,0,0,e.naturalWidth,e.naturalHeight,n,s,0,0,e.naturalWidth,e.naturalHeight)),this.canvas.addScene(this.background)}setUpUI(t=""){const e=this.loadManager,{width:n,height:s}=this.canvas.getSize();this.uiComponents=new p(0,0,n,s);const o=e.getImagesByName(this.uiImgsKey).slice(5,8),r={back:o[0],left:o[1],right:o[2]},a=new B(s-150,0,n,150,r);a.setBackgroundColor("#00ff00");const h=e.getImagesByName(this.uiImgsKey)[8],l=new A(10,Math.ceil(n/2)-260-150,260,130,"",0,100,0,{back:h}),d=new A(10,Math.ceil(n/2)+150,260,130,"",0,100,0,{back:h});a.setPlayerInfoWindow(l),a.setEnemyInfoWindow(d),l.setBackgroundColor("#f4f142"),d.setBackgroundColor("#f4f142"),this.ui.add(this.uiComponents);const c=this.showNameEnter(t),g=()=>{const t=c.getInputUser();c.getOkButtonComponent().getBackgroundImage().setFrame(0),this.uiComponents.removeComponent(c),this.canvas.getHtml().style.cursor="auto",this.uiComponents.addComponent(a,this.statusBarKey),this.ui.changeSelectedElement(null),this.mainLogic(t)};c.addEventListener(i.KEYBOARD.KEY_PRESS,t=>{"Enter"===t.payload.key&&g()}),c.addButtonEventListener(i.MOUSE.MOUSE_UP,g),this.uiComponents.addComponent(c),this.canvas.addUI(this.ui),this.ui.changeSelectedElement(c.getInputUserComponent()),this.ui.updateTabTree(),c.getInputUserComponent().setCursorToEnd()}initLoadingPath(){const t=this.loadManager;return t.addUrl({image:[`${P.IMAGE.UI}/bardata.jpg`,`${P.IMAGE.UI}/textfield.jpg`,`${P.IMAGE.UI}/leather.jpg`,`${P.IMAGE.UI}/okbutton.jpg`,`${P.IMAGE.UI}/microbutton.jpg`,`${P.IMAGE.UI}/status.jpg`,`${P.IMAGE.UI}/statusleft.jpg`,`${P.IMAGE.UI}/statusright.jpg`,`${P.IMAGE.UI}/characterinfowindow.jpg`,`${P.IMAGE.UI}/spellsel.jpg`,`${P.IMAGE.UI}/table.jpg`,`${P.IMAGE.UI}/reloadbutton.jpg`]},{image:this.uiImgsKey}),t.addUrl({image:[`${P.IMAGE.BACKGROUND_IMAGES}/dungeon.jpg`]},{image:this.backgroundImgsKey}),t.addUrl({image:[`${P.IMAGE.MAIN_CHAR}/mainChar.png`]},{image:this.mainCharImgsKey}),t.addUrl({image:[`${P.IMAGE.HEAD_IMAGES}/head_1.png`,`${P.IMAGE.HEAD_IMAGES}/head_2.png`,`${P.IMAGE.HEAD_IMAGES}/head_3.png`,`${P.IMAGE.HEAD_IMAGES}/head_4.png`]},{image:this.headImgsKey}),t.addUrl({image:[`${P.IMAGE.BODY_IMAGES}/body_1.png`,`${P.IMAGE.BODY_IMAGES}/body_2.png`,`${P.IMAGE.BODY_IMAGES}/body_3.png`,`${P.IMAGE.BODY_IMAGES}/body_4.png`]},{image:this.bodyImgsKey}),t.addUrl({image:[`${P.IMAGE.LEFT_ARM_IMAGES}/arm_1.png`,`${P.IMAGE.LEFT_ARM_IMAGES}/arm_2.png`,`${P.IMAGE.LEFT_ARM_IMAGES}/arm_3.png`,`${P.IMAGE.LEFT_ARM_IMAGES}/arm_4.png`]},{image:this.leftArmImgsKey}),t.addUrl({image:[`${P.IMAGE.RIGHT_ARM_IMAGES}/arm_1.png`,`${P.IMAGE.RIGHT_ARM_IMAGES}/arm_2.png`,`${P.IMAGE.RIGHT_ARM_IMAGES}/arm_3.png`,`${P.IMAGE.RIGHT_ARM_IMAGES}/arm_4.png`]},{image:this.rightArmImgsKey}),t.addUrl({image:[`${P.IMAGE.LEG_IMAGES}/leg_1.png`,`${P.IMAGE.LEG_IMAGES}/leg_2.png`,`${P.IMAGE.LEG_IMAGES}/leg_3.png`,`${P.IMAGE.LEG_IMAGES}/leg_4.png`]},{image:this.legImgsKey}),t.addUrl({image:[`${P.IMAGE.MAGIC}/magicArrow/magicArrow.png`,`${P.IMAGE.MAGIC}/magicArrow/magicArrowMotionAnimation.png`,`${P.IMAGE.MAGIC}/magicArrow/magicArrowMotionAnimationReverse.png`,`${P.IMAGE.MAGIC}/magicArrow/magicArrowBlowAnimation.png`,`${P.IMAGE.MAGIC}/decay/decay.png`,`${P.IMAGE.MAGIC}/decay/decayBlow.png`],sound:[`${P.SOUND.MAGIC}/magicArrow/MAGICARW.mp3`,`${P.SOUND.MAGIC}/decay/DECAY.mp3`]},{image:this.magicImgsKey,sound:this.magicSoundKey}),t.addUrl({image:[...N.map(({image:t})=>t),...G.map(({flagImage:t})=>t)]},{image:this.taskImgsKey}),t}async mainLogic(t){const e=this.loadManager,n=this.taskFactory,s=this.magicFactory,o=this.uiComponents,{width:i,height:r}=this.canvas.getSize(),a=e.getImagesByName(this.uiImgsKey)[9],h=e.getImagesByName(this.mainCharImgsKey)[0],l=new it("1%","11%",h),{width:d,height:c}=l.getBoundingClientRect();l.setBoundingClientRect(Math.floor((r-150)/2-c/2),Math.floor(i/2-d-100),d,c);let g=null,u=-1;const m=new R(t,100,100,l);for(m.addMagic(s.createMagicArrow(40)),m.addMagic(s.createImplosionArrow(40)),this.setPlayer(m);m.isAlive();){null!==g&&g.isAlive()||(g=this.createMonster(s,i,r,5),u+=1);const t=new M(Math.ceil(r/2-55-75),Math.floor(i/2-214),428,132,m.getMagics(),{back:a});t.setBackgroundColor("#a0256b"),t.setOverflow("scroll"),o.addComponent(t),this.ui.updateTabTree(),this.ui.changeSelectedElement(t.getMagic(0).getGraphicComponent());const e=await t.selectMagic();if(null===e){console.log("magic selecting error");break}o.removeComponent(t);const h=n.createTask(Math.ceil(r/2)-172-50,Math.ceil((i-460)/2),460,344,o);h.setBackgroundColor("#ffff00"),o.addComponent(h),this.ui.updateTabTree(),this.ui.changeSelectedElement(h.getDefaultComponent());const l=await h.getResult();if(o.removeComponent(h),l&&await m.attack(g,e,this.canvas),g.isAlive()){const t=g.getMagics(),e=Math.round(Math.random()*(t.length-1));await g.attack(m,t[e],this.canvas)}}this.showResultTable(m,u)}createMonster(t,e,n,s){const o=this.monsterFactory.createMonster(e,n);return this.setEnemy(o),o.addMagic(t.createMagicArrow(s,!0)),o.addMagic(t.createImplosionArrow(s)),o}async showLoadingScreen(){const{width:t,height:e}=this.canvas.getSize(),n=new Image;n.src=`${P.IMAGE.UI}/bardata.jpg`,await T(n);const s=new E(0,0,t,e,n);return this.canvas.addScene(s),s}showNameEnter(t=""){const e=this.loadManager.getImagesByName(this.uiImgsKey)[1],{naturalWidth:n,naturalHeight:s}=e,o=this.loadManager.getImagesByName(this.uiImgsKey)[2],{naturalWidth:i,naturalHeight:r}=o,a=this.loadManager.getImagesByName(this.uiImgsKey)[3],{naturalWidth:h,naturalHeight:l}=a,{width:d,height:c}=this.canvas.getSize(),g=new x(0,0,i,r,"Введите свое имя:",this.uiComponents);g.setBackgroundColor("#3c76a7"),g.alignCenter(d,c),g.setBackgroundImage(new y(o,0,0,i,r,i,r,0,0,i,r));const m=g.getInputUserComponent();m.setBoundingClientRect(void 0,void 0,n,s),m.setBackgroundImage(new y(e,0,0,n,s,n,s,0,0,n,s));const p=Math.ceil(u("x","monospace",16));g.getInputUserComponent().maxTextLength=Math.floor(n/p)+1,g.getDescriptionComponent().setBackgroundColor("rgba(0, 0, 0, 0)"),g.getDescriptionComponent().setTextColor("#ffffff");const C=g.getOkButtonComponent();return C.setBoundingClientRect(r-19-l,i-19-h/2,h/2,l),C.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h/2,l)),g.getInputUserComponent().setText(t),g}showResultTable(t,e){const n=this.loadManager.getImagesByName(this.uiImgsKey)[10],s=this.loadManager.getImagesByName(this.uiImgsKey)[11],{naturalWidth:o,naturalHeight:i}=n,r=new y(n,0,0,o,i,o,i,0,0,o,i),{naturalWidth:a,naturalHeight:h}=s,l=new y(s,0,0,a,h,a/2,h,0,0,a/2,h);this.storageManager.saveResult(t.getName(),e);const d=this.storageManager.getSortedRecords(),c=new b(0,0,o,i-25,d.length+1,2,Math.floor(o/2),25);this.uiComponents.addComponent(c),c.alignCenter(),c.setBackgroundImage(r),c.getBackgroundImage().setSize(o,i),this.fillTable(c,d),c.setOverflow("scroll");const{top:g,right:u}=c.getBoundingClientRect(),m=new f(g,u+5,a/2,h,"");return m.setBackgroundImage(l),m.tabable=!0,m.drawBorder=!0,c.tabable=!0,c.drawBorder=!0,this.initTableHandlers(c,m),this.uiComponents.addComponent(m,"restart"),this.ui.changeSelectedElement(c),this.ui.updateTabTree(),c}initTableHandlers(t,e){const n=()=>{this.ui.dropUI();const t=this.player.getName();this.setPlayer(null),this.setEnemy(null),this.canvas.getHtml().style.cursor="auto",this.canvas.resetUI(),this.setUpUI(t)},s=()=>{e.isSelected&&e.getBackgroundImage().setFrame(1)},o=()=>{e.removeEventListener(i.MOUSE.MOUSE_ENTER,s)};e.addEventListener(i.MOUSE.MOUSE_DOWN,()=>{e.getBackgroundImage().setFrame(1)}),e.addEventListener(i.MOUSE.MOUSE_DOWN,()=>{e.getBackgroundImage().setFrame(1),e.addEventListener(i.MOUSE.MOUSE_ENTER,s)}),this.uiComponents.addEventListener(i.MOUSE.MOUSE_UP,o),e.onremove=(()=>{this.uiComponents.removeEventListener(i.MOUSE.MOUSE_UP,o)}),e.addEventListener(i.MOUSE.MOUSE_LEAVE,()=>{e.isSelected&&e.getBackgroundImage().setFrame(0)}),e.addEventListener(i.MOUSE.MOUSE_UP,()=>{e.getBackgroundImage().setFrame(0),n()}),e.addEventListener(i.KEYBOARD.KEY_PRESS,t=>{"Enter"===t.payload.key&&n()}),t.addEventListener(i.KEYBOARD.KEY_PRESS,t=>{"Enter"===t.payload.key&&n()})}fillTable(t,e){const n=new w(0,0,Math.ceil(u("Имя:","monospace",16)),16,"Имя:"),s=new w(0,0,Math.ceil(u("Убито монстров:","monospace",16)),16,"Убито монстров:");n.setTextColor("#ffffff"),s.setTextColor("#ffffff"),s.setFontSize(14),t.getTableComponent(0,0).addComponent(n),n.alignCenter(),t.getTableComponent(0,1).addComponent(s),s.alignCenter(),e.forEach((e,n)=>{const{name:s,monsterKilled:o}=e;void 0===s&&(s="");const i=new w(0,0,Math.ceil(u(s,"monospace",16)),16,s),r=new w(0,0,Math.ceil(u(o,"monospace",16)),16,String(o));i.setTextColor("#ffffff"),r.setTextColor("#ffffff"),t.getTableComponent(1+n,0).addComponent(i),i.alignCenter(),t.getTableComponent(1+n,1).addComponent(r),r.alignCenter()})}setPlayer(t){if(this.player&&this.canvas.removeScene(this.player.getGraphicComponent()),this.player=t,null===t)return;const e=this.uiComponents.getChildComponent(this.statusBarKey);e.setPlayerInfo(`${t.getName()}:`,t.getCurrentHP());const n=t.getGraphicComponent();null!==n&&this.canvas.addScene(n);const s=e.getPlayerInfoWindow().getHealthBar();t.addHPChangeListener(s.setValue.bind(s))}setEnemy(t){if(this.enemy&&this.canvas.removeScene(this.enemy.getGraphicComponent()),null===t)return;this.enemy=t;const e=this.uiComponents.getChildComponent(this.statusBarKey);e.setEnemyInfo(`${t.getName()}:`,t.getCurrentHP());const n=t.getGraphicComponent();null!==n&&this.canvas.addScene(n);const s=e.getEnemyInfoWindow().getHealthBar();t.addHPChangeListener(s.setValue.bind(s))}setEventListenersToCanvas(){const t=this.canvas.getHtml();t.addEventListener("mouseup",e=>{this.eventQueue.add({type:i.MOUSE.MOUSE_UP,subtype:"MOUSE",canvas:t,payload:{mouseCoord:{top:e.offsetY,left:e.offsetX}}})}),t.addEventListener("mousedown",e=>{this.eventQueue.add({type:i.MOUSE.MOUSE_DOWN,subtype:"MOUSE",canvas:t,payload:{mouseCoord:{top:e.offsetY,left:e.offsetX}}})}),t.addEventListener("keydown",t=>{this.eventQueue.add({type:i.KEYBOARD.KEY_DOWN,subtype:"KEYBOARD",payload:{key:t.key}})}),t.addEventListener("keypress",t=>{this.eventQueue.add({type:i.KEYBOARD.KEY_PRESS,subtype:"KEYBOARD",payload:{key:t.key}})}),t.addEventListener("mousemove",e=>{this.eventQueue.add({type:i.MOUSE.MOUSE_MOVE,subtype:"MOUSE",canvas:t,payload:{mouseCoord:{top:e.offsetY,left:e.offsetX}}})}),t.addEventListener("blur",()=>{this.ui.changeSelectedElement(null)})}main(t){requestAnimationFrame(this.main),void 0!==t&&(void 0===this.prevTime&&(this.prevTime=t),this.update(),this.render(t-this.prevTime),this.prevTime=t)}update(){for(;this.eventQueue.hasNext();){const t=this.eventQueue.getNext();this.ui.handleEvent(t)}}render(t){this.canvas.draw(t)}}})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
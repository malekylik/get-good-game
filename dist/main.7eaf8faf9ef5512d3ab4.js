!function(t){function e(e){for(var i,r,a=e[0],h=e[1],l=e[2],c=0,g=[];c<a.length;c++)r=a[c],s[r]&&g.push(s[r][0]),s[r]=0;for(i in h)Object.prototype.hasOwnProperty.call(h,i)&&(t[i]=h[i]);for(d&&d(e);g.length;)g.shift()();return o.push.apply(o,l||[]),n()}function n(){for(var t,e=0;e<o.length;e++){for(var n=o[e],i=!0,a=1;a<n.length;a++){var h=n[a];0!==s[h]&&(i=!1)}i&&(o.splice(e--,1),t=r(r.s=n[0]))}return t}var i={},s={1:0},o=[];function r(e){if(i[e])return i[e].exports;var n=i[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=i,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="";var a=window.webpackJsonp=window.webpackJsonp||[],h=a.push.bind(a);a.push=e,a=a.slice();for(var l=0;l<a.length;l++)e(a[l]);var d=h;o.push([1,0]),n()}([,function(t,e,n){"use strict";n.r(e);class i{constructor(t,e){this.htmlComponent=document.createElement("canvas"),this.htmlComponent.setAttribute("tabindex",0),this.context=this.htmlComponent.getContext("2d"),void 0===t&&(t=1366),void 0===e&&(e=635),this.setSize(t,e),document.body.appendChild(this.htmlComponent),this.scenes=[],this.ui=[]}getHtml(){return this.htmlComponent}getContext(){return this.context}setSize(t,e){this.width=t,this.height=e,this.htmlComponent.style.width=`${t}px`,this.htmlComponent.style.height=`${e}px`,this.context.canvas.width=t,this.context.canvas.height=e}clear(t="#000000"){this.context.fillStyle=t,this.context.fillRect(0,0,this.width,this.height)}addScene(t){this.scenes.push(t)}addUI(t){this.ui.push(t)}removeScene(t){const e=this.scenes.indexOf(t);return 0!=~e&&(this.scenes.splice(e,1),!0)}resetScenes(){this.scenes=[]}draw(t){this.clear();for(let e of this.scenes)e.draw(this.context,t);for(let e of this.ui)for(let n of e.uiComponents)n.draw(this.context,t)}}class s{constructor(){this.queue=[],this.queueIndex=0}add(t){this.queue.push(t)}getNext(){if(0===this.queue.length)return null;if(this.queueIndex<this.queue.length){const t=this.queue[this.queueIndex];return this.queueIndex+=1,t}return this.queueIndex=0,this.queue=[],null}hasNext(){const t=!!(this.queue.length-this.queueIndex);return t||0===this.queue.length||(this.queueIndex=0,this.queue=[]),t}remain(){return this.queue.length-this.queueIndex}}var o={MOUSE:{MOUSE_MOVE:"mousemove",MOUSE_ENTER:"mouseenter",MOUSE_LEAVE:"mouseleave",MOUSE_DOWN:"mousedown"},KEYBOARD:{KEY_PRESS:"keypress",KEY_DOWN:"keydown"},ANIMATION:{ANIMATION_END:"animationend"}};class r{constructor(){this.selected=null,this.hovered=null,this.uiComponents=[]}handleEvent(t){if(o[t.subtype]===o.MOUSE)for(let e of this.uiComponents){const n=e.checkForCollision({...t.payload.mouseCoord,width:1,height:1});let i=null;if(null!==n){let e=0,s=-1;n.forEach(({depth:t},n)=>{t>=e&&(e=t,s=n)}),i=n[s].o,t.target=i}else{const t=document.querySelector("canvas");"auto"!==t.style.cursor&&(t.style.cursor="auto")}this.hovered!==i&&(null!==this.hovered&&(this.hovered.handlers.handle({...t,type:o.MOUSE.MOUSE_LEAVE,target:this.hovered,relatedTarget:i}),this.hovered.setHovered(!1)),null!==i&&i.handlers.handle({...t,type:o.MOUSE.MOUSE_ENTER,target:i,relatedTarget:this.hovered}),this.hovered=i),t.type===o.MOUSE.MOUSE_DOWN&&this.selected!==i&&(this.selected&&(this.selected.isSelected=!1),this.selected=i,null!==i&&(i.isSelected=!0)),null!==i&&i.handlers.handle(t)}o[t.subtype]===o.KEYBOARD&&this.selected&&(t.target=this.selected,this.selected.handlers.handle(t))}add(t){this.uiComponents.push(t)}remove(t){const e=this.uiComponents.indexOf(t);~e&&this.uiComponents.splice(e,1)}}var a=n(0);class h{constructor(t,e,n,i){this.metric={top:t,left:e,width:n,height:i},this.blinkTime=500,this.elapsedTime=0,this.color="#000000"}setPosition(t,e){this.metric.top=t,this.metric.left=e}setColor(t="#000000"){this.color=t}draw(t,e){t.save(),this.elapsedTime<this.blinkTime&&(t.strokeStyle!==this.color&&(t.strokeStyle=this.color),t.beginPath(),t.moveTo(this.metric.left,this.metric.top),t.lineTo(this.metric.left,this.metric.top+this.metric.height),t.stroke()),this.elapsedTime+=e,this.elapsedTime>2*this.blinkTime&&(this.elapsedTime=0),t.restore()}}class l{isInside(t,e){Object.keys(t);return t.left<e.left+e.width&&t.left+t.width>e.left&&t.top<e.top+e.height&&t.height+t.top>e.top}}class d{constructor(t){this.animatedProperties={},Object(a.merge)(this.animatedProperties,t.properties),this.animations={}}setAnimation(t,e,n,i){this.animations[t]={animationFunc:i,timeCount:n,time:1e3*e,elapseTime:0,animationTimePast:0}}deleteAnimation(t){delete this.animations[t]}animate(t,e,n){const i=Object.keys(this.animations);for(let s=0;s<i.length;s++){const r=this.animations[i[s]];r.animationFunc(t,e.properties,this.animatedProperties,r.elapseTime/r.time,e),r.elapseTime+=n,r.elapseTime>r.time&&(r.elapseTime=0,r.animationTimePast+=1,this.animatedProperties={},e.hovered?Object(a.merge)(this.animatedProperties,e.hoverProperties):Object(a.merge)(this.animatedProperties,e.properties),r.animationTimePast>=r.timeCount&&(delete this.animations[i[s]],e.handlers.handle({target:e,type:o.ANIMATION.ANIMATION_END,subtype:"ANIMATION",payload:{animationName:i[s]}})))}}}class c{constructor(){this[o.MOUSE.MOUSE_MOVE]=[],this[o.MOUSE.MOUSE_DOWN]=[],this[o.KEYBOARD.KEY_PRESS]=[],this[o.KEYBOARD.KEY_DOWN]=[],this[o.ANIMATION.ANIMATION_END]=[]}handle(t){const e=this[t.type];if(e)for(let n of e)n(t)}addEventListener(t,e){this[t]&&this[t].push(e)}}const g=document.createElement("canvas").getContext("2d"),m=(t,e,n)=>(g.font=`${n}px ${e}`,g.measureText(t).width);class u{constructor(t=0,e=0,n=0,i=0,s=null,r){this.parentComponent=s,this.properties={},this.properties.drawBorder=!1,this.properties.overflow="visible",this.hovered=!1,this.properties.color={backgroundColor:"rgba(0,0,0,0)",borderColor:"#000000"},this.backgroundImage=null,this.properties.top=t,this.properties.left=e,this.properties.width=n,this.properties.height=i,this.properties.cursor="auto",this.collision=new l,this.animations=new d(this),this.handlers=new c,this.handlers.addEventListener(o.MOUSE.MOUSE_MOVE,this.handleHover),({top:t,left:e,width:n,height:i}=this.convertFromPercentageToPixel(t,e,n,i)),this.hoverProperties={},Object(a.merge)(this.hoverProperties,this.properties),this.setBoundingClientRect(t,e,n,i),this.scrollXOffset=0,this.scrollYOffset=0,null!==s?(s.addComponent(this,r),Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect)):(this.initialBoundingClientRect={},Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect))}addEventListener(t,e){this.handlers.addEventListener(t,e)}convertFromPercentageToPixel(t,e,n,i){const s=this.getParentComponent();let o,r;const a=/%/,h=Math.floor;return null===s?(o=window.innerWidth,r=window.innerHeight):({width:o,height:r}=s.getBoundingClientRect()),"string"==typeof t&&a.test(t)&&(t=h(parseFloat(t)/100*r)),"string"==typeof e&&a.test(e)&&(e=h(parseFloat(e)/100*o)),"string"==typeof n&&a.test(n)&&(n=h(parseFloat(n)/100*o)),"string"==typeof i&&a.test(i)&&(i=h(parseFloat(i)/100*r)),{top:t,left:e,width:n,height:i}}traverse(t){return t(this)}alignCenter(){const t=this.getParentComponent();let e=window.innerWidth,n=window.innerHeight;null!==t&&({width:e,height:n}=t.getBoundingClientRect());const{width:i,height:s}=this.getBoundingClientRect();let o=Math.round((n-s)/2),r=Math.round((e-i)/2);this.setBoundingClientRect(o,r,i,s)}setBackgroundImage(t=null){this.backgroundImage=t;const{width:e,height:n}=this.getBoundingClientRect();this.backgroundImage.setSize(e,n)}calculateTotalWidthComponent(t,e,n,i,s){const o=Object(a.get)(t,s);e[String(i)]=n+o}handleHover(t){const e=t.target,n=document.querySelector("canvas");n.style.cursor!==e.properties.cursor&&(n.style.cursor=e.properties.cursor),!0!==e.hovered&&(e.hovered=!0,Object(a.merge)(e.animations.animatedProperties,e.hoverProperties))}getBoundingClientRect(){return this.animations.animatedProperties.boundingClientRect}getClippedBoundingClientRect(){return this.animations.animatedProperties.clippedBoundingClientRect}setHovered(t){this.hovered!==t&&(this.hovered=t,t?Object(a.merge)(this.animations.animatedProperties,this.hoverProperties):Object(a.merge)(this.animations.animatedProperties,this.properties))}setBoundingClientRect(t,e,n,i){const s=this.getBoundingClientRect();let o,r,h,l;s&&({top:o,left:r,width:h,height:l}=s),void 0===t&&s&&"number"!=typeof t&&(t=o),void 0===e&&s&&"number"!=typeof e&&(e=r),void 0===n&&s&&"number"!=typeof n&&(n=h),void 0===i&&s&&"number"!=typeof i&&(i=l),this.properties.top=t,this.properties.left=e,this.properties.width=n,this.properties.height=i,this.properties.boundingClientRect={top:t,left:e,width:n,height:i,right:e+n,bottom:t+i},this.animations.animatedProperties.boundingClientRect={},this.hoverProperties.boundingClientRect={},Object(a.merge)(this.animations.animatedProperties.boundingClientRect,this.properties.boundingClientRect),Object(a.merge)(this.hoverProperties.boundingClientRect,this.properties.boundingClientRect)}setBoundingClippedClientRect(t=0,e=0,n=0,i=0){this.properties.clippedBoundingClientRect={top:t,left:e,width:n,height:i,right:e+n,bottom:t+i},this.animations.animatedProperties.clippedBoundingClientRect={},this.hoverProperties.clippedBoundingClientRect={},Object(a.merge)(this.animations.animatedProperties.clippedBoundingClientRect,this.properties.clippedBoundingClientRect),Object(a.merge)(this.hoverProperties.clippedBoundingClientRect,this.properties.clippedBoundingClientRect)}setBackgroundColor(t="#000000"){this.properties.color.backgroundColor=t,this.hoverProperties.color.backgroundColor=t,this.animations.animatedProperties.color.backgroundColor=t}setBorderColor(t="#000000"){this.properties.color.borderColor=t,this.hoverProperties.color.borderColor=t,this.animations.animatedProperties.color.borderColor=t}setParentComponent(t){this.parentComponent=t;let{top:e,left:n,width:i,height:s}=this.properties;({top:e,left:n,width:i,height:s}=this.convertFromPercentageToPixel(e,n,i,s)),this.setBoundingClientRect(e,n,i,s),this.initialBoundingClientRect={},Object(a.merge)(this.initialBoundingClientRect,this.properties.boundingClientRect)}setOverflow(t){if(this.properties.overflow=t,this.hoverProperties.overflow=t,this.animations.animatedProperties.overflow=t,"overflow"===t&&this.calculateClippedSize(),"scroll"===t){const t=this.calculateTotalHeightComponent(),e=this.calculateTotalWidthComponent(),{width:n,height:i}=this.getBoundingClientRect();t>i&&(this.scrollY=new C("vertical",t,this)),e>n&&(this.scrollX=new C("horizontal",e,this))}}calculateClippedSize(){this.traverse(t=>{const e=t.getParentComponent();let{top:n,right:i,bottom:s,left:o}=t.getBoundingClientRect();if(null!==e){const t=e.getBoundingClientRect();o<0&&(o=0),n<0&&(n=0),t.width<i&&(i=t.width),t.height<s&&(s=n>t.top?n:t.height)}t.setBoundingClippedClientRect(n,o,Math.abs(i-o),Math.abs(s-n))})}getParentComponent(){return this.parentComponent}getBackgroundImage(){return this.backgroundImage}getOverflow(){return this.properties.overflow}getAbsoluteCoord(){let{top:t,left:e}=this.getBoundingClientRect(),n=this.getParentComponent();for(;null!==n;){const{top:i,left:s}=n.getBoundingClientRect();t+=i,e+=s,n=n.getParentComponent()}return{top:t,left:e}}addComponent(t){}removeComponent(t){}setContextProperties(t,e){this.animations.animate(t,this,e)}paintComponent(t,e){let{top:n,left:i,width:s,height:o}=this.getBoundingClientRect(),r=this.animations.animatedProperties.color;if(this.drawBorder&&(t.strokeStyle=r.borderColor,t.strokeRect(i,n,s,o)),t.fillStyle=r.backgroundColor,t.fillRect(i,n,s,o),"scroll"===this.properties.overflow||"overflow"===this.properties.overflow){const e=new Path2D;e.rect(i,n,s,o),t.clip(e,"nonzero")}null!==this.backgroundImage&&this.backgroundImage.draw(t,i,n)}drawComponent(t,e){this.setContextProperties(t,e),this.paintComponent(t,e)}draw(t,e){t.save();const n=this.getParentComponent();if(null!==n&&t.translate(n.getBoundingClientRect().left,n.getBoundingClientRect().top),this.drawComponent(t,e),this.children)for(let n of this.children)n.component.draw(t,e);t.restore()}}class p extends u{constructor(t=0,e=0,n=0,i=0,s=null){super(t,e,n,i,s),this.children=[]}addComponent(t,e){t.setParentComponent(this),void 0!==e&&"string"==typeof e?this.children.push({component:t,name:e}):this.children.push({component:t,name:Object(a.uniqueId)("component ")})}removeComponent(t){const e=this.children.findIndex(({component:e})=>e===t);return 0!=~e&&(this.children.splice(e,1),!0)}getChildComponent(t){if("number"==typeof t&&this.children.length<t&&t>=0)return this.children[t].component;const e=this.children.find(e=>e.name===t);return e?e.component:null}dropChildren(){this.children=[]}traverse(t){if(!t(this)&&this.children)for(let e of this.children){const{component:n}=e;if(n.traverse)n.traverse(t);else{if(t(n))return}}}setScrollYOffer(t){this.scrollYOffset=t,this.children.forEach(({component:e})=>{if(e instanceof C)return;const{top:n}=e.initialBoundingClientRect;e.setBoundingClientRect(n+t);const i=this.getBackgroundImage();i&&i.setScrollYOffer(i.y+t)})}setScrollXOffer(t){this.scrollXOffset=t,this.children.forEach(({component:e})=>{if(e instanceof C)return;const{left:n}=e.initialBoundingClientRect;e.setBoundingClientRect(void 0,n+t);const i=this.getBackgroundImage();i&&i.setScrollXOffer(i.x+t)})}calculateTotalWidthComponent(){if(0===this.children.length)return null;let t=this.children[0].component;const{left:e,width:n}=t.getBoundingClientRect();let i=e+n;for(let t=1;t<this.children.length;t++){const e=this.children[t].component;let{left:n,width:s}=e.getBoundingClientRect();n+s>i&&(i=n+s)}return i}calculateTotalHeightComponent(){if(0===this.children.length)return null;let t=this.children[0].component;const{top:e,height:n}=t.getBoundingClientRect();let i=e+n;for(let t=1;t<this.children.length;t++){const e=this.children[t].component;let{top:n,height:s}=e.getBoundingClientRect();n+s>i&&(i=n+s)}return i}checkForCollision(t){const e=[];let n=1;return this.traverse(i=>{const{top:s,left:o,width:r,height:a}=i.getBoundingClientRect(),h={width:r,height:a};let l=0,d=0,c=1,g=i.getParentComponent();const m=[];for(;null!==g;){let{top:t,left:e}=g.getBoundingClientRect();l+=t,d+=e,c+=1,"scroll"!==g.getOverflow()&&"overflow"!==g.getOverflow()||m.push(g),g=g.getParentComponent()}if(l+=s,d+=o,h.top=l,h.left=d,0!==m.length)for(let t=0;t<m.length;t++){let{top:e,left:n,width:s,height:o}=m[t].getBoundingClientRect(),r=e,a=n,l=m[t].getParentComponent();for(;null!==l;){let{top:t,left:e}=l.getBoundingClientRect();r+=t,a+=e,l=l.getParentComponent()}const d={top:r,left:a,width:s,height:o};if(!i.collision.isInside(d,h))return null}this.collision.isInside(h,t)&&(e.push({o:i,depth:c}),c>n&&(n=c))}),0!==e.length?e:null}}class C extends p{constructor(t,e,n){let i,s=window.innerWidth,r=window.innerHeight;n&&({width:s,height:r}=n.getBoundingClientRect()),"vertical"===t?super(0,s-17,17,i=r,n):super(r-17,0,i=s,17,n),this.childWidth=e,this.setBackgroundColor("#F1F1F1");let a,h=String.fromCharCode(parseInt("25c4",16)),l=String.fromCharCode(parseInt("25ba",16));"vertical"===t&&(h=String.fromCharCode(parseInt("25b2",16)),l=String.fromCharCode(parseInt("25bc",16))),this.orientation=t;const d=new f(0,0,17,17,h,this);let c;a="vertical"===t?new f(i-34,0,17,17,l,this):new f(0,i-34,17,17,l,this),d.setBackgroundColor("#F1F1F1"),a.setBackgroundColor("#F1F1F1"),d.hoverProperties.color.backgroundColor="#D2D2D2",a.hoverProperties.color.backgroundColor="#D2D2D2";const g=i-51;let m,C,w;c="vertical"===t?new p(17,0,17,g,this):new p(0,17,g,17,this),C="vertical"===t?r/e:s/e,(m="vertical"===t?new u(0,2,13,Math.floor(C*g),c):new u(2,0,Math.floor(C*g),13,c)).setBackgroundColor("#C1C1C1"),this.scrollPos=0,this.scrollPosMax=g-Math.floor(C*g),this.partOfParent=C,w="vertical"===t?e-r:e-s;let y=0,x=10/this.scrollPosMax;d.addEventListener(o.MOUSE.MOUSE_DOWN,t=>{this.scrollPos+10<0?(this.scrollPos+=10,y+=x*w):(this.scrollPos=0,y=0),"vertical"===this.orientation?(m.setBoundingClientRect(-this.scrollPos),n.setScrollYOffer(y)):(m.setBoundingClientRect(void 0,-this.scrollPos),n.setScrollXOffer(y))}),a.addEventListener(o.MOUSE.MOUSE_DOWN,t=>{this.scrollPos-10>-this.scrollPosMax?(this.scrollPos-=10,y-=x*w):(this.scrollPos=-this.scrollPosMax,y=-w),"vertical"===this.orientation?(m.setBoundingClientRect(-this.scrollPos),n.setScrollYOffer(y)):(m.setBoundingClientRect(void 0,-this.scrollPos),n.setScrollXOffer(y))})}}class f extends u{constructor(t=0,e=0,n=0,i=0,s="",o=null){super(t,e,n,i,o);const r=m(s,"monospace","16px");this.label=new w(Math.floor(i/2)-8,Math.floor(n/2)-Math.floor(r/2),r+1,16,s),this.properties.cursor="pointer"}paintComponent(t,e){super.paintComponent(t,e);const{top:n,left:i}=this.getBoundingClientRect();t.save(),t.translate(i,n),this.label.draw(t,e),t.restore()}}class w extends u{constructor(t=0,e=0,n=0,i=0,s="",r=null){super(t,e,n,i,r),this.text=s,this.properties.color.textColor="#000000",this.properties.textProperties={textAlign:"left",textBaseline:"top",fontSize:16,fontFamily:"monospace"},this.maxTextLength="infinite",this.editable=!1,this.handlers.addEventListener(o.MOUSE.MOUSE_DOWN,this.handleMouseDown),this.handlers.addEventListener(o.KEYBOARD.KEY_PRESS,this.handleKeyPress),this.handlers.addEventListener(o.KEYBOARD.KEY_DOWN,this.handleKeyDown),this.linesMetric=[],this.textLines=[],this.cursorPosition={row:0,column:0,index:0},this.properties.cursor="text",Object(a.merge)(this.animations.animatedProperties,this.properties),Object(a.merge)(this.hoverProperties,this.properties),this.neededToRecalculate={needed:!0,row:0},this.cursor=new h(0,0,1,this.properties.textProperties.fontSize)}handleMouseDown(t){if(t.target.editable){const e=t.target;if(""===e.text)return e.cursor.setPosition(0,0),void(e.cursorPosition={row:0,column:0,index:0});let n=!1;const{top:i,left:s}=e.getBoundingClientRect();let o=i,r=s,a=e.getParentComponent();for(;a;){const{top:t,left:e}=a.getBoundingClientRect();o+=t,r+=e,a=a.getParentComponent()}const h={top:t.payload.mouseCoord.top,left:t.payload.mouseCoord.left,width:1,height:1};for(let t=0;t<e.glyphPosition.length&&!n;t++){const i=e.glyphPosition[t];for(let s=0;s<i.length&&!n;s++){const{top:a,left:l,width:d,height:c}=i[s];(n=e.collision.isInside({top:a+o,left:l+r,width:d,height:c},h))&&(e.cursor.setPosition(a,l),e.cursorPosition={row:t,column:s,index:e.textLines[t].startOfLine+s})}}if(!n)for(let t=0;t<e.linesMetric.length&&!n;t++){const{top:i,left:s,width:a,height:l}=e.linesMetric[t];(n=e.collision.isInside({top:i+o,left:s+r,width:e.getBoundingClientRect().width,height:l},h))&&(e.cursor.setPosition(i,a),e.cursorPosition={row:t,column:e.glyphPosition[t].length,index:e.textLines[t].startOfLine+e.glyphPosition[t].length})}if(!n){const{top:t,width:n}=e.linesMetric[e.linesMetric.length-1];e.cursor.setPosition(t,n),e.cursorPosition={row:e.linesMetric.length-1,column:e.glyphPosition[e.glyphPosition.length-1].length,index:e.textLines[e.glyphPosition.length-1].startOfLine+e.glyphPosition[e.glyphPosition.length-1].length}}}}handleKeyPress(t){if(t.target.editable){const e=t.target;if("number"==typeof e.maxTextLength&&e.text.length>=e.maxTextLength)return;if("Delete"===t.payload.key)return;if("Backspace"===t.payload.key)return;if("Enter"===t.payload.key)return;e.text=e.insertGlyph(t.payload.key,e.cursorPosition.index,e.text),e.cursorPosition.index+=1,e.neededToRecalculate.needed=!0}}handleKeyDown(t){if(t.target.editable){const e=t.target;let n=t.payload.key,i=e.cursorPosition.index;if("Delete"===n){if(i>=e.text.length)return;e.text=e.deleteGlyph(i,e.text)}else if("Backspace"===n){if(0===i)return;e.text=e.deleteGlyph(i-1,e.text),i-=1}e.cursorPosition.index=i,e.neededToRecalculate.needed=!0}}deleteGlyph(t,e){return e.slice(0,t)+e.slice(t+1)}insertGlyph(t,e,n){return e>=n.length?n+t:0===e?t+n:n.slice(0,e)+t+n.slice(e)}getText(){return this.text}setText(t=""){this.neededToRecalculate.needed=!0,this.text=t}setFontSize(t=16){this.properties.textProperties.fontSize=t}setTextColor(t="#000000"){this.properties.color.textColor=t}setFont(t){this.textProperties.font=t}setCursorPositionFrom2D(t,e){0!==this.glyphPosition.length?e>=this.glyphPosition[t].length?this.cursor.setPosition(this.glyphPosition[t][e-1].top,this.glyphPosition[t][e-1].left+this.glyphPosition[t][e-1].width):this.cursor.setPosition(this.glyphPosition[t][e].top,this.glyphPosition[t][e].left):this.cursor.setPosition(0,0)}setContextProperties(t,e){t.fillStyle=this.animations.animatedProperties.color.textColor,t.font=`${this.animations.animatedProperties.textProperties.fontSize}px ${this.animations.animatedProperties.textProperties.fontFamily}`,t.textAlign=this.animations.animatedProperties.textProperties.textAlign,t.textBaseline=this.animations.animatedProperties.textProperties.textBaseline,super.setContextProperties(t,e)}calculateLines(t){const e=this.getBoundingClientRect().width,n=this.animations.animatedProperties.textProperties.fontSize;this.textLines=[],this.linesMetric=[];let i=0,s=0,o=0,r="";this.text.split("").forEach((a,h)=>{if(s=t.measureText(a).width,i+s<e)return r+=a,void(i+=s);this.linesMetric.push({top:this.textLines.length*n,left:0,width:i,height:n}),this.textLines.push({startOfLine:o,line:r}),o+=r.length,s=t.measureText(a).width,i=s,r=a}),""!==r&&(this.linesMetric.push({top:this.textLines.length*n,left:0,width:t.measureText(r).width,height:n}),this.textLines.push({startOfLine:o,line:r})),this.calculateGlyphPosition(t)}calculateGlyphPosition(t){this.glyphPosition=[];const e=this.animations.animatedProperties.textProperties.fontSize;this.textLines.forEach(({line:n},i)=>{const s=[];let o=0;n.split("").forEach(n=>{const r=t.measureText(n).width;s.push({glyph:n,left:o,top:e*i,width:r,height:e}),o+=r}),this.glyphPosition.push(s)})}convertIndexTo2DPosition(t){let e=0,n=0;for(let n=0;n<this.textLines.length&&this.textLines[n].startOfLine<t;n++)e=n;return 0!==this.textLines.length?(n=t-this.textLines[e].startOfLine)>=this.glyphPosition[e].length&&(n=this.glyphPosition[e].length,t=this.textLines[e].startOfLine+n):(n=0,t=0),{row:e,column:n,index:t}}paintComponent(t,e){super.paintComponent(t,e);let{top:n,left:i}=this.getBoundingClientRect();if(t.save(),t.translate(i,n),this.neededToRecalculate.needed){this.calculateLines(t,this.text,this.neededToRecalculate.row);const{row:e,column:n,index:i}=this.convertIndexTo2DPosition(this.cursorPosition.index);this.cursorPosition.row=e,this.cursorPosition.column=n,this.cursorPosition.index=i,this.setCursorPositionFrom2D(e,n),this.neededToRecalculate.needed=!1}t.fillStyle=this.properties.color.textColor,t.font=`${this.properties.textProperties.fontSize}px ${this.properties.textProperties.fontFamily}`,this.textLines.forEach(({line:e},n)=>{t.fillText(e,0,this.linesMetric[n].top)}),this.isSelected&&this.editable&&this.cursor.draw(t,e),t.restore()}}class y{constructor(t,e=0,n=0,i,s,o,r,a=0,h=0,l,d){this.htmlComponent=t,this.x=e,this.y=n,void 0!==o&&(this.width=o),void 0!==r&&(this.height=r),void 0!==l&&(this.sWidth=l),void 0!==d&&(this.sHeight=d),this.naturalWidth=i,this.naturalHeight=s,this.offsetX=0,this.offsetY=0,this.scrollXOffset=0,this.scrollYOffset=0,this.sx=a,this.sy=h}setSize(t,e){this.width=t,this.height=e,this.recalculateFrames()}setScrollXOffer(t){this.scrollXOffset=t}setScrollYOffer(t){this.scrollYOffset=t}setDXPosition(t,e){this.x=t,this.y=e}recalculateFrames(){void 0!==this.naturalWidth?(this.xFramesCount=Math.floor((this.naturalWidth-this.sx)/this.sWidth),this.xFramesCount<1&&(this.xFramesCount=1)):this.xFramesCount=1,void 0!==this.naturalHeight?(this.yFramesCount=Math.floor((this.naturalHeight-this.sy)/this.sHeight),this.yFramesCount<1&&(this.yFramesCount=1)):this.yFramesCount=1,this.currentXFrame=1,this.currentYFrame=1}getHtml(){return this.htmlComponent}getXFramesCount(){return this.xFramesCount}getYFramesCount(){return this.yFramesCount}getFramesCount(){return this.xFramesCount*this.yFramesCount}getRemainXFramesCount(){return this.xFramesCount-this.currentXFrame}getRemainYFramesCount(){return this.yFramesCount-this.currentYFrame}getRemainFramesCount(){return(this.xFramesCount-this.currentXFrame)*(this.yFramesCount-this.currentYFrame)}setNextFrame(){this.currentXFrame+1>this.xFramesCount?this.currentYFrame+1>this.yFramesCount?(this.currentXFrame=1,this.currentYFrame=1):(this.currentYFrame+=1,this.currentXFrame=1):this.currentXFrame+=1,this.offsetX=this.sx+this.sWidth*(this.currentXFrame-1),this.offsetY=this.sy+this.sHeight*(this.currentYFrame-1)}setFrame(t){let e=this.getFramesCount(),n=Math.floor(e*t)+1;n>e&&(n=e);let i=this.getXFramesCount();n<i?(this.currentXFrame=n,this.currentYFrame=1):(this.currentYFrame=Math.ceil(n/i),this.currentXFrame=n-(this.currentYFrame-1)*i),this.offsetX=this.sx+this.sWidth*(this.currentXFrame-1),this.offsetY=this.sy+this.sHeight*(this.currentYFrame-1)}setOffset(t){let e=this.naturalWidth-this.sWidth,n=this.getYFramesCount()*e,i=Math.floor(n*t),s=Math.floor(i/this.sWidth);this.offsetY=this.sHeight*Math.floor(i/e),this.offsetX=i-s*this.sWidth}draw(t,e,n){let i=this.x,s=this.y;void 0!==e&&void 0!==n&&(i=e,s=n),void 0!==this.width?t.drawImage(this.htmlComponent,this.offsetX,this.offsetY,this.sWidth,this.sHeight,i+this.scrollXOffset,s+this.scrollYOffset,this.width,this.height):t.drawImage(this.htmlComponent,i+this.scrollXOffset,s+this.scrollYOffset)}}class x extends u{constructor(t=0,e=0,n=0,i=0,s="",o=null){super(t,e,n,i,o);const r=m(s,"monospace","16px");this.label=new w(Math.floor(i/2)-8,Math.floor(n/2)-Math.floor(r/2),r+1,16,s),this.properties.cursor="pointer"}paintComponent(t,e){super.paintComponent(t,e);const{top:n,left:i}=this.getBoundingClientRect();t.save(),t.translate(i,n),this.label.draw(t,e),t.restore()}}class I extends p{constructor(t=0,e=0,n=0,i=0,s,o=null){super(t,e,n,i,o);const r=Math.ceil(n/2),a=Math.ceil(i/2),h=Math.ceil((m(s,"monospace","16px")+1)/2),l=Math.ceil(.6*r),d=Math.ceil(m("x","monospace","16px")),c=new w(a-10-20-3,r-l,2*h,20,s),g=new w(a-10,r-l,2*l,20,""),u=new x(2*a-50-5,2*r-100-5,100,50,"");g.editable=!0,g.setBackgroundColor("#bb0000"),g.maxTextLength=Math.floor(l/d*2),c.setBackgroundColor("#00bbbb"),u.setBackgroundColor("#aaaaaa"),g.setTextColor("#FFFF00"),g.cursor.setColor("#08B600"),this.descriptionKey="description",this.userInputKey="userinput",this.buttonKey="button",this.addComponent(c,this.descriptionKey),this.addComponent(g,this.userInputKey),this.addComponent(u,this.buttonKey)}addButtonEventListener(t,e){this.getChildComponent(this.buttonKey).addEventListener(t,e)}getOkButtonComponent(){return this.getChildComponent(this.buttonKey)}getDescriptionComponent(){return this.getChildComponent(this.descriptionKey)}getInputUserComponent(){return this.getChildComponent(this.userInputKey)}getInputUser(){return this.getChildComponent(this.userInputKey).text}}class M extends p{constructor(t=0,e=0,n=0,i=0,s=[],o={},r=null){super(t,e,n,i,r),this.magics=[...s],this.totalWidth=0;const a=o.back,{naturalWidth:h,naturalHeight:l}=a,d=new y(a,0,0,h,l,h,l,0,0,h,l);this.setBackgroundImage(d),this.magics.forEach(t=>{const e=t.getGraphicComponent(),{width:n,height:i}=e.getBoundingClientRect(),s=t.getName(),o=Math.ceil(m(s,"monospace","16px"));e.setBoundingClientRect(0,0,n,i);const r=new p(5,this.totalWidth+5,n,i+3+16),a=new w(0,0,o,16,s);a.properties.cursor="auto",r.addComponent(e,"picture"),r.addComponent(a,"name"),a.alignCenter(),a.setBoundingClientRect(i+3),a.setTextColor("#E8D478"),this.addComponent(r,t.getName()),this.totalWidth+=5+n})}addMagicSelectingEventListener(t,e){this.getChildComponent(this.buttonKey),this.magics.forEach(n=>{n.getGraphicComponent().addEventListener(t,e)})}findMagicByGraphicComponent(t){const e=this.magics.find(e=>{const n=e.getGraphicComponent();return t===n});return e||null}selectMagic(){return new Promise(t=>{this.addMagicSelectingEventListener(o.MOUSE.MOUSE_DOWN,e=>{t(e.target.getParentComponent().getParentComponent().findMagicByGraphicComponent(e.target))})})}}class A extends p{constructor(t=0,e=0,n=0,i=0,s,o,r,a=null){super(t,e,n,i,a),this.minValue=s,this.maxValue=o,this.currentValue=r,this.oneInPixel=(n-2)/(o-s);const h=new u(1,1,this.oneInPixel*(r-s),i-2);h.setBackgroundColor("#aa0000"),this.setBackgroundColor("#ffffff"),this.barComponentKey="bar";const l=`${r}/${o}`,d=Math.ceil(m(l,"monospace",16))+1,c=new w(0,0,d,16,l);this.labelComponentKey="label",this.addComponent(h,this.barComponentKey),this.addComponent(c,this.labelComponentKey),c.alignCenter()}getTextComponent(){return this.getChildComponent(this.labelComponentKey)}getBarComponent(){return this.getChildComponent(this.barComponentKey)}setBarColor(t="#aa0000"){this.getChildComponent(this.barComponentKey).setBackgroundColor(t)}setValue(t){this.currentValue=t;const e=this.getChildComponent(this.barComponentKey),{top:n,left:i,height:s}=e.getBoundingClientRect();e.setBoundingClientRect(n,i,Math.floor(t*this.oneInPixel),s);const o=`${t}/${this.maxValue}`,r=this.getChildComponent(this.labelComponentKey);r.setText(o);const{height:a}=r.getBoundingClientRect(),h=Math.ceil(m(o,"monospace",16))+1;r.setBoundingClientRect(0,0,h,a),r.alignCenter()}}class B extends p{constructor(t=0,e=0,n=0,i=0,s={},o=null){super(t,e,n,i,o),this.enemyInfoWindowKey="enemy",this.playerInfoWindowKey="player";const r=s.back,a=s.left,h=s.right,{naturalWidth:l,naturalHeight:d}=r,{naturalWidth:c,naturalHeight:g}=a,{naturalWidth:m,naturalHeight:p}=h,C=new y(r,0,0,l,d,l,d,0,0,l,d),f=new y(a,0,0,c,g,c,g,0,0,c,g),w=new y(h,0,0,m,p,m,p,0,0,m,p);let x=0;for(;x<n;){const t=new u(0,x,l,d);t.setBackgroundImage(C),this.addComponent(t),x+=l}const I=new u(0,0,c,g);I.setBackgroundImage(f),this.addComponent(I);const M=new u(0,n-m,m,p);M.setBackgroundImage(w),this.addComponent(M)}getPlayerInfoWindow(){return this.getChildComponent(this.playerInfoWindowKey)}getEnemyInfoWindow(){return this.getChildComponent(this.enemyInfoWindowKey)}setEnemyInfoWindow(t){const e=this.getChildComponent(this.enemyInfoWindowKey);e&&this.removeComponent(e),this.addComponent(t,this.enemyInfoWindowKey)}setPlayerInfoWindow(t){const e=this.getChildComponent(this.playerInfoWindowKey);e&&this.removeComponent(e),this.addComponent(t,this.playerInfoWindowKey)}setEnemyInfo(t,e){const n=this.getChildComponent(this.enemyInfoWindowKey);n.getChildComponent(n.healthBarKey).setValue(e);const i=n.getChildComponent(n.nameLabelKey);i.setText(t);const{top:s,left:o,height:r}=i.getBoundingClientRect(),a=Math.ceil(m(t,i.properties.textProperties.fontFamily,i.properties.textProperties.fontSize));i.setBoundingClientRect(s,o,a,r)}setPlayerInfo(t,e){const n=this.getChildComponent(this.playerInfoWindowKey);n.getChildComponent(n.healthBarKey).setValue(e);const i=n.getChildComponent(n.nameLabelKey);i.setText(t);const{top:s,left:o,height:r}=i.getBoundingClientRect(),a=Math.ceil(m(t,i.properties.textProperties.fontFamily,i.properties.textProperties.fontSize));i.setBoundingClientRect(s,o,a,r)}}class E extends p{constructor(t=0,e=0,n=0,i=0,s="",o,r,a,h={},l=null){super(t,e,n,i,l);const d=Math.ceil(m(`${s}:`,"monospace",16))+1,c=new w(15,10,d+1,16,`${s}:`),g=new A(34,10,n-24,25,o,r,a);this.nameLabelKey="namelabel",this.healthBarKey="healtbar",c.setTextColor("#ffffff");const{naturalWidth:u,naturalHeight:p}=h.back,C=new y(h.back,0,0,u,p,u,p,0,0,u,p);this.addComponent(c,this.nameLabelKey),this.addComponent(g,this.healthBarKey),this.setBackgroundImage(C)}getHealthBar(){return this.getChildComponent(this.healthBarKey)}}class b extends p{constructor(t=0,e=0,n=0,i=0,s=0,o=0,r=0,a=0,h=null){super(t,e,n,i,h),this.columnCount=o,this.rowCount=s;let l=0;for(let t=0;t<s;t++){let e=0;for(let n=0;n<o;n++){const i=new p(l,e,r,a);this.addComponent(i,String(t*o+n)),i.setBackgroundColor("rgba(0, 0, 0, 0)"),e+=r}l+=a}}getTableComponent(t=0,e=0){const n=this.getChildComponent(String(t*this.columnCount+e));return n||null}}const v=t=>new Promise(e=>{const n=new XMLHttpRequest;n.open("HEAD",t,!0),n.onreadystatechange=(()=>{n.readyState==n.DONE&&e(n.getResponseHeader("Content-Length"))}),n.send()}),P=(t,e,n)=>new Promise(i=>{const s=new XMLHttpRequest;s.open("GET",t,!0),s.responseType="arraybuffer";let o=-1;s.onload=(t=>{const e=new Blob([s.response]);i(window.URL.createObjectURL(e))}),s.onprogress=(({loaded:t})=>{t!==o&&(o=t,e(t,n))}),s.send()}),k=t=>new Promise(e=>{t.onload=(t=>{e(t.srcElement)})});class S{constructor(){this.totalSize=0,this.currentLoadedSize=0,this.imageUrl=[],this.loadedImages=[],this.soundUrl=[],this.loadedSound=[]}addUrl(t,e){const n=t.sound,i=t.image,s=e.sound,o=e.image;let r=-1;i&&(~(r=this.imageUrl.findIndex(({name:t})=>t===o))?this.imageUrl[r].urls=[...this.imageUrl[r].urls,...i]:this.imageUrl.push({urls:[...i],name:o})),n&&(~(r=this.soundUrl.findIndex(({name:t})=>t===s))?this.soundUrl[r].urls=[...this.soundUrl[r].urls,...n]:this.soundUrl.push({urls:[...n],name:s}))}async calculateTotalSize(){const t=[];let e=0;this.imageUrl.forEach(({urls:n})=>{n.forEach(n=>{t.push(v(n)),e+=1})}),this.soundUrl.forEach(({urls:e})=>{e.forEach(e=>{t.push(v(e))})});const n=await Promise.all(t);return this.totalSize=n.reduce((t,e)=>t+parseInt(e,10),0),this.imagesSize=n.slice(0,e),this.soundSize=n.slice(e),this.totalSize}async load(t){const e=[],n={},i=(e,i)=>{n[i]=e;let s=0;const o=Object.keys(n);for(let t=0;t<o.length;t++)s+=n[o[t]];this.currentLoadedSize=s;const r=Math.round(this.currentLoadedSize/this.totalSize*100);t&&t(r)};let s=0,o=0;this.imageUrl.forEach(({urls:t})=>{t.forEach(t=>{e.push(P(t,i,o)),o+=1,s+=1})}),this.soundUrl.forEach(({urls:t})=>{t.forEach(t=>{e.push(P(t,i,o)),o+=1})});const r=await Promise.all(e),a=r.slice(0,s).map(t=>{const e=new Image;return e.src=t,k(e)}),h=r.slice(s).map(t=>{const e=new Audio;return e.src=t,e}),l=[...a];let d=await Promise.all(l);d=[...d,...h];const c={images:[],sound:[]};let g=0;for(let t=0;t<this.imageUrl.length;t++){const e=this.imageUrl[t].urls.length,n=this.imageUrl[t].name;c.images.push({images:d.slice(g,g+e),name:n}),g+=e}for(let t=0;t<this.soundUrl.length;t++){const e=this.soundUrl[t].urls.length,n=this.soundUrl[t].name;c.sound.push({sound:d.slice(g,g+e),name:n}),g+=e}return this.imageUrl=[],this.soundUrl=[],this.loaded={...this.loadedImages,...c},c}getImagesByName(t){const e=this.loaded.images.findIndex(({name:e})=>e===t);return~e?this.loaded.images[e].images:null}getSoundByName(t){const e=this.loaded.sound.findIndex(({name:e})=>e===t);return~e?this.loaded.sound[e].sound:null}}class R{constructor(){this.keys=[],this.records=[];for(let t=0;t<localStorage.length;t++){const e=localStorage.key(t);e.match(/malekylik-game/)&&this.keys.push(e)}this.parseRecords()}saveResult(t,e){this.records.push({name:t,monsterKilled:e}),this.records.sort((t,e)=>t.time-e.time);for(let t=0;t<this.records.length&&t<10;t++){const{name:e,monsterKilled:n}=this.records[t],i=`name=${e};monsterKilled=${n};`;localStorage.setItem("malekylik-game="+t,i)}this.records.length>10&&(this.records=this.records.slice(0,10))}parseRecords(){for(let t=0;t<this.keys.length;t++){const e=localStorage.getItem(this.keys[t]).split(";"),n={name:e[0].split("=")[1],monsterKilled:e[1].split("=")[1]};this.records.push(n)}}getSortedRecords(){return this.records.sort((t,e)=>e.monsterKilled-t.monsterKilled),this.records}}var O={IMAGE:{HEAD_IMAGES:"./assets/images/monsters/heads",BODY_IMAGES:"./assets/images/monsters/bodies",LEFT_ARM_IMAGES:"./assets/images/monsters/arms/left",RIGHT_ARM_IMAGES:"./assets/images/monsters/arms/right",LEG_IMAGES:"./assets/images/monsters/legs",BACKGROUND_IMAGES:"./assets/images",MAIN_CHAR:"./assets/images",MAGIC:"./assets/images/magic",UI:"./assets/images/ui",TASK:{NAME:"./assets/images/task/name"}},SOUND:{MAGIC:"./assets/sound/magic"}};class K extends p{constructor(t,e,n,i,s,o,r,a=null){const{naturalWidth:h,naturalHeight:l}=n,{naturalWidth:d,naturalHeight:c}=o,{naturalWidth:g,naturalHeight:m}=i,{naturalWidth:p,naturalHeight:C}=s,{naturalWidth:f,naturalHeight:w}=r,x=g+d+p,I=l+c+w-30;super(t,e,x,I,a);const M=new u(I-w-c,x/2-d/2,d,c);M.setBackgroundImage(new y(o,0,0,d,c,d,c,0,0,d,c));const A=new u(I-w-c-l+30,x/2-h/2-15,h,l);A.setBackgroundImage(new y(n,0,0,h,l,h,l,0,0,h,l));const B=new u(I-w,x/2-f/2-13,f,w);B.setBackgroundImage(new y(r,0,0,f,w,f,w,0,0,f,w));const E=new u(I-w-c+45,x/2-15,g,m);E.setBackgroundImage(new y(i,0,0,g,m,g,m,0,0,g,m));const b=new u(I-w-c+40,x/2-89,p,C);b.setBackgroundImage(new y(s,0,0,p,C,p,C,0,0,p,C)),this.addComponent(M,"body"),this.addComponent(A,"head"),this.addComponent(B,"leg"),this.addComponent(E,"leftarm"),this.addComponent(b,"rightarm")}}class T{constructor(t,e,n,i=null){this.name=t,this.currentHP=n,this.maxHP=e,this.graphicComponent=i,this.magics=[],this.hpChangeListeners=[]}getGraphicComponent(){return this.graphicComponent}async attack(t,e,n){e?(await e.attack(this,t,n),t.takeAttack(e.damage)):t.takeAttack(5)}takeAttack(t){return this.currentHP-=t,this.currentHP<0?(this.currentHP=0,!0):(this.hpChangeListeners.forEach(t=>{t(this.currentHP)}),!1)}addMagic(t){this.magics.push(t)}getMagics(){return this.magics}getName(){return this.name}getCurrentHP(){return this.currentHP}getMaxHP(){return this.maxHP}isAlive(){return this.currentHP>0}addHPChangeListener(t){this.hpChangeListeners.push(t)}}const F=["Ужасный","Злобный","Сопливый"],G=["Огр","Гном","Гоблин"],N=["Том","Макс","Дима"];class U{constructor(t,e,n,i,s){this.headImgs=[...t],this.leftArmImgs=[...e],this.rightArmImgs=[...n],this.bodyImgs=[...i],this.legImgs=[...s]}createMonster(t=0,e=0){const n=Math.random,i=Math.round,s=i(n()*(this.headImgs.length-1)),o=i(n()*(this.leftArmImgs.length-1)),r=i(n()*(this.rightArmImgs.length-1)),a=i(n()*(this.bodyImgs.length-1)),h=i(n()*(this.legImgs.length-1)),l=new K(t,e,this.headImgs[s],this.leftArmImgs[o],this.rightArmImgs[r],this.bodyImgs[a],this.legImgs[h]),{width:d,height:c}=l.getBoundingClientRect();l.setBoundingClientRect(Math.floor((window.innerHeight-150)/2-c/2),Math.floor(window.innerWidth/2+100),d,c);const g=F[i(n()*(F.length-1))],m=G[i(n()*(G.length-1))],u=N[i(n()*(N.length-1))];return new T(`${g} ${m} ${u}`,100,100,l)}}var L=[{names:["alligator","crocodile"],image:`${O.IMAGE.TASK.NAME}/alligator.jpg`},{names:["bear"],image:`${O.IMAGE.TASK.NAME}/bear.jpg`},{names:["crow"],image:`${O.IMAGE.TASK.NAME}/crow.jpg`},{names:["dolphin"],image:`${O.IMAGE.TASK.NAME}/dolphin.jpg`},{names:["fox"],image:`${O.IMAGE.TASK.NAME}/fox.jpg`},{names:["tiger"],image:`${O.IMAGE.TASK.NAME}/tiger.jpg`},{names:["lion","lev","lew"],image:`${O.IMAGE.TASK.NAME}/lion.jpg`},{names:["cat","male cat"],image:`${O.IMAGE.TASK.NAME}/cat.jpg`},{names:["dog"],image:`${O.IMAGE.TASK.NAME}/dog.jpg`},{names:["horse"],image:`${O.IMAGE.TASK.NAME}/horse.jpg`},{names:["zebra"],image:`${O.IMAGE.TASK.NAME}/zebra.jpg`}];class W extends p{constructor(t=0,e=0,n=0,i=0,s="",o={},r=null){super(t,e,n,i,r);const a=Math.ceil(n/2),h=Math.ceil(i/2);let l=Math.ceil((m(s,"monospace","16px")+1)/2);l>a-20&&(l=a-20);const d=new w(10,a-l,2*l,30,s),c=new x(2*h-50-5,2*a-100-5,100,50,"");d.setBackgroundColor("#00bbbb"),c.setBackgroundColor("#aaaaaa"),this.descriptionKey="description",this.buttonKey="button",this.addComponent(d,this.descriptionKey),this.addComponent(c,this.buttonKey),d.setBackgroundColor("rgba(0, 0, 0, 0)"),d.setTextColor("#ffffff");const g=o.images.modalWindowImage,{naturalWidth:u,naturalHeight:p}=g,C=o.images.okButtonImage,{naturalWidth:f,naturalHeight:I}=C;this.setBackgroundImage(new y(g,0,0,u,p,u,p,0,0,u,p)),c.setBoundingClientRect(p-19-I,u-19-f/2,f/2,I),c.setBackgroundImage(new y(C,0,0,f,I,f,I,0,0,f/2,I))}getOkButtonComponent(){return this.getChildComponent(this.buttonKey)}getTaskDescriptionComponent(){return this.getChildComponent(this.descriptionKey)}addButtonEventListener(t,e){this.getChildComponent(this.buttonKey).addEventListener(t,e)}answerIsRight(){return!1}getResult(){return new Promise(t=>{this.addButtonEventListener(o.MOUSE.MOUSE_DOWN,()=>{t(this.answerIsRight())})})}}const H=[{charPresentation:"+",perform:(t,e)=>t+e},{charPresentation:"-",perform:(t,e)=>t-e},{charPresentation:"x",perform:(t,e)=>t*e}];var _=[{word:"age",translate:["возраст","век","эпоха","период","стареть"]},{word:"appear",translate:["появляться","казаться","предстать"]},{word:"artist",translate:["художник","артист"]},{word:"autumn",translate:["осень","осенний"]},{word:"bay",translate:["залив","бухта","отсек","губа"]},{word:"beak",translate:["клюв"]},{word:"bloom",translate:["цветение","расцвет","цвести","расцвести"]},{word:"bumpy",translate:["ухабистый","неровный"]},{word:"burst",translate:["взрыв","вспышка","разрыв","лопнуть","разрывать"]},{word:"buzz",translate:["гудеть","жужжать","гул","жужжание","слухи"]},{word:"care",translate:["забота","уход","заботиться","ухаживать"]},{word:"check",translate:["проверка","чек","контроль","проверять","контролировать"]},{word:"chilly",translate:["холодно","сухо","зябко","холодный","прохладный","зябкий","промозглый"]},{word:"comfort",translate:["комфорт","удобства","уют","утешить","утешать"]},{word:"community",translate:["сообщество","община","общество","общность"]},{word:"country",translate:["страна","местность","загородный"]},{word:"covered",translate:["крытый","покрытый"]},{word:"cradle",translate:["колыбель","люлька","гнездо"]},{word:"dangle",translate:["мотаться","болтаться","свисать","качаться"]},{word:"decision",translate:["решение"]},{word:"delicious",translate:["вкусно","восхитительный"]},{word:"dentist",translate:["дантист","зубной врач"]},{word:"dew",translate:["роса"]},{word:"disappear",translate:["исчезать","пропадать"]},{word:"dusty",translate:["пыльный"]},{word:"edge",translate:["край","преимущество","кромка"]},{word:"farmer",translate:["фермер","колхозник"]},{word:"fear",translate:["страх","боязнь","опасение","бояться","опасаться"]},{word:"firefly",translate:["светляк","светлячок"]},{word:"fix",translate:["фиксировать","исправлять","устанавливать","чинить"]},{word:"fluffy",translate:["пушистый"]},{word:"follow",translate:["следовать","следить","придерживаться","идти"]},{word:"gallop",translate:["галопом","галоп","скачка","проскакать","скакать галопом","галопировать"]},{word:"gentle",translate:["нежный","мягкий","вежливый"]},{word:"glance",translate:["взгляд","зрение","вид","зрелище","прицел","увидеть"]},{word:"glossy",translate:["глянцевый","блестящий"]},{word:"glow",translate:["пылать","светиться","пылать","свечение","жар","румянец"]},{word:"goal",translate:["цель","гол","задача"]},{word:"half",translate:["половина","часть","наполовину"]},{word:"healthy",translate:["здоровый","полезный"]},{word:"hoof",translate:["копыто","нога"]},{word:"include",translate:["включать"]},{word:"invitation",translate:["приглашение"]},{word:"knight",translate:["рыцарь"]},{word:"lazy",translate:["ленивый"]},{word:"leaf",translate:["лист","листовой"]},{word:"leak",translate:["утечка","течь","просачиваться"]},{word:"library",translate:["библиотека","библиотечный"]},{word:"market",translate:["рынок","базар","продавать","рыночный"]},{word:"melt",translate:["таять","плавиться","растопить","плавиться","плавить"]},{word:"miserable",translate:["несчастный","жалкий","убогий"]},{word:"month",translate:["месяц"]},{word:"muddy",translate:["мутить","грязный","мутный","тусклый"]},{word:"museum",translate:["музей"]},{word:"note",translate:["заметка","внимание","примечание","записка"]},{word:"pair",translate:["пара","чета","парный"]},{word:"patient",translate:["пациент","терпеливый","пациент","больной"]},{word:"peaceful",translate:["мирное","спокойный","мирный"]},{word:"peck",translate:["клевать","долбить","клевок"]},{word:"pilot",translate:["пилот","летчик","пилотировать"]},{word:"plan",translate:["план","схема","проект","замысел","планировать"]},{word:"pointy",translate:["заостренный"]},{word:"pond",translate:["пруд","водоем","бассейн"]},{word:"president",translate:["президент","председатель"]},{word:"protect",translate:["защищать","охранять","беречь","оберегать"]},{word:"race",translate:["раса","гонки","гонка","род"]},{word:"reach",translate:["достичь","охват","досягаемость","достигать","связаться","доходить"]},{word:"relax",translate:["расслабиться","отдыхать","расслабляться"]},{word:"rotten",translate:["гнилой","прогнивший","тухлый"]},{word:"round",translate:["круглый","раунд","тур","круг","вокруг","кругом","округлять"]},{word:"row",translate:["ряд","грести"]},{word:"sail",translate:["паруса","парус","плыть","плавать"]},{word:"scene",translate:["сцена","картина","эпизод","место действия"]},{word:"scrub",translate:["скраб","кустарник","скрести","тереть"]},{word:"shade",translate:["тень","оттенок"]},{word:"ship",translate:["корабль","судно"]},{word:"shore",translate:["берег","побережье","береговой","подпирать"]},{word:"silky",translate:["шелковистый","шелковый"]},{word:"slide",translate:["горка","слайд","скольжение","ползун","скользить"]},{word:"sniff",translate:["сопение","вдох","нюхать","вдыхать","сопеть"]},{word:"soapy",translate:["мыльный","мылкий"]},{word:"sparkle",translate:["искриться","сверкать","блистать","блестеть","блеск","сияние","искорка","сверкание"]},{word:"spotted",translate:["пятнистый","запятнанный"]},{word:"spring",translate:["весна","пружина","рессора","источник","родник","весенний","возникать"]},{word:"stare",translate:["глазеть","пялиться","поглазеть","пристальный взгляд"]},{word:"summer",translate:["лето"]},{word:"supplies",translate:["предметы снабжения","запас","припасы"]},{word:"tangled",translate:["запутанный"]},{word:"tent",translate:["палатка","навес"]},{word:"tomorrow",translate:["завтра","завтрашний день","завтрашний"]},{word:"trade",translate:["сделка","торговля","торговать","торговый"]},{word:"warm",translate:["тепло","теплый","горячий","жаркий","нагреваться","согревать","греть"]},{word:"wave",translate:["волна","волновой","махать","махнуть","размахивать","развеваться"]},{word:"week",translate:["неделю","неделя"]},{word:"wiggle",translate:["покачивание","покачиваться","извиваться","покачивать","ерзать","покачивание"]},{word:"winter",translate:["зима","зимний"]},{word:"wish",translate:["желание","пожелание","желать"]},{word:"yesterday",translate:["вчера","вчерашний день"]},{word:"young",translate:["молодой","юный","молодежь"]}];const $=window.SpeechRecognition||window.webkitSpeechRecognition;class D extends u{constructor(t=0,e=0,n=0,i=0,s,r=null){super(t,e,n,i,r),this.properties.cursor="pointer";const a=t+i,h=e+n;this.cellCount=s,this.originCoord={x:e+20,y:a-20},this.xAxisCoord={x:h-10,y:this.originCoord.y},this.yAxisCoord={x:this.originCoord.x,y:t+10},this.lastCellXAxisCoord={x:this.xAxisCoord.x-20,y:this.xAxisCoord.y},this.lastCellYAxisCoord={x:this.yAxisCoord.x,y:this.yAxisCoord.y+20},this.xAxisArrow={leftPoint:{x:this.xAxisCoord.x-6,y:this.xAxisCoord.y-8},rightPoint:{x:this.xAxisCoord.x-6,y:this.xAxisCoord.y+8}},this.yAxisArrow={leftPoint:{x:this.yAxisCoord.x-8,y:this.yAxisCoord.y+6},rightPoint:{x:this.yAxisCoord.x+8,y:this.yAxisCoord.y+6}},this.xAxisWidth=this.lastCellXAxisCoord.x-this.originCoord.x,this.yAxisWidth=this.originCoord.y-this.lastCellYAxisCoord.y,this.oneCellX=this.xAxisWidth/(s+1),this.oneCellY=this.yAxisWidth/(s+1),this.point=null,this.addEventListener(o.MOUSE.MOUSE_DOWN,this.handleClick)}handleClick(t){const e=t.target,{top:n,left:i}=e.getAbsoluteCoord(),{top:s,left:o}=t.payload.mouseCoord,r=s-n+e.getBoundingClientRect().top,a=o-i+e.getBoundingClientRect().left;if(r<e.lastCellYAxisCoord.y+e.oneCellY/2||r>e.originCoord.y||a<e.originCoord.x||a>e.lastCellXAxisCoord.x-e.oneCellX/2)e.point=null;else{const t=Math.round((e.originCoord.y-r)/e.oneCellY),n=Math.round((a-e.originCoord.x)/e.oneCellX);e.setPoint(n,t)}}getPoint(){return null===this.point?null:{x:this.point.x,y:this.point.y}}paintComponent(t,e){t.save(),super.paintComponent(t,e);const{top:n,left:i,width:s,height:o}=this.getBoundingClientRect(),{x:r,y:a}=this.originCoord;t.fillStyle="#ffffff",t.fillRect(i,n,s,o),t.strokeStyle="#000000",t.lineWidth=3,t.beginPath(),t.moveTo(r,a),t.lineTo(this.xAxisCoord.x,this.xAxisCoord.y),t.moveTo(this.xAxisCoord.x,this.xAxisCoord.y),t.lineTo(this.xAxisArrow.leftPoint.x,this.xAxisArrow.leftPoint.y),t.moveTo(this.xAxisCoord.x,this.xAxisCoord.y),t.lineTo(this.xAxisArrow.rightPoint.x,this.xAxisArrow.rightPoint.y),t.moveTo(this.yAxisCoord.x,this.yAxisCoord.y),t.lineTo(this.yAxisArrow.leftPoint.x,this.yAxisArrow.leftPoint.y),t.moveTo(this.yAxisCoord.x,this.yAxisCoord.y),t.lineTo(this.yAxisArrow.rightPoint.x,this.yAxisArrow.rightPoint.y),t.moveTo(r,a),t.lineTo(this.yAxisCoord.x,this.yAxisCoord.y),t.stroke(),t.fillStyle="#000000",t.font="16px monospace",t.textBaseline="top",t.textAlign="center",t.fillText("0",r,a),t.strokeStyle="#777777",t.lineWidth=2,t.beginPath();this.lastCellXAxisCoord.x,this.lastCellYAxisCoord.y;const h=this.lastCellYAxisCoord.y+this.oneCellY;for(let e=1;e<this.cellCount+1;e++){const n=r+e*this.oneCellX;t.moveTo(n,a),t.lineTo(n,h),t.fillText(String(e),n,a)}t.textBaseline="middle",t.textAlign="right";const l=this.lastCellXAxisCoord.x-this.oneCellX;for(let e=1;e<this.cellCount+1;e++){const n=a-(this.cellCount+1-e)*this.oneCellY;t.moveTo(r,n),t.lineTo(l,n),t.fillText(String(this.cellCount+1-e),r-3,n)}t.stroke(),null!==this.point&&(t.save(),t.strokeStyle="#aa0000",t.beginPath(),t.arc(this.point.pointCoord.x,this.point.pointCoord.y,5,0,2*Math.PI),t.clip(),t.stroke(),t.fillStyle="#aa0000",t.fillRect(this.point.pointCoord.x-10,this.point.pointCoord.y-10,20,20),t.restore()),t.restore()}setPoint(t,e){this.point={x:t,y:e,pointCoord:{x:this.originCoord.x+this.oneCellX*t,y:this.originCoord.y-this.oneCellY*e}}}}class Y extends W{constructor(t=0,e=0,n=0,i=0,s={},o=null){super(t,e,n,i,"Назовите то, что Вы видите на картинке одним словом на английском:",s,o);const r=s.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=s.images.nameImage,{naturalWidth:d,naturalHeight:c}=l,g=Math.ceil(i/2),p=new w(g-15,5,a,h,"");p.editable=!0,p.setBackgroundColor("#bb0000");const C=Math.ceil(m("x","monospace","16px"));p.maxTextLength=Math.floor(a/C)+1,p.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),p.setTextColor("#FFFF00"),p.cursor.setColor("#08B600"),this.answerKey="answer",this.addComponent(p,this.answerKey),p.alignCenter();const{top:f,height:x}=super.getOkButtonComponent().getBoundingClientRect();p.setBoundingClientRect(f+Math.round((x-h)/2));const{bottom:I,left:M}=super.getTaskDescriptionComponent().getBoundingClientRect();let A,B=d,E=c;const b=n-2*M,v=i-(i-f)-I-20;B/b>E/v?(B>b&&(B=b),A=B/d,(E=Math.round(c*A))>v&&(E=v)):(E>v&&(E=v),A=E/c,(B=Math.round(d*A))>b&&(B=b)),this.taskImageKey="task";const P=new u(0,0,B,E);P.setBackgroundImage(new y(l,0,0,d,c,B,E,0,0,d,c)),this.addComponent(P,this.taskImageKey),P.alignCenter(),P.setBoundingClientRect(I+10),this.imageNames=s.additional.name.taskNames}answerIsRight(){const t=this.getChildComponent(this.answerKey).getText().trim().toLowerCase(),e=this.imageNames;let n=!1;for(let i=0;i<e.length;i++)if(n=t===e[i])return n;return n}}const j=[class extends W{constructor(t=0,e=0,n=0,i=0,s={},o=null){super(t,e,n,i,"Переведите слово:",s,o),this.wordObj=_[Math.round(Math.random()*(_.length-1))];const r=s.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r,l=`${this.wordObj.word}: `,d=Math.ceil(i/2),c=Math.ceil((m(l,"monospace","16px")+1)/2),g=new w(d-h-8,5,2*c,h,l),u=new w(d-15,5,a,h,"");u.editable=!0,u.setBackgroundColor("#bb0000");const p=Math.ceil(m("x","monospace","16px"));u.maxTextLength=Math.floor(a/p)+1,u.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),u.setTextColor("#FFFF00"),u.cursor.setColor("#08B600"),g.setBackgroundColor("rgba(0, 0, 0, 0)"),g.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(g,this.expressionKey),this.addComponent(u,this.answerKey),u.alignCenter(),g.setBoundingClientRect(void 0,u.getBoundingClientRect().left)}answerIsRight(){const t=this.getChildComponent(this.answerKey).getText().trim().toLowerCase(),e=this.wordObj.translate;let n=!1;for(let i=0;i<e.length;i++)if(n=t===e[i])return n;return n}},class extends W{constructor(t=0,e=0,n=0,i=0,s={},o=null){super(t,e,n,i,"Решите данное выражение:",s,o);const r=H[Math.round(Math.random()*(H.length-1))];this.operation=r;const a=s.images.textFieldImage,{naturalWidth:h,naturalHeight:l}=a;let d=1,c=1;if(d=Math.round(50*Math.random()),"x"===r.charPresentation)if(0===d)c=Math.round(50*Math.random());else{const t=Math.ceil(100/d);c=Math.floor(Math.random()*t)}else c=Math.round(50*Math.random());this.first=d,this.second=c;const g=`${d} ${r.charPresentation} ${c} =`,u=Math.ceil(n/2),p=Math.ceil(i/2),C=Math.ceil((m(g,"monospace","16px")+1)/2),f=Math.ceil((m("9999","monospace","16px")+1)/2),x=f+C+3,I=new w(p-15,u-x,2*C,30,g),M=new w(p-15,u-x+2*C+3,2*f,l,"");I.setBackgroundColor("rgba(0, 0, 0, 0)"),I.setTextColor("#ffffff"),M.editable=!0,M.setBackgroundColor("rgba(0, 0, 0, 0)"),M.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h,l)),M.maxTextLength=4,M.setTextColor("#FFFF00"),M.cursor.setColor("#08B600"),this.expressionKey="expression",this.answerKey="answer",this.addComponent(I,this.expressionKey),this.addComponent(M,this.answerKey)}answerIsRight(){return parseFloat(this.getChildComponent(this.answerKey).getText())===this.operation.perform(this.first,this.second)}},class extends W{constructor(t=0,e=0,n=0,i=0,s={},o=null){const r={x:Math.round(10*Math.random()),y:Math.round(10*Math.random())};super(t,e,n,i,`Поставте точку с координатами (${r.x}:${r.y}):`,s,o);const a=super.getTaskDescriptionComponent().getBoundingClientRect(),h=super.getOkButtonComponent().getBoundingClientRect();this.chartBoundingClientBox={top:a.bottom+5,left:20,bottom:i-20,right:h.left-5},this.point=r,this.chartBoundingClientBox.width=this.chartBoundingClientBox.right-this.chartBoundingClientBox.left,this.chartBoundingClientBox.height=this.chartBoundingClientBox.bottom-this.chartBoundingClientBox.top,this.chartKey="chart";const l=new D(this.chartBoundingClientBox.top,this.chartBoundingClientBox.left,this.chartBoundingClientBox.width,this.chartBoundingClientBox.height,10);this.addComponent(l,this.chartKey)}answerIsRight(){const t=this.getChartComponent().getPoint();return null!==t&&this.point.x===t.x&&this.point.y===t.y}getChartComponent(){return this.getChildComponent(this.chartKey)}},class extends W{constructor(t=0,e=0,n=0,i=0,s={},o=null){super(t,e,n,i,"Переведите число из десетичной в двоичную систему счисления:",s,o);const r=s.images.textFieldImage,{naturalWidth:a,naturalHeight:h}=r;this.numberToConvert=Math.round(32*Math.random());const l=`Число для перевода ${this.numberToConvert}:`,d=Math.ceil(i/2),c=Math.ceil((m(l,"monospace","16px")+1)/2),g=new w(d-h-8,5,2*c,h,l),u=new w(d-15,5,a,h,"");u.editable=!0,u.setBackgroundColor("#bb0000"),u.maxTextLength=8,u.setBackgroundImage(new y(r,0,0,a,h,a,h,0,0,a,h)),u.setTextColor("#FFFF00"),u.cursor.setColor("#08B600"),g.setBackgroundColor("rgba(0, 0, 0, 0)"),g.setTextColor("#ffffff"),this.descriptionKey="description",this.expressionKey="expression",this.answerKey="answer",this.buttonKey="button",this.addComponent(g,this.expressionKey),this.addComponent(u,this.answerKey),u.alignCenter(),g.setBoundingClientRect(void 0,u.getBoundingClientRect().left)}answerIsRight(){return this.getChildComponent(this.answerKey).getText().trim().toLowerCase()===this.numberToConvert.toString(2)}},Y,class extends W{constructor(t=0,e=0,n=0,i=0,s={},r=null){super(t,e,n,i,"Произнесите слово:",s,r);const a=s.images.textFieldImage,{naturalWidth:h,naturalHeight:l}=a,d=s.images.microButtonImage,{naturalWidth:c,naturalHeight:g}=d;this.word=_[Math.round(Math.random()*(_.length-1))].word;const u=`${this.word}: `,p=new $;p.lang="en-US",p.interimResults=!1,p.maxAlternatives=1,this.recognition=p;const C=Math.ceil(i/2),f=Math.ceil((m(u,"monospace","16px")+1)/2),I=new w(C-l-8,5,2*f,l,u),M=new w(C-15,5,h,l,""),A=new x(C-15,n-10-30,c/2,g,"");A.setBackgroundImage(new y(d,0,0,c,g,c,g,0,0,c/2,g)),M.setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h,l)),M.setTextColor("#FFFF00"),M.properties.cursor="auto",I.setBackgroundColor("rgba(0, 0, 0, 0)"),I.setTextColor("#ffffff");const B=Math.ceil(m("x","monospace","16px"));M.maxTextLength=Math.floor((n-10)/B),A.setBackgroundColor("#aaaaaa"),this.expressionKey="expression",this.answerKey="answer",this.microButtonKey="microbutton",this.addComponent(I,this.expressionKey),this.addComponent(M,this.answerKey),this.addComponent(A,this.microButtonKey),M.alignCenter(),A.alignCenter(),I.setBoundingClientRect(void 0,M.getBoundingClientRect().left),A.setBoundingClientRect(void 0,M.getBoundingClientRect().right+5);let E=!1;A.addEventListener(o.MOUSE.MOUSE_DOWN,t=>{E?(p.stop(),E=!1,A.getBackgroundImage().setFrame(0)):(p.start(),E=!0,A.getBackgroundImage().setFrame(.6))}),p.onresult=(t=>{t.results.length>0&&M.setText(t.results[0][0].transcript)}),p.onspeechend=(()=>{p.stop(),E=!1,A.getBackgroundImage().setFrame(0)}),p.onerror=(t=>{console.log("Error occurred in recognition: "+t.error),A.getBackgroundImage().setFrame(0)})}answerIsRight(){return this.getChildComponent(this.answerKey).getText().toLowerCase()===this.word}}];class X{constructor(t,e){this.uiImages=t,this.taskImages=e}createTask(t,e,n,i){const s={images:{textFieldImage:this.uiImages[1],modalWindowImage:this.uiImages[2],okButtonImage:this.uiImages[3],microButtonImage:this.uiImages[4]},additional:{}},o=j[Math.round(Math.random()*(j.length-1))];if(o===Y){const t=Math.round(Math.random()*(this.taskImages.length-1));s.additional.name={taskNames:L[t].names},s.images.nameImage=this.taskImages[t]}return new o(t,e,n,i,s)}}class z{constructor(t,e,n){this.name=t,this.damage=e,this.graphicComponent=n}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}}class q extends z{constructor(t,e,n,i,s){super(t,e,n),this.attackAnimations=i,this.sound=s}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}async attack(t,e,n){const{left:i,width:s}=t.getGraphicComponent().getBoundingClientRect(),{top:r,left:a,height:h}=e.getGraphicComponent().getBoundingClientRect();let l=a-i+Math.floor(s/4);this.attackAnimations[0].animations.setAnimation("asd",.924,1,(t,e,n,s,o)=>{o.backgroundImage.setFrame(s),o.setBoundingClientRect(void 0,i+l*s)});const d=new Promise(t=>{this.attackAnimations[0].addEventListener(o.ANIMATION.ANIMATION_END,e=>{n.removeScene(this.attackAnimations[0]),t()})});this.attackAnimations[0].setBoundingClientRect(r+Math.floor(h/2),i),n.addScene(this.attackAnimations[0]),this.sound.play(),await d,this.attackAnimations[1].animations.setAnimation("asd",.924,1,(t,e,n,i,s)=>{s.backgroundImage.setFrame(i)});const c=new Promise(t=>{this.attackAnimations[1].addEventListener(o.ANIMATION.ANIMATION_END,e=>{n.removeScene(this.attackAnimations[1]),t()})});this.attackAnimations[1].setBoundingClientRect(r+Math.floor(h/2),a+Math.floor(s/4)),n.addScene(this.attackAnimations[1]),await c}}class V extends z{constructor(t,e,n,i,s){super(t,e,n),this.attackAnimations=i,this.sound=s}getGraphicComponent(){return this.graphicComponent}getName(){return this.name}getDamage(){return this.damage}async attack(t,e,n){const{top:i,left:s,width:r}=e.getGraphicComponent().getBoundingClientRect();this.attackAnimations[0].animations.setAnimation("asd",.924,1,(t,e,n,i,s)=>{s.backgroundImage.setFrame(i)});const a=new Promise(t=>{this.attackAnimations[0].addEventListener(o.ANIMATION.ANIMATION_END,e=>{n.removeScene(this.attackAnimations[0]),t()})});this.attackAnimations[0].setBoundingClientRect(i,Math.floor(s+r/3)),this.sound.play(),n.addScene(this.attackAnimations[0]),await a}}class Q extends u{constructor(t,e,n,i,s=null){const{naturalWidth:o,naturalHeight:r}=i,a=o*n,h=r*n;super(t,e,a,h,s),i instanceof Image&&this.setBackgroundImage(new y(i,0,0,o,r,a,h,0,0,o,r)),this.properties.cursor="pointer"}}class J{constructor(){this.assets={}}addMagicAssets(t,e,n){this.assets[n]={images:t,sound:e}}createMagicArrow(t,e=!1){if(!this.assets.magicArrow)return null;const n=this.assets.magicArrow.images,i=this.assets.magicArrow.sound,s=n[0];let o=n[1];const r=n[3];e&&(o=n[2]);let{naturalWidth:a,naturalHeight:h}=o;const l=new y(o,0,0,a,h,a/14,h,0,0,a/14,h),d=new u(0,0,a/14,h);d.setBackgroundImage(l),({naturalWidth:a,naturalHeight:h}=r);const c=new y(r,0,0,a,h,a/14,h,0,0,a/14,h),g=new u(0,0,a/14,h);g.setBackgroundImage(c);const m=new Q(10,10,2,s);return new q("Волшебная стрела",t,m,[d,g],i)}createImplosionArrow(t){if(!this.assets.implosion)return null;const e=this.assets.implosion.images,n=this.assets.implosion.sound,i=e[0],s=e[1];let{naturalWidth:o,naturalHeight:r}=s;const a=new y(s,0,0,o,r,o/19,r,0,0,o/19,r),h=new u(0,0,o/19,r);h.setBackgroundImage(a);const l=new Q(10,10,2,i);return new V("Взрыв",t,l,[h],n)}}class Z extends u{constructor(t,e,n,i=null){const{naturalWidth:s,naturalHeight:o}=n;super(t,e,s,o,i),this.setBackgroundImage(new y(n,0,0,s,o,s,o,0,0,s,o))}}window.onload=(()=>{new class{constructor(){this.backgroundImgsKey="background",this.mainCharImgsKey="mainchar",this.headImgsKey="heads",this.bodyImgsKey="bodies",this.leftArmImgsKey="leftarms",this.rightArmImgsKey="rightarms",this.legImgsKey="legs",this.magicImgsKey="magics",this.uiImgsKey="ui",this.taskImgsKey="task",this.magicSoundKey="magics",this.statusBarKey="statusbar",this.monsterKillCount=0,this.loadManager=new S,this.storageManager=new R,this.canvas=new i,this.eventQueue=new s,this.ui=new r,this.uiComponents,this.background=new u(0,0,"100%","100%"),this.init(),this.main=this.main.bind(this),this.main(0)}async init(){const t=await this.showLoadingScreen(),e=t.getLoadingProgressBar();this.initLoadingPath();const n=this.loadManager;await n.calculateTotalSize(),await n.load(t=>e.setValue(t)),this.canvas.removeScene(t);const i=n.getImagesByName(this.backgroundImgsKey)[0],{width:s,height:o}=this.background.getBoundingClientRect();this.background.setBackgroundImage(new y(i,0,0,i.naturalWidth,i.naturalHeight,s,o,0,0,i.naturalWidth,i.naturalHeight)),this.canvas.addScene(this.background),this.setEventListenersToCanvas();const r=n.getImagesByName(this.headImgsKey),a=n.getImagesByName(this.bodyImgsKey),h=n.getImagesByName(this.leftArmImgsKey),l=n.getImagesByName(this.rightArmImgsKey),d=n.getImagesByName(this.legImgsKey);this.taskFactory=new X(this.loadManager.getImagesByName(this.uiImgsKey),this.loadManager.getImagesByName(this.taskImgsKey)),this.magicFactory=new J,this.monsterFactory=new U(r,h,l,a,d),this.magicFactory.addMagicAssets(n.getImagesByName(this.magicImgsKey).slice(0,4),n.getSoundByName(this.magicSoundKey)[0],"magicArrow"),this.magicFactory.addMagicAssets(n.getImagesByName(this.magicImgsKey).slice(4,6),n.getSoundByName(this.magicSoundKey)[1],"implosion"),this.setUpUI()}setUpUI(t=""){const e=this.loadManager;this.uiComponents=new p(0,0,window.innerWidth,window.innerHeight);const n=e.getImagesByName(this.uiImgsKey).slice(5,8),i={back:n[0],left:n[1],right:n[2]},s=new B(window.innerHeight-150,0,window.innerWidth,150,i);s.setBackgroundColor("#00ff00");const r=e.getImagesByName(this.uiImgsKey)[8],a=new E(10,Math.ceil(window.innerWidth/2)-200-150,200,130,"",0,100,0,{back:r}),h=new E(10,Math.ceil(window.innerWidth/2)+150,200,130,"",0,100,0,{back:r});s.setPlayerInfoWindow(a),s.setEnemyInfoWindow(h),a.setBackgroundColor("#f4f142"),h.setBackgroundColor("#f4f142"),this.ui.add(this.uiComponents);const l=this.showNameEnter(t);l.addButtonEventListener(o.MOUSE.MOUSE_DOWN,t=>{const e=t.target.getParentComponent().getInputUser();this.uiComponents.removeComponent(l),this.canvas.getHtml().style.cursor="auto",this.uiComponents.addComponent(s,this.statusBarKey),this.mainLogic(e)}),this.uiComponents.addComponent(l),this.canvas.addUI(this.ui)}initLoadingPath(){const t=this.loadManager;return t.addUrl({image:[`${O.IMAGE.UI}/bardata.jpg`,`${O.IMAGE.UI}/textfield.jpg`,`${O.IMAGE.UI}/leather.jpg`,`${O.IMAGE.UI}/okbutton.jpg`,`${O.IMAGE.UI}/microbutton.jpg`,`${O.IMAGE.UI}/status.jpg`,`${O.IMAGE.UI}/statusleft.jpg`,`${O.IMAGE.UI}/statusright.jpg`,`${O.IMAGE.UI}/characterinfowindow.jpg`,`${O.IMAGE.UI}/spellsel.jpg`,`${O.IMAGE.UI}/table.jpg`,`${O.IMAGE.UI}/reloadbutton.jpg`]},{image:this.uiImgsKey}),t.addUrl({image:[`${O.IMAGE.BACKGROUND_IMAGES}/dungeon.jpg`]},{image:this.backgroundImgsKey}),t.addUrl({image:[`${O.IMAGE.MAIN_CHAR}/mainChar.png`]},{image:this.mainCharImgsKey}),t.addUrl({image:[`${O.IMAGE.HEAD_IMAGES}/head_1.png`,`${O.IMAGE.HEAD_IMAGES}/head_2.png`,`${O.IMAGE.HEAD_IMAGES}/head_3.png`,`${O.IMAGE.HEAD_IMAGES}/head_4.png`]},{image:this.headImgsKey}),t.addUrl({image:[`${O.IMAGE.BODY_IMAGES}/body_1.png`,`${O.IMAGE.BODY_IMAGES}/body_2.png`,`${O.IMAGE.BODY_IMAGES}/body_3.png`,`${O.IMAGE.BODY_IMAGES}/body_4.png`]},{image:this.bodyImgsKey}),t.addUrl({image:[`${O.IMAGE.LEFT_ARM_IMAGES}/arm_1.png`,`${O.IMAGE.LEFT_ARM_IMAGES}/arm_2.png`,`${O.IMAGE.LEFT_ARM_IMAGES}/arm_3.png`,`${O.IMAGE.LEFT_ARM_IMAGES}/arm_4.png`]},{image:this.leftArmImgsKey}),t.addUrl({image:[`${O.IMAGE.RIGHT_ARM_IMAGES}/arm_1.png`,`${O.IMAGE.RIGHT_ARM_IMAGES}/arm_2.png`,`${O.IMAGE.RIGHT_ARM_IMAGES}/arm_3.png`,`${O.IMAGE.RIGHT_ARM_IMAGES}/arm_4.png`]},{image:this.rightArmImgsKey}),t.addUrl({image:[`${O.IMAGE.LEG_IMAGES}/leg_1.png`,`${O.IMAGE.LEG_IMAGES}/leg_2.png`,`${O.IMAGE.LEG_IMAGES}/leg_3.png`,`${O.IMAGE.LEG_IMAGES}/leg_4.png`]},{image:this.legImgsKey}),t.addUrl({image:[`${O.IMAGE.MAGIC}/magicArrow/magicArrow.png`,`${O.IMAGE.MAGIC}/magicArrow/magicArrowMotionAnimation.png`,`${O.IMAGE.MAGIC}/magicArrow/magicArrowMotionAnimationReverse.png`,`${O.IMAGE.MAGIC}/magicArrow/magicArrowBlowAnimation.png`,`${O.IMAGE.MAGIC}/decay/decay.png`,`${O.IMAGE.MAGIC}/decay/decayBlow.png`],sound:[`${O.SOUND.MAGIC}/magicArrow/MAGICARW.mp3`,`${O.SOUND.MAGIC}/decay/DECAY.mp3`]},{image:this.magicImgsKey,sound:this.magicSoundKey}),t.addUrl({image:L.map(({image:t})=>t)},{image:this.taskImgsKey}),t}async mainLogic(t){const e=this.loadManager,n=this.monsterFactory,i=this.taskFactory,s=this.magicFactory,o=this.uiComponents,r=e.getImagesByName(this.uiImgsKey)[9],a=e.getImagesByName(this.mainCharImgsKey)[0],h=new Z("1%","11%",a),{width:l,height:d}=h.getBoundingClientRect();h.setBoundingClientRect(Math.floor((window.innerHeight-150)/2-d/2),Math.floor(window.innerWidth/2-l-100),l,d);let c=n.createMonster("1%","11%");this.setEnemy(c),c.addMagic(s.createMagicArrow(5,!0)),c.addMagic(s.createImplosionArrow(5));let g=0;const m=new T(t,100,100,h);for(m.addMagic(s.createMagicArrow(40)),m.addMagic(s.createImplosionArrow(40)),this.setPlayer(m);m.isAlive();){c.isAlive()||(c=n.createMonster("1%","11%"),this.setEnemy(c),c.addMagic(s.createMagicArrow(5,!0)),c.addMagic(s.createImplosionArrow(5)),g+=1);const t=new M(Math.ceil(window.innerHeight/2-55-75),Math.floor(window.innerWidth/2-214),428,132,m.getMagics(),{back:r});t.setBackgroundColor("#a0256b"),t.setOverflow("scroll"),o.addComponent(t);const e=await t.selectMagic();if(null===e){console.log("magic selecting error");break}o.removeComponent(t);const a=i.createTask(Math.ceil(window.innerHeight/2)-172-50,Math.ceil((window.innerWidth-460)/2),460,344);a.setBackgroundColor("#ffff00"),o.addComponent(a);const h=await a.getResult();if(o.removeComponent(a),h&&await m.attack(c,e,this.canvas),c.isAlive()){const t=c.getMagics(),e=Math.round(Math.random()*(t.length-1));await c.attack(m,t[e],this.canvas)}}this.showResultTable(m,g)}async showLoadingScreen(){const t=new Image;t.src=`${O.IMAGE.UI}/bardata.jpg`,await k(t);const{naturalWidth:e,naturalHeight:n}=t,i=new y(t,0,0,e,n,e,n,0,0,e,n),s=new p(0,0,window.innerWidth,window.innerHeight),o=new p(0,0,e,n,s);o.alignCenter(),o.setBackgroundImage(i),s.setBackgroundColor("#000000");const r=new A(0,0,114,16,0,100,0);return o.addComponent(r),r.alignCenter(),r.setBackgroundColor("rgba(0, 0, 0, 0)"),r.getTextComponent().setTextColor("#ffffff"),this.canvas.addScene(s),s.getLoadingProgressBar=(()=>r),s}showNameEnter(t=""){const e=this.loadManager.getImagesByName(this.uiImgsKey)[1],{naturalWidth:n,naturalHeight:i}=e,s=this.loadManager.getImagesByName(this.uiImgsKey)[2],{naturalWidth:o,naturalHeight:r}=s,a=this.loadManager.getImagesByName(this.uiImgsKey)[3],{naturalWidth:h,naturalHeight:l}=a,d=new I(0,0,o,r,"Введите свое имя:");d.setBackgroundColor("#3c76a7"),d.alignCenter(),d.setBackgroundImage(new y(s,0,0,o,r,o,r,0,0,o,r)),d.getInputUserComponent().setBoundingClientRect(void 0,void 0,n,i),d.getInputUserComponent().setBackgroundImage(new y(e,0,0,n,i,n,i,0,0,n,i));const c=Math.ceil(m("x","monospace","16px"));return d.getInputUserComponent().maxTextLength=Math.floor(n/c)+1,d.getDescriptionComponent().setBackgroundColor("rgba(0, 0, 0, 0)"),d.getDescriptionComponent().setTextColor("#ffffff"),d.getOkButtonComponent().setBoundingClientRect(r-19-l,o-19-h/2,h/2,l),d.getOkButtonComponent().setBackgroundImage(new y(a,0,0,h,l,h,l,0,0,h/2,l)),d.getInputUserComponent().setText(t),d}showResultTable(t,e){const n=this.loadManager.getImagesByName(this.uiImgsKey)[10],i=this.loadManager.getImagesByName(this.uiImgsKey)[11],{naturalWidth:s,naturalHeight:r}=n,a=new y(n,0,0,s,r,s,r,0,0,s,r),{naturalWidth:h,naturalHeight:l}=i,d=new y(i,0,0,h,l,h,l,0,0,h,l);this.storageManager.saveResult(t.getName(),e);const c=this.storageManager.getSortedRecords(),g=new b(0,0,s,252,c.length+1,2,131,25);this.uiComponents.addComponent(g),g.alignCenter(),g.setBackgroundImage(a),g.getBackgroundImage().setSize(s,r);const u=new w(0,0,Math.ceil(m("Имя:","monospace",16)),16,"Имя:"),p=new w(0,0,Math.ceil(m("Убито монстров:","monospace",16)),16,"Убито монстров:");u.setTextColor("#ffffff"),p.setTextColor("#ffffff"),p.setFontSize(14),g.getTableComponent(0,0).addComponent(u),u.alignCenter(),g.getTableComponent(0,1).addComponent(p),p.alignCenter(),c.forEach((t,e)=>{const{name:n,monsterKilled:i}=t;void 0===n&&(n="");const s=new w(0,0,Math.ceil(m(n,"monospace",16)),16,n),o=new w(0,0,Math.ceil(m(i,"monospace",16)),16,String(i));s.setTextColor("#ffffff"),o.setTextColor("#ffffff"),g.getTableComponent(1+e,0).addComponent(s),s.alignCenter(),g.getTableComponent(1+e,1).addComponent(o),o.alignCenter()}),g.setOverflow("scroll");const{top:C,right:f}=g.getBoundingClientRect(),I=new x(C,f+5,h,l,"");return I.setBackgroundImage(d),I.addEventListener(o.MOUSE.MOUSE_DOWN,t=>{this.uiComponents.dropChildren();const e=this.player.getName();this.setPlayer(null),this.setEnemy(null),this.canvas.getHtml().style.cursor="auto",this.setUpUI(e)}),this.uiComponents.addComponent(I,"restart"),g}setPlayer(t){if(this.player&&this.canvas.removeScene(this.player.getGraphicComponent()),this.player=t,null===t)return;this.uiComponents.getChildComponent(this.statusBarKey).setPlayerInfo(`${t.getName()}:`,t.getCurrentHP());const e=t.getGraphicComponent();null!==e&&this.canvas.addScene(e);const n=this.uiComponents.getChildComponent(this.statusBarKey).getPlayerInfoWindow().getHealthBar();t.addHPChangeListener(n.setValue.bind(n))}setEnemy(t){if(this.enemy&&this.canvas.removeScene(this.enemy.getGraphicComponent()),null===t)return;this.enemy=t,this.uiComponents.getChildComponent(this.statusBarKey).setEnemyInfo(`${t.getName()}:`,t.getCurrentHP());const e=t.getGraphicComponent();null!==e&&this.canvas.addScene(e);const n=this.uiComponents.getChildComponent(this.statusBarKey).getEnemyInfoWindow().getHealthBar();t.addHPChangeListener(n.setValue.bind(n))}setEventListenersToCanvas(){this.canvas.getHtml().addEventListener("mousedown",t=>{this.eventQueue.add({type:o.MOUSE.MOUSE_DOWN,subtype:"MOUSE",payload:{mouseCoord:{top:t.offsetY,left:t.offsetX}}})}),this.canvas.getHtml().addEventListener("keydown",t=>{this.eventQueue.add({type:o.KEYBOARD.KEY_DOWN,subtype:"KEYBOARD",payload:{key:t.key}})}),this.canvas.getHtml().addEventListener("keypress",t=>{this.eventQueue.add({type:o.KEYBOARD.KEY_PRESS,subtype:"KEYBOARD",payload:{key:t.key}})}),this.canvas.getHtml().addEventListener("mousemove",t=>{this.eventQueue.add({type:o.MOUSE.MOUSE_MOVE,subtype:"MOUSE",payload:{mouseCoord:{top:t.offsetY,left:t.offsetX}}})})}main(t){requestAnimationFrame(this.main),void 0!==t&&(void 0===this.prevTime&&(this.prevTime=t),this.update(),this.render(t-this.prevTime),this.prevTime=t)}update(){for(;this.eventQueue.hasNext();){const t=this.eventQueue.getNext();this.ui.handleEvent(t)}}render(t){this.canvas.draw(t)}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NhbnZhcy9DYW52YXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50L0V2ZW50UXVldWUvRXZlbnRRdWV1ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnQvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvVUkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0N1cnNvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29sbGlzaW9uL0NvbGxpc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQW5pbWF0aW9uL0FuaW1hdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50L0V2ZW50c0hhbmRsZXIvRXZlbnRzSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdGV4dFdpZHRoLmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9Db21wb25lbnQvQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9Db21wb25lbnQvTGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0ltYWdlQ29tcG9uZW50L0ltYWdlQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9Db21wb25lbnQvQnV0dG9uLmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9Nb2RhbFdpbmRvd3MvVGV4dElucHV0TW9kYWxXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL01vZGFsV2luZG93cy9NYWdpY1NlbGVjdGluZ01vZGFsV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9Db21wb25lbnQvUHJvZ3Jlc3NCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0NvbXBvbmVudC9TdGF0dXNCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0NvbXBvbmVudC9DaGFyYWN0ZXJJbmZvV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9Db21wb25lbnQvVGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2ZpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL01hbmFnZXJzL0xvYWRNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9NYW5hZ2Vycy9TdG9yYWdlTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGF0aC9wYXRoLmpzIiwid2VicGFjazovLy8uL3NyYy9HcmFwaGljQ29tcG9uZW50L01vbnN0ZXJHcmFwaGljQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9DaGFyYWN0ZXIvQ2hhcmFjdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9GYWN0b3JpZXMvTW9uc3RlckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RpY3Rpb25hcnkvbmFtZVRhc2tNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL01vZGFsV2luZG93cy9UYXNrTW9kYWxXaW5kb3cvVGFza01vZGFsV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9Nb2RhbFdpbmRvd3MvVGFza01vZGFsV2luZG93L1NvbHZlRXhwcmVzc2lvblRhc2tXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RpY3Rpb25hcnkvZGljdGlvbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvTW9kYWxXaW5kb3dzL1Rhc2tNb2RhbFdpbmRvdy9MaXN0ZW5pbmdUYXNrTW9kYWxXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL0NvbXBvbmVudC9DaGFydC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvTW9kYWxXaW5kb3dzL1Rhc2tNb2RhbFdpbmRvdy9OYW1lVGFza01vZGFsV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9GYWN0b3JpZXMvVGFza0ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VJL01vZGFsV2luZG93cy9UYXNrTW9kYWxXaW5kb3cvVHJhbnNsYXRlVGFza01vZGFsV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9VSS9Nb2RhbFdpbmRvd3MvVGFza01vZGFsV2luZG93L1NldFBvaW50QXRDaGFydFRhc2tNb2RhbFdpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVUkvTW9kYWxXaW5kb3dzL1Rhc2tNb2RhbFdpbmRvdy9Db252ZXJ0RnJvbURlY1RvQmluVGFza01vZGFsV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9NYWdpYy9NYWdpYy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTWFnaWMvTWFnaWNBcnJvdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvTWFnaWMvSW1wbG9zaW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9HcmFwaGljQ29tcG9uZW50L01hZ2ljR3JhcGhpY0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRmFjdG9yaWVzL01hZ2ljRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvR3JhcGhpY0NvbXBvbmVudC9QbGF5ZXJHcmFwY2hpY0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWUvR2FtZS5qcyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiZXhlY3V0ZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImRlZmVycmVkTW9kdWxlcyIsImFwcGx5IiwiY2hlY2tEZWZlcnJlZE1vZHVsZXMiLCJyZXN1bHQiLCJkZWZlcnJlZE1vZHVsZSIsImZ1bGZpbGxlZCIsImoiLCJkZXBJZCIsInNwbGljZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIjEiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsIkNhbnZhcyIsIltvYmplY3QgT2JqZWN0XSIsIndpZHRoIiwiaGVpZ2h0IiwidGhpcyIsImh0bWxDb21wb25lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInVuZGVmaW5lZCIsInNldFNpemUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzY2VuZXMiLCJ1aSIsInN0eWxlIiwiY2FudmFzIiwiY29sb3IiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInNjZW5lIiwiaW5kZXgiLCJpbmRleE9mIiwiZWxhcHNlVGltZSIsImNsZWFyIiwiZHJhdyIsInVpQ29tcG9uZW50cyIsIkV2ZW50UXVldWUiLCJxdWV1ZSIsInF1ZXVlSW5kZXgiLCJldmVudCIsImhhc05leHQiLCJldmVudHNfZXZlbnRzIiwiTU9VU0UiLCJNT1VTRV9NT1ZFIiwiTU9VU0VfRU5URVIiLCJNT1VTRV9MRUFWRSIsIk1PVVNFX0RPV04iLCJLRVlCT0FSRCIsIktFWV9QUkVTUyIsIktFWV9ET1dOIiwiQU5JTUFUSU9OIiwiQU5JTUFUSU9OX0VORCIsIlVJX1VJIiwic2VsZWN0ZWQiLCJob3ZlcmVkIiwic3VidHlwZSIsImVsZW1lbnRzIiwiY2hlY2tGb3JDb2xsaXNpb24iLCJwYXlsb2FkIiwibW91c2VDb29yZCIsImVsZW1lbnQiLCJtb3N0RGVwdGgiLCJmb3JFYWNoIiwiZGVwdGgiLCJ0YXJnZXQiLCJjYW52YXNIVE1MIiwicXVlcnlTZWxlY3RvciIsImN1cnNvciIsImhhbmRsZXJzIiwiaGFuZGxlIiwidHlwZSIsInJlbGF0ZWRUYXJnZXQiLCJzZXRIb3ZlcmVkIiwiaXNTZWxlY3RlZCIsImNvbXBvbmVudCIsIkN1cnNvciIsInRvcCIsImxlZnQiLCJtZXRyaWMiLCJibGlua1RpbWUiLCJlbGFwc2VkVGltZSIsInNhdmUiLCJzdHJva2VTdHlsZSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsInJlc3RvcmUiLCJDb2xsaXNpb24iLCJmaXJzdE1ldHJpYyIsInNlY29uZE1ldHJpYyIsImtleXMiLCJBbmltYXRhYmxlX0FuaW1hdGFibGUiLCJhbmltYXRlZFByb3BlcnRpZXMiLCJsb2Rhc2giLCJwcm9wZXJ0aWVzIiwiYW5pbWF0aW9ucyIsInRpbWUiLCJ0aW1lQ291bnQiLCJhbmltYXRpb25GdW5jIiwiYW5pbWF0aW9uVGltZVBhc3QiLCJhIiwiaG92ZXJQcm9wZXJ0aWVzIiwiYW5pbWF0aW9uTmFtZSIsIkV2ZW50c0hhbmRsZXJfRXZlbnRzSGFuZGxlciIsImhhbmRsZXIiLCJ0ZXh0V2lkdGhfY29udGV4dCIsImdldFRleHRXaWR0aFdpdGhDYW52YXMiLCJ0ZXh0IiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiZm9udCIsIm1lYXN1cmVUZXh0IiwiQ29tcG9uZW50X0NvbXBvbmVudCIsInBhcmVudENvbXBvbmVudCIsImRyYXdCb3JkZXIiLCJvdmVyZmxvdyIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiYmFja2dyb3VuZEltYWdlIiwiY29sbGlzaW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUhvdmVyIiwiY29udmVydEZyb21QZXJjZW50YWdlVG9QaXhlbCIsInNldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbFhPZmZzZXQiLCJzY3JvbGxZT2Zmc2V0IiwiYWRkQ29tcG9uZW50IiwiaW5pdGlhbEJvdW5kaW5nQ2xpZW50UmVjdCIsImJvdW5kaW5nQ2xpZW50UmVjdCIsInBhcmVudCIsImdldFBhcmVudENvbXBvbmVudCIsInBhcmVudFdpZHRoIiwicGFyZW50SGVpZ2h0IiwicmVnIiwiZmxvb3IiLCJNYXRoIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidGVzdCIsInBhcnNlRmxvYXQiLCJjYWxsYmFjayIsImNlbnRyZWRUb3AiLCJyb3VuZCIsImNlbnRyZWRMZWZ0IiwiaW1hZ2UiLCJzdW1QYXRoIiwic3VtIiwicHJvcCIsIlN0cmluZyIsImUiLCJjbGlwcGVkQm91bmRpbmdDbGllbnRSZWN0IiwicHJldkJvdW5kaW5nQm94IiwicHJldlRvcCIsInByZXZMZWZ0IiwicHJldldpZHRoIiwicHJldkhlaWdodCIsInJpZ2h0IiwiYm90dG9tIiwiY2FsY3VsYXRlQ2xpcHBlZFNpemUiLCJ0b3RhbEhlaWdodCIsImNhbGN1bGF0ZVRvdGFsSGVpZ2h0Q29tcG9uZW50IiwidG90YWxXaWR0aCIsImNhbGN1bGF0ZVRvdGFsV2lkdGhDb21wb25lbnQiLCJzY3JvbGxZIiwiQ29tcG9uZW50X1Njcm9sbEJhciIsInNjcm9sbFgiLCJ0cmF2ZXJzZSIsInBhcmVudEJveCIsInNldEJvdW5kaW5nQ2xpcHBlZENsaWVudFJlY3QiLCJhYnMiLCJwYXJlbnRUb3AiLCJwYXJlbnRMZWZ0IiwiYW5pbWF0ZSIsInN0cm9rZVJlY3QiLCJwYXRoIiwiUGF0aDJEIiwicmVjdCIsImNsaXAiLCJzZXRDb250ZXh0UHJvcGVydGllcyIsInBhaW50Q29tcG9uZW50IiwidHJhbnNsYXRlIiwiZHJhd0NvbXBvbmVudCIsImNoaWxkcmVuIiwiQ29tcG9uZW50X0NvbXBvc2l0ZUNvbXBvbmVudCIsInN1cGVyIiwic2V0UGFyZW50Q29tcG9uZW50IiwiZmluZEluZGV4IiwiY2hpbGRDb21wb25lbnQiLCJjaGlsZCIsImZpbmQiLCJzY3JvbGxZT2ZmZXIiLCJnZXRCYWNrZ3JvdW5kSW1hZ2UiLCJzZXRTY3JvbGxZT2ZmZXIiLCJ5Iiwic2Nyb2xsWE9mZmVyIiwic2V0U2Nyb2xsWE9mZmVyIiwieCIsIm1heENvbXBvbmVudCIsIm1heCIsIm9iamVjdE1ldHJpYyIsImVsZW1lbnRJbnNpZGUiLCJiaWdnZXN0RGVwdGgiLCJvQ29vcmQiLCJhYnNvbHV0ZVRvcCIsImFic29sdXRlTGVmdCIsInBhcmVudE92ZXJmbG93IiwiZ2V0T3ZlcmZsb3ciLCJwQm94IiwiaXNJbnNpZGUiLCJvcmllbnRhdGlvbiIsImNoaWxkV2lkdGgiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJuZXh0QnV0dG9uIiwicHJldkJ1dHRvblRleHQiLCJmcm9tQ2hhckNvZGUiLCJwYXJzZUludCIsIm5leHRCdXR0b25UZXh0IiwicHJldkJ1dHRvbiIsIkNvbXBvbmVudF9CdXR0b24iLCJzY3JvbGxCYWNrZ3JvdW5kIiwic2Nyb2xsQmFja2dyb3VuZFdpZHRoIiwic2Nyb2xsIiwicGFydE9mUGFyZW50IiwicGFyQW5kQ2hpbGREaWYiLCJzY3JvbGxQb3MiLCJzY3JvbGxQb3NNYXgiLCJjdXJyZW50Q2hpbGRQb3MiLCJwYXJ0IiwidGV4dFdpZHRoIiwibGFiZWwiLCJMYWJlbF9MYWJlbCIsInRleHRDb2xvciIsInRleHRQcm9wZXJ0aWVzIiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwibWF4VGV4dExlbmd0aCIsImVkaXRhYmxlIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlS2V5UHJlc3MiLCJoYW5kbGVLZXlEb3duIiwibGluZXNNZXRyaWMiLCJ0ZXh0TGluZXMiLCJjdXJzb3JQb3NpdGlvbiIsInJvdyIsImNvbHVtbiIsIm5lZWRlZFRvUmVjYWxjdWxhdGUiLCJuZWVkZWQiLCJzZXRQb3NpdGlvbiIsInRvcE9mZnNldCIsImxlZnRPZmZzZXQiLCJnbHlwaFBvc2l0aW9uIiwibGluZSIsInN0YXJ0T2ZMaW5lIiwiaW5zZXJ0R2x5cGgiLCJkZWxldGVHbHlwaCIsInN0cmluZyIsImxpbmVXaWR0aCIsImdseXBoV2lkdGgiLCJzcGxpdCIsImdseXBoIiwiY2FsY3VsYXRlR2x5cGhQb3NpdGlvbiIsImNhbGN1bGF0ZUxpbmVzIiwiY29udmVydEluZGV4VG8yRFBvc2l0aW9uIiwic2V0Q3Vyc29yUG9zaXRpb25Gcm9tMkQiLCJmaWxsVGV4dCIsIkltYWdlQ29tcG9uZW50IiwiZHgiLCJkeSIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJkV2lkdGgiLCJkSGVpZ2h0Iiwic3giLCJzeSIsInNXaWR0aCIsInNIZWlnaHQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInJlY2FsY3VsYXRlRnJhbWVzIiwieEZyYW1lc0NvdW50IiwieUZyYW1lc0NvdW50IiwiY3VycmVudFhGcmFtZSIsImN1cnJlbnRZRnJhbWUiLCJmcmFtZSIsImZyYW1lc0NvdW50IiwiZ2V0RnJhbWVzQ291bnQiLCJmcmFtZUNvdW50IiwieEZyYW1lQ291bnQiLCJnZXRYRnJhbWVzQ291bnQiLCJjZWlsIiwid2lkdGhPZk9uZUxpbmUiLCJnZXRZRnJhbWVzQ291bnQiLCJuZXdXaWR0aCIsImxpbmVzQ291bnQiLCJkcmF3SW1hZ2UiLCJCdXR0b25fQnV0dG9uIiwiVGV4dElucHV0TW9kYWxXaW5kb3dfVGV4dElucHV0TW9kYWxXaW5kb3ciLCJkZXNjcmlwdGlvblRleHQiLCJoYWxmV2lkdGgiLCJoYWxmSGVpZ2h0IiwiaGFsZkRlc2NyaXB0aW9uV2lkdGgiLCJoYWxmVXNlcklucHV0V2lkdGgiLCJvbmVHbHlwaFdpZHRoIiwiZGVzY3JpcHRpb24iLCJ1c2VySW5wdXQiLCJlbnRlckJ1dHRvbiIsInNldFRleHRDb2xvciIsInNldENvbG9yIiwiZGVzY3JpcHRpb25LZXkiLCJ1c2VySW5wdXRLZXkiLCJidXR0b25LZXkiLCJnZXRDaGlsZENvbXBvbmVudCIsIk1hZ2ljU2VsZWN0aW5nTW9kYWxXaW5kb3dfTWFnaWNTZWxlY3RpbmdNb2RhbFdpbmRvdyIsIm1hZ2ljcyIsImltYWdlcyIsImJhY2siLCJiYWNrV2lkdGgiLCJiYWNrSGVpZ2h0IiwiYmFja0ltYWdlQ29tcG9uZW50Iiwic2V0QmFja2dyb3VuZEltYWdlIiwibWFnaWMiLCJncmFwaGljQ29tcG9uZW50IiwiZ2V0R3JhcGhpY0NvbXBvbmVudCIsIm1hZ2ljTmFtZSIsImdldE5hbWUiLCJtYWdpY05hbWVXaWR0aCIsIm1hZ2ljV2l0aE5hbWUiLCJtYWdpY05hbWVMYWJlbCIsImFsaWduQ2VudGVyIiwibWFnaWNHcmFwaGljQ29tcG9uZW50IiwiUHJvbWlzZSIsInJlc29sdmUiLCJhZGRNYWdpY1NlbGVjdGluZ0V2ZW50TGlzdGVuZXIiLCJmaW5kTWFnaWNCeUdyYXBoaWNDb21wb25lbnQiLCJQcm9ncmVzc0Jhcl9Qcm9ncmVzc0JhciIsIm1pblZhbHVlIiwibWF4VmFsdWUiLCJpbml0aWFsVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJvbmVJblBpeGVsIiwiYmFyQ29tcG9uZW50IiwiYmFyQ29tcG9uZW50S2V5IiwibGFiZWxUZXh0IiwibGFiZWxDb21wb25lbnRLZXkiLCJiYXIiLCJzZXRUZXh0IiwiaGVpZ2h0TGFiZWwiLCJTdGF0dXNCYXJfU3RhdHVzQmFyIiwiZW5lbXlJbmZvV2luZG93S2V5IiwicGxheWVySW5mb1dpbmRvd0tleSIsImxlZnRJbWciLCJsZWZ0V2lkdGgiLCJsZWZ0SGVpZ2h0IiwicmlnaHRXaWR0aCIsInJpZ2h0SGVpZ2h0IiwiYmFja0ltZ0NvbXBvbmVudCIsImxlZnRJbWdDb21wb25lbnQiLCJyaWdodEltZ0NvbXBvbmVudCIsImxlZnRDb21wb25lbnQiLCJyaWdodENvbXBvbmVudCIsImVuZW15SW5mb1dpbmRvdyIsImVuZW15IiwicmVtb3ZlQ29tcG9uZW50IiwicGxheWVySW5mb1dpbmRvdyIsInBsYXllciIsImhlYWx0aEJhcktleSIsInNldFZhbHVlIiwibmFtZUxhYmVsS2V5IiwibmFtZVdpZHRoIiwiQ2hhcmFjdGVySW5mb1dpbmRvd19DaGFyYWN0ZXJJbmZvV2luZG93IiwiY2hhcmFjdGVyTmFtZSIsIm1pbkhQIiwibWF4SFAiLCJpbml0aWFsSFAiLCJuYW1lTGFiZWwiLCJoZWFsdGhCYXIiLCJpbWdXaWR0aCIsImltZ0hlaWdodCIsIlRhYmxlX1RhYmxlIiwicm93Q291bnQiLCJjb2x1bW5Db3VudCIsImNlbGxXaWR0aCIsImNlbGxIZWlnaHQiLCJ0b3RhbFJvd3NIZWlnaHQiLCJ0b3RhbFJvd3NXaWR0aCIsImNlbGwiLCJnZXRGaWxlU2l6ZSIsInVybCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJET05FIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJzZW5kIiwiZ2V0RmlsZUJsb2IiLCJvbnByb2dyZXNzIiwiaWRlbnRpZmllciIsInhtbEhUVFAiLCJyZXNwb25zZVR5cGUiLCJwcmV2VmFsdWUiLCJvbmxvYWQiLCJibG9iIiwiQmxvYiIsInJlc3BvbnNlIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibG9hZGVkIiwiY3JlYXRlRmlsZVByb21pc2UiLCJmaWxlIiwic3JjRWxlbWVudCIsIkxvYWRNYW5hZ2VyX0xvYWRNYW5hZ2VyIiwidG90YWxTaXplIiwiY3VycmVudExvYWRlZFNpemUiLCJpbWFnZVVybCIsImxvYWRlZEltYWdlcyIsInNvdW5kVXJsIiwibG9hZGVkU291bmQiLCJ1cmxPYmplY3QiLCJuYW1lT2JqIiwic291bmRVcmxBcnJheSIsInNvdW5kIiwiaW1hZ2VVcmxBcnJheSIsInNvdW5kTmFtZSIsImltYWdlTmFtZSIsInVybE5hbWUiLCJ1cmxzIiwicHJvbWlzZUFyciIsImltYWdlQ291bnQiLCJhc3NldHNTaXplIiwiYWxsIiwicmVkdWNlIiwicHJldiIsInNpemUiLCJpbWFnZXNTaXplIiwic291bmRTaXplIiwib25wcm9ncmVzc0NhbGxiYWNrIiwibG9hZFByb2dyZXNzIiwicGVyY2VudCIsImlkIiwiYmxvYnMiLCJpbWdQcm9taXNlIiwibWFwIiwiaW1nIiwiSW1hZ2UiLCJzcmMiLCJzb3VuZFByb21pc2UiLCJBdWRpbyIsImFzc2V0c1Byb21pc2UiLCJhc3NldHMiLCJncm91cGVkIiwiayIsImltYWdlc05hbWUiLCJTdG9yYWdlTWFuYWdlciIsInJlY29yZHMiLCJsb2NhbFN0b3JhZ2UiLCJtYXRjaCIsInBhcnNlUmVjb3JkcyIsIm1vbnN0ZXJLaWxsZWQiLCJzb3J0IiwicmVjb3JkIiwic2V0SXRlbSIsImdldEl0ZW0iLCJyZWNvcmRPYmplY3QiLCJJTUFHRSIsIkhFQURfSU1BR0VTIiwiQk9EWV9JTUFHRVMiLCJMRUZUX0FSTV9JTUFHRVMiLCJSSUdIVF9BUk1fSU1BR0VTIiwiTEVHX0lNQUdFUyIsIkJBQ0tHUk9VTkRfSU1BR0VTIiwiTUFJTl9DSEFSIiwiTUFHSUMiLCJVSSIsIlRBU0siLCJOQU1FIiwiU09VTkQiLCJNb25zdGVyR3JhcGhpY0NvbXBvbmVudF9Nb25zdGVyR3JhcGhpY0NvbXBvbmVudCIsImhlYWRJbWFnZSIsImxlZnRBcm1JbWFnZSIsInJpZ2h0SW1hZ2UiLCJib2R5SW1hZ2UiLCJsZWdJbWFnZSIsImhlYWROYXR1cmFsV2lkdGgiLCJoZWFkTmF0dXJhbEhlaWdodCIsImJvZHlOYXR1cmFsV2lkdGgiLCJib2R5TmF0dXJhbEhlaWdodCIsImxlZnROYXR1cmFsV2lkdGgiLCJsZWZ0TmF0dXJhbEhlaWdodCIsInJpZ2h0TmF0dXJhbFdpZHRoIiwicmlnaHROYXR1cmFsSGVpZ2h0IiwibGVnTmF0dXJhbFdpZHRoIiwibGVnTmF0dXJhbEhlaWdodCIsImJvZHlDb21wb25lbnQiLCJoZWFkQ29tcG9uZW50IiwibGVnQ29tcG9uZW50IiwibGVmdEFybUNvbXBvbmVudCIsInJpZ2h0QXJtQ29tcG9uZW50IiwiQ2hhcmFjdGVyIiwiY3VycmVudEhQIiwiaHBDaGFuZ2VMaXN0ZW5lcnMiLCJjaGFyYWN0ZXIiLCJhdHRhY2siLCJ0YWtlQXR0YWNrIiwiZGFtYWdlIiwibGlzdGVuZXIiLCJhZGplY3RpdmUiLCJyYWNlIiwiTW9uc3RlckZhY3RvcnlfbmFtZSIsIk1vbnN0ZXJGYWN0b3J5X01vbnN0ZXJGYWN0b3J5IiwiaGVhZEltZ3MiLCJsZWZ0QXJtSW1ncyIsInJpZ2h0QXJtSW1ncyIsImJvZHlJbWdzIiwibGVnSW1ncyIsInJhbmQiLCJyYW5kb20iLCJoZWFkSW5kZXgiLCJsZWZ0QXJtSW5kZXgiLCJyaWdodEFybUluZGV4IiwiYm9keUluZGV4IiwibGVnSW5kZXgiLCJtb25zdGVyR3JhcGhpYyIsIm1vbnN0ZXJXaWR0aCIsIm1vbnN0ZXJIZWlnaHQiLCJmaXJzdE5hbWUiLCJzZWNvbmROYW1lIiwidGhpcmROYW1lIiwiZGljdGlvbmFyeV9uYW1lVGFza01hcCIsIm5hbWVzIiwiVGFza01vZGFsV2luZG93X1Rhc2tNb2RhbFdpbmRvdyIsImFkZGl0aW9uYWxSZXNvdXJjZXMiLCJ0YXNrRGVzY3JpcHRpb24iLCJtb2RhbFdpbmRvd0ltYWdlIiwibW9kYWxXaWR0aCIsIm1vZGFsSGVpZ2h0Iiwib2tCdXR0b25JbWFnZSIsIm9rQnV0dG9uV2lkdGgiLCJva0J1dHRvbkhlaWdodCIsImFkZEJ1dHRvbkV2ZW50TGlzdGVuZXIiLCJhbnN3ZXJJc1JpZ2h0Iiwib3BlcmF0aW9ucyIsImNoYXJQcmVzZW50YXRpb24iLCJwZXJmb3JtIiwiZmlyc3QiLCJzZWNvbmQiLCJkaWN0aW9uYXJ5X2RpY3Rpb25hcnkiLCJ3b3JkIiwiU3BlZWNoUmVjb2duaXRpb24iLCJ3ZWJraXRTcGVlY2hSZWNvZ25pdGlvbiIsIkNoYXJ0X0NoYXJ0IiwiY2VsbENvdW50Iiwib3JpZ2luQ29vcmQiLCJ4QXhpc0Nvb3JkIiwieUF4aXNDb29yZCIsImxhc3RDZWxsWEF4aXNDb29yZCIsImxhc3RDZWxsWUF4aXNDb29yZCIsInhBeGlzQXJyb3ciLCJsZWZ0UG9pbnQiLCJyaWdodFBvaW50IiwieUF4aXNBcnJvdyIsInhBeGlzV2lkdGgiLCJ5QXhpc1dpZHRoIiwib25lQ2VsbFgiLCJvbmVDZWxsWSIsInBvaW50IiwiaGFuZGxlQ2xpY2siLCJnZXRBYnNvbHV0ZUNvb3JkIiwibW91c2VUb3AiLCJtb3VzZUxlZnQiLCJyZWxhdGl2ZU1vdXNlVG9wIiwicmVsYXRpdmVNb3VzZUxlZnQiLCJzZXRQb2ludCIsIm9yaWdpblgiLCJvcmlnaW5ZIiwibGFzdFRlbkNlbGxZIiwibGFzdFRlbkNlbGxYIiwiYXJjIiwicG9pbnRDb29yZCIsIlBJIiwiTmFtZVRhc2tNb2RhbFdpbmRvd19OYW1lVGFza01vZGFsV2luZG93IiwidGV4dEZpZWxkSW1hZ2UiLCJ0ZXh0RmllbGRXaWR0aCIsInRleHRGaWVsZEhlaWdodCIsInRhc2tJbWFnZSIsIm5hbWVJbWFnZSIsInRhc2tJbWFnZVdpZHRoIiwidGFza0ltYWdlSGVpZ2h0IiwiYW5zd2VyIiwiYW5zd2VyS2V5Iiwib2tCdXR0b25Ub3AiLCJnZXRPa0J1dHRvbkNvbXBvbmVudCIsImRlc2NyaXB0aW9uQm90dG9tIiwiZGVzY3JpcHRpb25MZWZ0IiwiZ2V0VGFza0Rlc2NyaXB0aW9uQ29tcG9uZW50IiwicmF0aW9uIiwidGFza0ltYWdlV2lkdGhQcm9wIiwidGFza0ltYWdlSGVpZ2h0UHJvcCIsIm1heFRhc2tJbWFnZVdpZHRoIiwibWF4VGFza0ltYWdlSGVpZ2h0IiwidGFza0ltYWdlS2V5IiwidGFza0ltYWdlQ29tcG9uZW50IiwiaW1hZ2VOYW1lcyIsImFkZGl0aW9uYWwiLCJ0YXNrTmFtZXMiLCJnZXRUZXh0IiwidHJpbSIsInRvTG93ZXJDYXNlIiwiY29uY2x1c2lvbiIsInRhc2tzIiwid29yZE9iaiIsImhhbGZFeHByZXNzaW9uV2lkdGgiLCJleHByZXNzaW9uIiwiZXhwcmVzc2lvbktleSIsIm9wZXJhdGlvbiIsImxpbWl0IiwiaGFsZkFuc3dlcldpZHRoIiwiaGFsZkV4cHJlc3Npb25XaXRoQW5zd2VyIiwidGFza0Rlc2NyaXB0aW9uQm91bmRpbmdCb3giLCJva0J1dHRvbkJvdW5kaW5nQm94IiwiY2hhcnRCb3VuZGluZ0NsaWVudEJveCIsImNoYXJ0S2V5IiwiY2hhcnRDb21wb25lbnQiLCJnZXRDaGFydENvbXBvbmVudCIsImdldFBvaW50IiwibnVtYmVyVG9Db252ZXJ0IiwidG9TdHJpbmciLCJtaWNyb0J1dHRvbkltYWdlIiwibWljcm9CdXR0b25XaWR0aCIsIm1pY3JvQnV0dG9uSGVpZ2h0IiwicmVjb2duaXRpb24iLCJsYW5nIiwiaW50ZXJpbVJlc3VsdHMiLCJtYXhBbHRlcm5hdGl2ZXMiLCJtaWNyb0J1dHRvbiIsIm1pY3JvQnV0dG9uS2V5IiwiaXNXb3JraW5nIiwic3RvcCIsInNldEZyYW1lIiwic3RhcnQiLCJvbnJlc3VsdCIsInJlc3VsdHMiLCJ0cmFuc2NyaXB0Iiwib25zcGVlY2hlbmQiLCJvbmVycm9yIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiVGFza0ZhY3RvcnlfVGFza0ZhY3RvcnkiLCJ1aUltYWdlcyIsInRhc2tJbWFnZXMiLCJ0YXNrQ29uc3RydWN0b3IiLCJNYWdpYyIsIk1hZ2ljQXJyb3dfTWFnaWNBcnJvdyIsImF0dGFja0FuaW1hdGlvbnMiLCJjaGFyYWN0ZXJMZWZ0IiwiY2hhcmFjdGVyV2lkdGgiLCJkaWYiLCJzZXRBbmltYXRpb24iLCJpbml0aWFsUHJvcGVydGllcyIsIm1vdmluZ1Byb21pc2UiLCJyZW1vdmVTY2VuZSIsImFkZFNjZW5lIiwicGxheSIsImF0dGFja1Byb21pc2UiLCJJbXBsb3Npb25fSW1wbG9zaW9uIiwiTWFnaWNHcmFwaGljQ29tcG9uZW50X01hZ2ljR3JhcGhpY0NvbXBvbmVudCIsInNjYWxlIiwibWFnaWNJbWciLCJzY2FsZWRXaWR0aCIsInNjYWxlZEhlaWdodCIsIk1hZ2ljRmFjdG9yeV9NYWdpY0ZhY3RvcnkiLCJmb3JFbmVteSIsIm1hZ2ljQXJyb3ciLCJtb3ZpbmdBbmltYXRpb25JbWciLCJibG93QW5pbWF0aW9uSW1nIiwibWFnaWNNb3ZpbmdBbmltYXRpb24iLCJtb3ZpbmdBbmltYXRpb24iLCJtYWdpY0Jsb3dBbmltYXRpb24iLCJhbmltYXRpb24iLCJpbXBsb3Npb24iLCJQbGF5ZXJHcmFwY2hpY0NvbXBvbmVudF9Nb25zdGVyR3JhcGhpY0NvbXBvbmVudCIsImNoYXJhY3RlckltZyIsImJhY2tncm91bmRJbWdzS2V5IiwibWFpbkNoYXJJbWdzS2V5IiwiaGVhZEltZ3NLZXkiLCJib2R5SW1nc0tleSIsImxlZnRBcm1JbWdzS2V5IiwicmlnaHRBcm1JbWdzS2V5IiwibGVnSW1nc0tleSIsIm1hZ2ljSW1nc0tleSIsInVpSW1nc0tleSIsInRhc2tJbWdzS2V5IiwibWFnaWNTb3VuZEtleSIsInN0YXR1c0JhcktleSIsIm1vbnN0ZXJLaWxsQ291bnQiLCJsb2FkTWFuYWdlciIsInN0b3JhZ2VNYW5hZ2VyIiwiZXZlbnRRdWV1ZSIsImJhY2tncm91bmQiLCJpbml0IiwibWFpbiIsImxvYWRpbmdTY3JlZW4iLCJzaG93TG9hZGluZ1NjcmVlbiIsImxvYWRpbmdQcm9ncmVzc0JhciIsImdldExvYWRpbmdQcm9ncmVzc0JhciIsImluaXRMb2FkaW5nUGF0aCIsImNhbGN1bGF0ZVRvdGFsU2l6ZSIsImxvYWQiLCJsb2FkZWRQZXJjZW50YWdlIiwiZ2V0SW1hZ2VzQnlOYW1lIiwic2V0RXZlbnRMaXN0ZW5lcnNUb0NhbnZhcyIsImhlYWRzIiwiYm9kaWVzIiwibGVmdEFybXMiLCJyaWdodEFybXMiLCJsZWdzIiwidGFza0ZhY3RvcnkiLCJtYWdpY0ZhY3RvcnkiLCJtb25zdGVyRmFjdG9yeSIsImFkZE1hZ2ljQXNzZXRzIiwiZ2V0U291bmRCeU5hbWUiLCJzZXRVcFVJIiwic3RhdHVzQmFySW1nIiwic3RhdHVzQmFySW1nT2JnIiwic3RhdHVzQmFyIiwiaW5mb1dpbmRvd0ltYWdlIiwibW9uc3RlckluZm9XaW5kb3ciLCJzZXRQbGF5ZXJJbmZvV2luZG93Iiwic2V0RW5lbXlJbmZvV2luZG93IiwiYWRkIiwibW9kYWxXaW5kb3ciLCJzaG93TmFtZUVudGVyIiwiZ2V0SW5wdXRVc2VyIiwiZ2V0SHRtbCIsIm1haW5Mb2dpYyIsImFkZFVJIiwiYWRkVXJsIiwic3BlbGxTZWxJbWciLCJtYWluQ2hhciIsIm1haW5DaGFyR3JhcGhpYyIsInBsYXllcldpZHRoIiwicGxheWVySGVpZ2h0IiwibW9uc3RlciIsImNyZWF0ZU1vbnN0ZXIiLCJzZXRFbmVteSIsImFkZE1hZ2ljIiwiY3JlYXRlTWFnaWNBcnJvdyIsImNyZWF0ZUltcGxvc2lvbkFycm93IiwibW9uc3RlcktpbGxlZENvdW50Iiwic2V0UGxheWVyIiwiaXNBbGl2ZSIsIm1hZ2ljU2VsZWN0aW5nIiwiZ2V0TWFnaWNzIiwic2V0T3ZlcmZsb3ciLCJzZWxlY3RNYWdpYyIsInRhc2tXaW5kb3ciLCJjcmVhdGVUYXNrIiwiYW5zd2VyT3V0Y29tZSIsImdldFJlc3VsdCIsInNob3dSZXN1bHRUYWJsZSIsInByb2dyZXNzQmFyQmFja2dyb3VuZCIsInByb2dyZXNzQmFyQmFja2dyb3VuZFdpZHRoIiwicHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kSGVpZ2h0IiwicHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kQ29tcG9uZW50IiwibG9hZGluZ1Byb2dyZXNzQmFyQmFja2dyb3VuZENvbXBvbmVudCIsImdldFRleHRDb21wb25lbnQiLCJnZXRJbnB1dFVzZXJDb21wb25lbnQiLCJnZXREZXNjcmlwdGlvbkNvbXBvbmVudCIsImtpbGxlZE1vbnN0ZXIiLCJ0YWJsZUltZyIsInJlbG9hZEJ1dHRvbkltZyIsInRhYmxlV2lkdGgiLCJ0YWJsZUhlaWdodCIsInRhYmxlSW1hZ2VDb21wb25lbnQiLCJyZWxvYWRCdXR0b25XaWR0aCIsInJlbG9hZEJ1dHRvbkhlaWdodCIsInJlbG9hZEJ1dHRvbkltYWdlQ29tcG9uZW50Iiwic2F2ZVJlc3VsdCIsImdldFNvcnRlZFJlY29yZHMiLCJyZWNvcmRUYWJsZSIsImZpcnN0Q29sdW1uTmFtZSIsInNlY29uZENvbHVtbk5hbWUiLCJzZXRGb250U2l6ZSIsImdldFRhYmxlQ29tcG9uZW50IiwibW9uc3RlcktpbGxlZExhYmVsIiwidG9wVGFibGUiLCJyaWdodFRhYmxlIiwicmVzdGFydEJ1dHRvbiIsImRyb3BDaGlsZHJlbiIsInNldFBsYXllckluZm8iLCJnZXRDdXJyZW50SFAiLCJwbGF5ZXJHcmFwaGljQ29tcG9uZW50IiwiZ2V0UGxheWVySW5mb1dpbmRvdyIsImdldEhlYWx0aEJhciIsImFkZEhQQ2hhbmdlTGlzdGVuZXIiLCJzZXRFbmVteUluZm8iLCJlbmVteUdyYXBoaWNDb21wb25lbnQiLCJnZXRFbmVteUluZm9XaW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJwcmV2VGltZSIsInVwZGF0ZSIsInJlbmRlciIsImdldE5leHQiLCJoYW5kbGVFdmVudCIsInRpbWVTdGFtcCJdLCJtYXBwaW5ncyI6ImFBQ0EsU0FBQUEsRUFBQUMsR0FRQSxJQVBBLElBTUFDLEVBQUFDLEVBTkFDLEVBQUFILEVBQUEsR0FDQUksRUFBQUosRUFBQSxHQUNBSyxFQUFBTCxFQUFBLEdBSUFNLEVBQUEsRUFBQUMsS0FDUUQsRUFBQUgsRUFBQUssT0FBb0JGLElBQzVCSixFQUFBQyxFQUFBRyxHQUNBRyxFQUFBUCxJQUNBSyxFQUFBRyxLQUFBRCxFQUFBUCxHQUFBLElBRUFPLEVBQUFQLEdBQUEsRUFFQSxJQUFBRCxLQUFBRyxFQUNBTyxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBVixFQUFBSCxLQUNBYyxFQUFBZCxHQUFBRyxFQUFBSCxJQUtBLElBRkFlLEtBQUFoQixHQUVBTyxFQUFBQyxRQUNBRCxFQUFBVSxPQUFBVixHQU9BLE9BSEFXLEVBQUFSLEtBQUFTLE1BQUFELEVBQUFiLE9BR0FlLElBRUEsU0FBQUEsSUFFQSxJQURBLElBQUFDLEVBQ0FmLEVBQUEsRUFBaUJBLEVBQUFZLEVBQUFWLE9BQTRCRixJQUFBLENBRzdDLElBRkEsSUFBQWdCLEVBQUFKLEVBQUFaLEdBQ0FpQixHQUFBLEVBQ0FDLEVBQUEsRUFBa0JBLEVBQUFGLEVBQUFkLE9BQTJCZ0IsSUFBQSxDQUM3QyxJQUFBQyxFQUFBSCxFQUFBRSxHQUNBLElBQUFmLEVBQUFnQixLQUFBRixHQUFBLEdBRUFBLElBQ0FMLEVBQUFRLE9BQUFwQixJQUFBLEdBQ0FlLEVBQUFNLElBQUFDLEVBQUFOLEVBQUEsS0FHQSxPQUFBRCxFQUlBLElBQUFRLEtBS0FwQixHQUNBcUIsRUFBQSxHQUdBWixLQUdBLFNBQUFTLEVBQUExQixHQUdBLEdBQUE0QixFQUFBNUIsR0FDQSxPQUFBNEIsRUFBQTVCLEdBQUE4QixRQUdBLElBQUFDLEVBQUFILEVBQUE1QixJQUNBSyxFQUFBTCxFQUNB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TyxRQUFBLFdBQ0FHLFNBQ0E3RCxJQUFBMEosRUFBQTFKLFNBS0FjLEtBQUFjLE9BQUF3c0IsVUFBQXhtQixpQkFBQSxZQUFBOEIsSUFDQTVJLEtBQUFrckIsV0FBQWdDLEtBQ0F2cEIsS0FBQTdCLEVBQUFDLE1BQUFDLFdBQ0FZLFFBQUEsUUFDQUcsU0FDQUMsWUFDQWlCLElBQUEyRSxFQUFBZ0ksUUFDQTFNLEtBQUEwRSxFQUFBK0gsY0FPQTlRLEtBQUF5RixHQUNBaXNCLHNCQUFBdnhCLEtBQUFxckIsV0FFQTlxQixJQUFBK0UsU0FDQS9FLElBQUFQLEtBQUF3eEIsV0FDQXh4QixLQUFBd3hCLFNBQUFsc0IsR0FHQXRGLEtBQUF5eEIsU0FFQXp4QixLQUFBMHhCLE9BQUFwc0IsRUFBQXRGLEtBQUF3eEIsVUFFQXh4QixLQUFBd3hCLFNBQUFsc0IsR0FJQXpGLFNBQ0EsS0FBQUcsS0FBQWtyQixXQUFBcnBCLFdBQUEsQ0FDQSxNQUFBRCxFQUFBNUIsS0FBQWtyQixXQUFBeUcsVUFFQTN4QixLQUFBWSxHQUFBZ3hCLFlBQUFod0IsSUFJQS9CLE9BQUFneUIsR0FDQTd4QixLQUFBYyxPQUFBUyxLQUFBc3dCIiwiZmlsZSI6Im1haW4uN2VhZjhmYWY5ZWY1NTEyZDNhYjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiByZXN1bHQ7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHQxOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFsxLDBdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzIHtcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuaHRtbENvbXBvbmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICB0aGlzLmh0bWxDb21wb25lbnQuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIDApO1xuXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuaHRtbENvbXBvbmVudC5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3aWR0aCA9IDEzNjY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhlaWdodCA9IDYzNTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuaHRtbENvbXBvbmVudCk7XG5cbiAgICAgICAgdGhpcy5zY2VuZXMgPSBbXTtcbiAgICAgICAgdGhpcy51aSA9IFtdO1xuICAgIH1cblxuICAgIGdldEh0bWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0bWxDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgZ2V0Q29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dDtcbiAgICB9XG5cbiAgICBzZXRTaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB0aGlzLmh0bWxDb21wb25lbnQuc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XG4gICAgICAgIHRoaXMuaHRtbENvbXBvbmVudC5zdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xuXG4gICAgICAgIHRoaXMuY29udGV4dC5jYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5jb250ZXh0LmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgY2xlYXIoY29sb3IgPSAnIzAwMDAwMCcpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIH1cblxuICAgIGFkZFNjZW5lKHNjZW5lKSB7XG4gICAgICAgIHRoaXMuc2NlbmVzLnB1c2goc2NlbmUpO1xuICAgIH1cblxuICAgIGFkZFVJKHVpKSB7XG4gICAgICAgIHRoaXMudWkucHVzaCh1aSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlU2NlbmUoc2NlbmUpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnNjZW5lcy5pbmRleE9mKHNjZW5lKTtcblxuICAgICAgICBpZiAoKH5pbmRleCkgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2NlbmVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXNldFNjZW5lcygpIHtcbiAgICAgICAgdGhpcy5zY2VuZXMgPSBbXTtcbiAgICB9XG5cbiAgICBkcmF3KGVsYXBzZVRpbWUpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuXG4gICAgICAgIGZvciAobGV0IG8gb2YgdGhpcy5zY2VuZXMpIHtcbiAgICAgICAgICAgIG8uZHJhdyh0aGlzLmNvbnRleHQsIGVsYXBzZVRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgbyBvZiB0aGlzLnVpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpIG9mIG8udWlDb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgaS5kcmF3KHRoaXMuY29udGV4dCwgZWxhcHNlVGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudFF1ZXVlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuXG4gICAgICAgIHRoaXMucXVldWVJbmRleCA9IDA7XG4gICAgfVxuXG4gICAgYWRkKGV2ZW50KSB7XG4gICAgICAgIHRoaXMucXVldWUucHVzaChldmVudCk7XG4gICAgfVxuXG4gICAgZ2V0TmV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMucXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnF1ZXVlSW5kZXggPCB0aGlzLnF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLnF1ZXVlW3RoaXMucXVldWVJbmRleF07XG4gICAgICAgICAgICB0aGlzLnF1ZXVlSW5kZXggKz0gMTtcbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucXVldWVJbmRleCA9IDA7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBoYXNOZXh0KCkge1xuICAgICAgICBjb25zdCBoYXNOZXh0ID0gISEodGhpcy5xdWV1ZS5sZW5ndGggLSB0aGlzLnF1ZXVlSW5kZXgpO1xuXG4gICAgICAgIGlmICghaGFzTmV4dCAmJiB0aGlzLnF1ZXVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5xdWV1ZUluZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoYXNOZXh0O1xuICAgIH1cblxuICAgIHJlbWFpbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVldWUubGVuZ3RoIC0gdGhpcy5xdWV1ZUluZGV4O1xuICAgIH1cbn1cbiIsImNvbnN0IGV2ZW50cyA9IHtcbiAgICBNT1VTRToge1xuICAgICAgICBNT1VTRV9NT1ZFOiAnbW91c2Vtb3ZlJyxcbiAgICAgICAgTU9VU0VfRU5URVI6ICdtb3VzZWVudGVyJyxcbiAgICAgICAgTU9VU0VfTEVBVkU6ICdtb3VzZWxlYXZlJyxcbiAgICAgICAgTU9VU0VfRE9XTjogJ21vdXNlZG93bicsXG4gICAgfSxcbiAgICBLRVlCT0FSRDoge1xuICAgICAgICBLRVlfUFJFU1M6ICdrZXlwcmVzcycsXG4gICAgICAgIEtFWV9ET1dOOiAna2V5ZG93bidcbiAgICB9LFxuICAgIEFOSU1BVElPTjoge1xuICAgICAgICBBTklNQVRJT05fRU5EOiAnYW5pbWF0aW9uZW5kJyxcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBldmVudHM7XG4iLCJpbXBvcnQgZXZlbnRzIGZyb20gJy4uL2V2ZW50L2V2ZW50cy9ldmVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVSSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBudWxsO1xuICAgICAgICB0aGlzLmhvdmVyZWQgPSBudWxsO1xuICAgICAgICB0aGlzLnVpQ29tcG9uZW50cyA9IFtdO1xuICAgIH1cblxuICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudHNbZXZlbnQuc3VidHlwZV0gPT09IGV2ZW50cy5NT1VTRSkge1xuICAgICAgICAgICAgZm9yIChsZXQgc2NlbmUgb2YgdGhpcy51aUNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IHNjZW5lLmNoZWNrRm9yQ29sbGlzaW9uKHsgLi4uZXZlbnQucGF5bG9hZC5tb3VzZUNvb3JkLCB3aWR0aDogMSwgaGVpZ2h0OiAxIH0pOyBcblxuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gbnVsbDtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vc3REZXB0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IC0xO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLmZvckVhY2goKHsgZGVwdGggfSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlcHRoID49IG1vc3REZXB0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vc3REZXB0aCA9IGRlcHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRzW2luZGV4XS5vO1xuICAgICAgICAgICAgICAgICAgICBldmVudC50YXJnZXQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhc0hUTUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbnZhc0hUTUwuc3R5bGUuY3Vyc29yICE9PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0hUTUwuc3R5bGUuY3Vyc29yID0gJ2F1dG8nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhvdmVyZWQgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3ZlcmVkLmhhbmRsZXJzLmhhbmRsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZXZlbnRzLk1PVVNFLk1PVVNFX0xFQVZFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcy5ob3ZlcmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvdmVyZWQuc2V0SG92ZXJlZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuaGFuZGxlcnMuaGFuZGxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBldmVudHMuTU9VU0UuTU9VU0VfRU5URVIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuaG92ZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJlZCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IGV2ZW50cy5NT1VTRS5NT1VTRV9ET1dOKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkICE9PSBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQuaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGVsZW1lbnQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuaXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5oYW5kbGVycy5oYW5kbGUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudHNbZXZlbnQuc3VidHlwZV0gPT09IGV2ZW50cy5LRVlCT0FSRCAmJiB0aGlzLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICBldmVudC50YXJnZXQgPSB0aGlzLnNlbGVjdGVkO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZC5oYW5kbGVycy5oYW5kbGUoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkKGNvbXBvbmVudCkge1xuICAgICAgICB0aGlzLnVpQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlKGNvbXBvbmVudCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMudWlDb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50KTtcblxuICAgICAgICBpZiAofmluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLnVpQ29tcG9uZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3Vyc29yIHtcbiAgICBjb25zdHJ1Y3Rvcih0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5tZXRyaWMgPSB7XG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmJsaW5rVGltZSA9IDUwMDtcbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDA7XG5cbiAgICAgICAgdGhpcy5jb2xvciA9ICcjMDAwMDAwJztcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbih0b3AsIGxlZnQpIHtcbiAgICAgICAgdGhpcy5tZXRyaWMudG9wID0gdG9wO1xuICAgICAgICB0aGlzLm1ldHJpYy5sZWZ0ID0gbGVmdDtcbiAgICB9XG5cbiAgICBzZXRDb2xvcihjb2xvciA9ICcjMDAwMDAwJykge1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgfVxuXG4gICAgZHJhdyhjb250ZXh0LCBlbGFwc2VkVGltZSkge1xuICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICBpZiAodGhpcy5lbGFwc2VkVGltZSA8IHRoaXMuYmxpbmtUaW1lKSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5zdHJva2VTdHlsZSAhPT0gdGhpcy5jb2xvcikge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8odGhpcy5tZXRyaWMubGVmdCwgdGhpcy5tZXRyaWMudG9wKTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHRoaXMubWV0cmljLmxlZnQsIHRoaXMubWV0cmljLnRvcCArIHRoaXMubWV0cmljLmhlaWdodCk7XG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbGFwc2VkVGltZSArPSBlbGFwc2VkVGltZTtcblxuICAgICAgICBpZiAodGhpcy5lbGFwc2VkVGltZSA+IHRoaXMuYmxpbmtUaW1lICogMikge1xuICAgICAgICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sbGlzaW9uIHtcbiAgICBpc0luc2lkZShmaXJzdE1ldHJpYywgc2Vjb25kTWV0cmljKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmaXJzdE1ldHJpYyk7XG5cbiAgICAgICAgaWYgKGZpcnN0TWV0cmljLmxlZnQgPCBzZWNvbmRNZXRyaWMubGVmdCArIHNlY29uZE1ldHJpYy53aWR0aCAmJlxuICAgICAgICAgICAgZmlyc3RNZXRyaWMubGVmdCArIGZpcnN0TWV0cmljLndpZHRoID4gc2Vjb25kTWV0cmljLmxlZnQgJiZcbiAgICAgICAgICAgIGZpcnN0TWV0cmljLnRvcCA8IHNlY29uZE1ldHJpYy50b3AgKyBzZWNvbmRNZXRyaWMuaGVpZ2h0ICYmXG4gICAgICAgICAgICBmaXJzdE1ldHJpYy5oZWlnaHQgKyBmaXJzdE1ldHJpYy50b3AgPiBzZWNvbmRNZXRyaWMudG9wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxufVxuIiwiaW1wb3J0IGV2ZW50cyBmcm9tICcuLi9ldmVudC9ldmVudHMvZXZlbnRzJztcblxuaW1wb3J0IHsgbWVyZ2UgfSBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRhYmxlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlZFByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgbWVyZ2UodGhpcy5hbmltYXRlZFByb3BlcnRpZXMsIGNvbXBvbmVudC5wcm9wZXJ0aWVzKTtcblxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSB7XG5cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXRBbmltYXRpb24obmFtZSwgdGltZSwgdGltZUNvdW50LCBhbmltYXRpb25GdW5jKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uc1tuYW1lXSA9IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbkZ1bmMsXG4gICAgICAgICAgICB0aW1lQ291bnQsXG4gICAgICAgICAgICB0aW1lOiB0aW1lICogMTAwMCxcbiAgICAgICAgICAgIGVsYXBzZVRpbWU6IDAsXG4gICAgICAgICAgICBhbmltYXRpb25UaW1lUGFzdDogMFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGRlbGV0ZUFuaW1hdGlvbihuYW1lKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmFuaW1hdGlvbnNbbmFtZV07XG4gICAgfVxuXG4gICAgYW5pbWF0ZShjb250ZXh0LCBjb21wb25lbnQsIGVsYXBzZVRpbWUpIHtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuYW5pbWF0aW9ucyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBhID0gdGhpcy5hbmltYXRpb25zW2tleXNbaV1dO1xuXG4gICAgICAgICAgICBhLmFuaW1hdGlvbkZ1bmMoY29udGV4dCwgY29tcG9uZW50LnByb3BlcnRpZXMsIHRoaXMuYW5pbWF0ZWRQcm9wZXJ0aWVzLCBhLmVsYXBzZVRpbWUgLyBhLnRpbWUsIGNvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIGEuZWxhcHNlVGltZSArPSBlbGFwc2VUaW1lO1xuXG4gICAgICAgICAgICBpZiAoYS5lbGFwc2VUaW1lID4gYS50aW1lKSB7XG4gICAgICAgICAgICAgICAgYS5lbGFwc2VUaW1lID0gMDtcbiAgICAgICAgICAgICAgICBhLmFuaW1hdGlvblRpbWVQYXN0ICs9IDE7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGVkUHJvcGVydGllcyA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQuaG92ZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZSh0aGlzLmFuaW1hdGVkUHJvcGVydGllcywgY29tcG9uZW50LmhvdmVyUHJvcGVydGllcyk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZXJnZSh0aGlzLmFuaW1hdGVkUHJvcGVydGllcywgY29tcG9uZW50LnByb3BlcnRpZXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhLmFuaW1hdGlvblRpbWVQYXN0ID49IGEudGltZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFuaW1hdGlvbnNba2V5c1tpXV07XG5cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmhhbmRsZXJzLmhhbmRsZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGV2ZW50cy5BTklNQVRJT04uQU5JTUFUSU9OX0VORCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnR5cGU6ICdBTklNQVRJT04nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbk5hbWU6IGtleXNbaV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCBldmVudHMgZnJvbSAnLi4vZXZlbnRzL2V2ZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV2ZW50c0hhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzW2V2ZW50cy5NT1VTRS5NT1VTRV9NT1ZFXSA9IFtdO1xuICAgICAgICB0aGlzW2V2ZW50cy5NT1VTRS5NT1VTRV9ET1dOXSA9IFtdO1xuICAgICAgICB0aGlzW2V2ZW50cy5LRVlCT0FSRC5LRVlfUFJFU1NdID0gW107XG4gICAgICAgIHRoaXNbZXZlbnRzLktFWUJPQVJELktFWV9ET1dOXSA9IFtdO1xuICAgICAgICB0aGlzW2V2ZW50cy5BTklNQVRJT04uQU5JTUFUSU9OX0VORF0gPSBbXTtcbiAgICB9XG5cbiAgICBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzW2V2ZW50LnR5cGVdO1xuXG4gICAgICAgIGlmIChoYW5kbGVycykge1xuICAgICAgICAgICAgZm9yIChsZXQgaGFuZGxlciBvZiBoYW5kbGVycykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudCkge1xuICAgICAgICBpZiAodGhpc1tuYW1lXSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXS5wdXNoKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImNvbnN0IGNvbnRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuXG5leHBvcnQgY29uc3QgZ2V0VGV4dFdpZHRoV2l0aERvbSA9ICh0ZXh0LCBmb250RmFtaWx5LCBmb250U2l6ZSkgPT4ge1xuICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICBzcGFuLmlubmVyVGV4dCA9IHRleHQ7XG4gICAgc3Bhbi5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgc3Bhbi5zdHlsZS53aGl0ZVNwYWNlID0gJ25vd3JhcCc7XG4gICAgc3Bhbi5zdHlsZS5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbiAgICBzcGFuLnN0eWxlLmZvbnRTaXplID0gZm9udFNpemU7XG5cbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNwYW4pO1xuXG4gICAgY29uc3QgdGV4dFdpZHRoID0gc3Bhbi5vZmZzZXRXaWR0aDtcblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc3Bhbik7XG5cbiAgICByZXR1cm4gdGV4dFdpZHRoO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFRleHRXaWR0aFdpdGhDYW52YXMgPSAodGV4dCwgZm9udEZhbWlseSwgZm9udFNpemUpID0+IHtcbiAgICBjb250ZXh0LmZvbnQgPSBgJHtmb250U2l6ZX1weCAke2ZvbnRGYW1pbHl9YDtcbiAgICByZXR1cm4gY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbn07XG4iLCJpbXBvcnQgeyBtZXJnZSwgdW5pcXVlSWQsIGdldCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCBDb2xsaXNpb24gZnJvbSAnLi4vLi4vQ29sbGlzaW9uL0NvbGxpc2lvbic7XG5pbXBvcnQgQW5pbWF0YWJsZSBmcm9tICcuLi8uLi9BbmltYXRpb24vQW5pbWF0YWJsZSc7XG5pbXBvcnQgRXZlbnRzSGFuZGxlciBmcm9tICcuLi8uLi9ldmVudC9FdmVudHNIYW5kbGVyL0V2ZW50c0hhbmRsZXInO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuLi8uLi9ldmVudC9ldmVudHMvZXZlbnRzJztcbmltcG9ydCBMYWJlbCBmcm9tICcuL0xhYmVsJztcblxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi9Db21wb25lbnQnO1xuaW1wb3J0IHsgZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyB9IGZyb20gJy4uLy4uL3V0aWxzL3RleHRXaWR0aCc7XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHRvcCA9IDAsIGxlZnQgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAsIHBhcmVudENvbXBvbmVudCA9IG51bGwsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5wYXJlbnRDb21wb25lbnQgPSBwYXJlbnRDb21wb25lbnQ7XG5cbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0ge307XG5cbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmRyYXdCb3JkZXIgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLm92ZXJmbG93ID0gJ3Zpc2libGUnO1xuICAgICAgICB0aGlzLmhvdmVyZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnByb3BlcnRpZXMuY29sb3IgPSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzAwMDAwMCcsXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UgPSBudWxsO1xuXG4gICAgICAgIHRoaXMucHJvcGVydGllcy50b3AgPSB0b3A7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5sZWZ0ID0gbGVmdDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmN1cnNvciA9ICdhdXRvJztcblxuICAgICAgICB0aGlzLmNvbGxpc2lvbiA9IG5ldyBDb2xsaXNpb24oKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zID0gbmV3IEFuaW1hdGFibGUodGhpcyk7XG5cbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IG5ldyBFdmVudHNIYW5kbGVyKCk7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMuTU9VU0UuTU9VU0VfTU9WRSwgdGhpcy5oYW5kbGVIb3Zlcik7XG4gICAgICAgIFxuICAgICAgICAoeyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuY29udmVydEZyb21QZXJjZW50YWdlVG9QaXhlbCh0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQpKTtcblxuICAgICAgICB0aGlzLmhvdmVyUHJvcGVydGllcyA9IHt9O1xuXG4gICAgICAgIG1lcmdlKHRoaXMuaG92ZXJQcm9wZXJ0aWVzLCB0aGlzLnByb3BlcnRpZXMpO1xuXG4gICAgICAgIHRoaXMuc2V0Qm91bmRpbmdDbGllbnRSZWN0KHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5zY3JvbGxYT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5zY3JvbGxZT2Zmc2V0ID0gMDtcblxuICAgICAgICBpZiAocGFyZW50Q29tcG9uZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuYWRkQ29tcG9uZW50KHRoaXMsIG5hbWUpO1xuICAgICAgICAgICAgbWVyZ2UodGhpcy5pbml0aWFsQm91bmRpbmdDbGllbnRSZWN0LCB0aGlzLnByb3BlcnRpZXMuYm91bmRpbmdDbGllbnRSZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbEJvdW5kaW5nQ2xpZW50UmVjdCA9IHt9O1xuICAgICAgICAgICAgbWVyZ2UodGhpcy5pbml0aWFsQm91bmRpbmdDbGllbnRSZWN0LCB0aGlzLnByb3BlcnRpZXMuYm91bmRpbmdDbGllbnRSZWN0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZXZlbnQpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGV2ZW50KVxuICAgIH1cblxuICAgIGNvbnZlcnRGcm9tUGVyY2VudGFnZVRvUGl4ZWwodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50Q29tcG9uZW50KCk7XG4gICAgICAgIGxldCBwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0O1xuICAgICAgICBjb25zdCByZWcgPSAvJS87XG4gICAgICAgIGNvbnN0IGZsb29yID0gTWF0aC5mbG9vcjtcblxuICAgICAgICBpZiAocGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICBwYXJlbnRXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICAgICAgcGFyZW50SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKHsgd2lkdGg6IHBhcmVudFdpZHRoLCBoZWlnaHQ6IHBhcmVudEhlaWdodCB9ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdG9wID09PSAnc3RyaW5nJyAmJiByZWcudGVzdCh0b3ApKSB7XG4gICAgICAgICAgICB0b3AgPSBmbG9vcihwYXJzZUZsb2F0KHRvcCkgLyAxMDAgKiBwYXJlbnRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBsZWZ0ID09PSAnc3RyaW5nJyAmJiByZWcudGVzdChsZWZ0KSkge1xuICAgICAgICAgICAgbGVmdCA9IGZsb29yKHBhcnNlRmxvYXQobGVmdCkgLyAxMDAgKiBwYXJlbnRXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHdpZHRoID09PSAnc3RyaW5nJyAmJiByZWcudGVzdCh3aWR0aCkpIHtcbiAgICAgICAgICAgIHdpZHRoID0gZmxvb3IocGFyc2VGbG9hdCh3aWR0aCkgLyAxMDAgKiBwYXJlbnRXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICh0eXBlb2YgaGVpZ2h0ID09PSAnc3RyaW5nJyAmJiByZWcudGVzdChoZWlnaHQpKSB7XG4gICAgICAgICAgICBoZWlnaHQgPSBmbG9vcihwYXJzZUZsb2F0KGhlaWdodCkgLyAxMDAgKiBwYXJlbnRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHRyYXZlcnNlKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzKTtcbiAgICB9XG5cbiAgICBhbGlnbkNlbnRlcigpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnRDb21wb25lbnQoKTtcbiAgICAgICAgbGV0IHBhcmVudFdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIGxldCBwYXJlbnRIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICAgICAgaWYgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgKHsgd2lkdGg6IHBhcmVudFdpZHRoLCBoZWlnaHQ6IHBhcmVudEhlaWdodCB9ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBsZXQgY2VudHJlZFRvcCA9IE1hdGgucm91bmQoKHBhcmVudEhlaWdodCAtIGhlaWdodCkgLyAyKTtcbiAgICAgICAgbGV0IGNlbnRyZWRMZWZ0ID0gTWF0aC5yb3VuZCgocGFyZW50V2lkdGggLSB3aWR0aCkgLyAyKTtcblxuICAgICAgICB0aGlzLnNldEJvdW5kaW5nQ2xpZW50UmVjdChjZW50cmVkVG9wLCBjZW50cmVkTGVmdCwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgc2V0QmFja2dyb3VuZEltYWdlKGltYWdlID0gbnVsbCkge1xuICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZSA9IGltYWdlO1xuXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICB0aGlzLmJhY2tncm91bmRJbWFnZS5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIGNhbGN1bGF0ZVRvdGFsV2lkdGhDb21wb25lbnQobywgc3VtUGF0aCwgc3VtICwgaW5kZXgsIHByb3ApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXQobywgcHJvcCk7XG4gICAgICAgIHN1bVBhdGhbU3RyaW5nKGluZGV4KV0gPSBzdW0gKyB2YWx1ZTtcbiAgICB9IFxuXG4gICAgaGFuZGxlSG92ZXIoZSkge1xuICAgICAgICBjb25zdCBjID0gZS50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGNhbnZhc0hUTUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKTtcbiAgICAgICAgaWYgKGNhbnZhc0hUTUwuc3R5bGUuY3Vyc29yICE9PSBjLnByb3BlcnRpZXMuY3Vyc29yKSB7XG4gICAgICAgICAgICBjYW52YXNIVE1MLnN0eWxlLmN1cnNvciA9IGMucHJvcGVydGllcy5jdXJzb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYy5ob3ZlcmVkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBjLmhvdmVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgbWVyZ2UoYy5hbmltYXRpb25zLmFuaW1hdGVkUHJvcGVydGllcywgYy5ob3ZlclByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25zLmFuaW1hdGVkUHJvcGVydGllcy5ib3VuZGluZ0NsaWVudFJlY3Q7XG4gICAgfVxuXG4gICAgZ2V0Q2xpcHBlZEJvdW5kaW5nQ2xpZW50UmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9ucy5hbmltYXRlZFByb3BlcnRpZXMuY2xpcHBlZEJvdW5kaW5nQ2xpZW50UmVjdDtcbiAgICB9XG5cbiAgICBzZXRIb3ZlcmVkKGhvdmVyZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuaG92ZXJlZCAhPT0gaG92ZXJlZCkge1xuICAgICAgICAgICAgdGhpcy5ob3ZlcmVkID0gaG92ZXJlZDtcblxuICAgICAgICAgICAgaWYgKGhvdmVyZWQpIHtcbiAgICAgICAgICAgICAgICBtZXJnZSh0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLCB0aGlzLmhvdmVyUHJvcGVydGllcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lcmdlKHRoaXMuYW5pbWF0aW9ucy5hbmltYXRlZFByb3BlcnRpZXMsIHRoaXMucHJvcGVydGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRCb3VuZGluZ0NsaWVudFJlY3QodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHByZXZCb3VuZGluZ0JveCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgbGV0IHByZXZUb3A7XG4gICAgICAgIGxldCBwcmV2TGVmdDtcbiAgICAgICAgbGV0IHByZXZXaWR0aDtcbiAgICAgICAgbGV0IHByZXZIZWlnaHQ7XG5cbiAgICAgICAgaWYgKHByZXZCb3VuZGluZ0JveCkge1xuICAgICAgICAgICAgKHsgdG9wOiBwcmV2VG9wLCBsZWZ0OiBwcmV2TGVmdCwgd2lkdGg6IHByZXZXaWR0aCwgaGVpZ2h0OiBwcmV2SGVpZ2h0IH0gPSBwcmV2Qm91bmRpbmdCb3gpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvcCA9PT0gdW5kZWZpbmVkICYmIHByZXZCb3VuZGluZ0JveCAmJiB0eXBlb2YgdG9wICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0b3AgPSBwcmV2VG9wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlZnQgPT09IHVuZGVmaW5lZCAmJiBwcmV2Qm91bmRpbmdCb3ggJiYgdHlwZW9mIGxlZnQgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGxlZnQgPSBwcmV2TGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkICYmIHByZXZCb3VuZGluZ0JveCAmJiB0eXBlb2Ygd2lkdGggIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHdpZHRoID0gcHJldldpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhlaWdodCA9PT0gdW5kZWZpbmVkICYmIHByZXZCb3VuZGluZ0JveCAmJiB0eXBlb2YgaGVpZ2h0ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBoZWlnaHQgPSBwcmV2SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnRvcCA9IHRvcDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmxlZnQgPSBsZWZ0O1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICB0aGlzLnByb3BlcnRpZXMuYm91bmRpbmdDbGllbnRSZWN0ID0ge1xuICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgcmlnaHQ6IGxlZnQgKyB3aWR0aCxcbiAgICAgICAgICAgIGJvdHRvbTogdG9wICsgaGVpZ2h0XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5hbmltYXRpb25zLmFuaW1hdGVkUHJvcGVydGllcy5ib3VuZGluZ0NsaWVudFJlY3QgPSB7fTtcbiAgICAgICAgdGhpcy5ob3ZlclByb3BlcnRpZXMuYm91bmRpbmdDbGllbnRSZWN0ID0ge307XG4gICAgICAgIG1lcmdlKHRoaXMuYW5pbWF0aW9ucy5hbmltYXRlZFByb3BlcnRpZXMuYm91bmRpbmdDbGllbnRSZWN0LCB0aGlzLnByb3BlcnRpZXMuYm91bmRpbmdDbGllbnRSZWN0KTtcbiAgICAgICAgbWVyZ2UodGhpcy5ob3ZlclByb3BlcnRpZXMuYm91bmRpbmdDbGllbnRSZWN0LCB0aGlzLnByb3BlcnRpZXMuYm91bmRpbmdDbGllbnRSZWN0KTtcbiAgICB9XG5cbiAgICBzZXRCb3VuZGluZ0NsaXBwZWRDbGllbnRSZWN0KHRvcCA9IDAsIGxlZnQgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDApIHtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmNsaXBwZWRCb3VuZGluZ0NsaWVudFJlY3QgPSB7XG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICByaWdodDogbGVmdCArIHdpZHRoLFxuICAgICAgICAgICAgYm90dG9tOiB0b3AgKyBoZWlnaHRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLmNsaXBwZWRCb3VuZGluZ0NsaWVudFJlY3QgPSB7fTtcbiAgICAgICAgdGhpcy5ob3ZlclByb3BlcnRpZXMuY2xpcHBlZEJvdW5kaW5nQ2xpZW50UmVjdCA9IHt9O1xuICAgICAgICBtZXJnZSh0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLmNsaXBwZWRCb3VuZGluZ0NsaWVudFJlY3QsIHRoaXMucHJvcGVydGllcy5jbGlwcGVkQm91bmRpbmdDbGllbnRSZWN0KTtcbiAgICAgICAgbWVyZ2UodGhpcy5ob3ZlclByb3BlcnRpZXMuY2xpcHBlZEJvdW5kaW5nQ2xpZW50UmVjdCwgdGhpcy5wcm9wZXJ0aWVzLmNsaXBwZWRCb3VuZGluZ0NsaWVudFJlY3QpO1xuICAgIH1cblxuICAgIHNldEJhY2tncm91bmRDb2xvcihjb2xvciA9ICcjMDAwMDAwJykge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuY29sb3IuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMuaG92ZXJQcm9wZXJ0aWVzLmNvbG9yLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLmNvbG9yLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgIH1cblxuICAgIHNldEJvcmRlckNvbG9yKGNvbG9yID0gJyMwMDAwMDAnKSB7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5jb2xvci5ib3JkZXJDb2xvciA9IGNvbG9yO1xuICAgICAgICB0aGlzLmhvdmVyUHJvcGVydGllcy5jb2xvci5ib3JkZXJDb2xvciA9IGNvbG9yO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLmNvbG9yLmJvcmRlckNvbG9yID0gY29sb3I7XG4gICAgfVxuXG4gICAgc2V0UGFyZW50Q29tcG9uZW50KHBhcmVudENvbXBvbmVudCkge1xuICAgICAgICB0aGlzLnBhcmVudENvbXBvbmVudCA9IHBhcmVudENvbXBvbmVudDtcblxuICAgICAgICBsZXQgeyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMucHJvcGVydGllcztcbiAgICAgICAgKHsgdG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLmNvbnZlcnRGcm9tUGVyY2VudGFnZVRvUGl4ZWwodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KSk7XG4gICAgICAgIHRoaXMuc2V0Qm91bmRpbmdDbGllbnRSZWN0KHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbEJvdW5kaW5nQ2xpZW50UmVjdCA9IHt9O1xuICAgICAgICBtZXJnZSh0aGlzLmluaXRpYWxCb3VuZGluZ0NsaWVudFJlY3QsIHRoaXMucHJvcGVydGllcy5ib3VuZGluZ0NsaWVudFJlY3QpO1xuICAgIH1cblxuICAgIHNldE92ZXJmbG93KG92ZXJmbG93KSB7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB0aGlzLmhvdmVyUHJvcGVydGllcy5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG5cbiAgICAgICAgaWYgKG92ZXJmbG93ID09PSAnb3ZlcmZsb3cnKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUNsaXBwZWRTaXplKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3ZlcmZsb3cgPT09ICdzY3JvbGwnKSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbEhlaWdodCA9IHRoaXMuY2FsY3VsYXRlVG90YWxIZWlnaHRDb21wb25lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsV2lkdGggPSB0aGlzLmNhbGN1bGF0ZVRvdGFsV2lkdGhDb21wb25lbnQoKTtcblxuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICBpZiAodG90YWxIZWlnaHQgPiBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFkgPSBuZXcgU2Nyb2xsQmFyKCd2ZXJ0aWNhbCcsIHRvdGFsSGVpZ2h0LCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRvdGFsV2lkdGggPiB3aWR0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsWCA9IG5ldyBTY3JvbGxCYXIoJ2hvcml6b250YWwnLCB0b3RhbFdpZHRoLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhbGN1bGF0ZUNsaXBwZWRTaXplKCkge1xuICAgICAgICB0aGlzLnRyYXZlcnNlKChvKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBvLmdldFBhcmVudENvbXBvbmVudCgpO1xuXG4gICAgICAgICAgICBsZXQgeyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQgfSA9IG8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRCb3ggPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZWZ0IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b3AgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50Qm94LndpZHRoIDwgcmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gcGFyZW50Qm94LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50Qm94LmhlaWdodCA8IGJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvcCA+IHBhcmVudEJveC50b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b20gPSB0b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdHRvbSA9IHBhcmVudEJveC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgby5zZXRCb3VuZGluZ0NsaXBwZWRDbGllbnRSZWN0KHRvcCwgbGVmdCwgTWF0aC5hYnMocmlnaHQgLSBsZWZ0KSwgTWF0aC5hYnMoYm90dG9tIC0gdG9wKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFBhcmVudENvbXBvbmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Q29tcG9uZW50O1xuICAgIH1cblxuICAgIGdldEJhY2tncm91bmRJbWFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFja2dyb3VuZEltYWdlO1xuICAgIH1cblxuICAgIGdldE92ZXJmbG93KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLm92ZXJmbG93O1xuICAgIH1cblxuICAgIGdldEFic29sdXRlQ29vcmQoKSB7XG4gICAgICAgIGxldCB7IHRvcCwgbGVmdCB9ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnRDb21wb25lbnQoKTtcblxuICAgICAgICB3aGlsZSAocGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB7IHRvcDogcGFyZW50VG9wLCBsZWZ0OiBwYXJlbnRMZWZ0IH0gPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIHRvcCArPSBwYXJlbnRUb3A7XG4gICAgICAgICAgICBsZWZ0ICs9IHBhcmVudExlZnQ7XG5cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5nZXRQYXJlbnRDb21wb25lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICBsZWZ0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkQ29tcG9uZW50KGNvbXBvbmVudCkge1xuXG4gICAgfVxuXG4gICAgcmVtb3ZlQ29tcG9uZW50KGNvbXBvbmVudCkge1xuXG4gICAgfVxuXG4gICAgc2V0Q29udGV4dFByb3BlcnRpZXMoY29udGV4dCwgZWxhcHNlVGltZSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZShjb250ZXh0LCB0aGlzLCBlbGFwc2VUaW1lKTtcbiAgICB9XG5cbiAgICBwYWludENvbXBvbmVudChjb250ZXh0LCBlbGFwc2VUaW1lKSB7XG4gICAgICAgIGxldCB7IHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbGV0IGNvbG9yID0gdGhpcy5hbmltYXRpb25zLmFuaW1hdGVkUHJvcGVydGllcy5jb2xvcjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuZHJhd0JvcmRlcikge1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yLmJvcmRlckNvbG9yO1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2VSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMub3ZlcmZsb3cgPT09ICdzY3JvbGwnIHx8IHRoaXMucHJvcGVydGllcy5vdmVyZmxvdyA9PT0gJ292ZXJmbG93Jykge1xuICAgICAgICAgICAgY29uc3QgcGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgICAgICAgICAgIHBhdGgucmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgY29udGV4dC5jbGlwKHBhdGgsIFwibm9uemVyb1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmJhY2tncm91bmRJbWFnZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UuZHJhdyhjb250ZXh0LCBsZWZ0LCB0b3ApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhd0NvbXBvbmVudChjb250ZXh0LCBlbGFwc2VUaW1lKSB7XG4gICAgICAgIHRoaXMuc2V0Q29udGV4dFByb3BlcnRpZXMoY29udGV4dCwgZWxhcHNlVGltZSk7XG4gICAgICAgIHRoaXMucGFpbnRDb21wb25lbnQoY29udGV4dCwgZWxhcHNlVGltZSk7XG4gICAgfVxuXG4gICAgZHJhdyhjb250ZXh0LCBlbGFwc2VUaW1lKSB7XG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnRDb21wb25lbnQoKTtcblxuICAgICAgICBpZiAocGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCwgcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRyYXdDb21wb25lbnQoY29udGV4dCwgZWxhcHNlVGltZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAobGV0IG8gb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIG8uY29tcG9uZW50LmRyYXcoY29udGV4dCwgZWxhcHNlVGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21wb3NpdGVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHRvcCA9IDAsIGxlZnQgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAsIHBhcmVudENvbXBvbmVudCA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xuXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB9XG5cbiAgICBhZGRDb21wb25lbnQoY29tcG9uZW50LCBuYW1lKSB7XG4gICAgICAgIGNvbXBvbmVudC5zZXRQYXJlbnRDb21wb25lbnQodGhpcyk7XG5cbiAgICAgICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LFxuICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQsXG4gICAgICAgICAgICAgICAgbmFtZTogdW5pcXVlSWQoJ2NvbXBvbmVudCAnKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jaGlsZHJlbi5maW5kSW5kZXgoKHsgY29tcG9uZW50OiBjaGlsZENvbXBvbmVudCB9KSA9PiBjaGlsZENvbXBvbmVudCA9PT0gY29tcG9uZW50KTtcblxuICAgICAgICBpZiAoKH5pbmRleCkgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldENoaWxkQ29tcG9uZW50KGluZGV4KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPCBpbmRleCAmJiBpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5baW5kZXhdLmNvbXBvbmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlbi5maW5kKGUgPT4gZS5uYW1lID09PSBpbmRleCk7ICBcblxuICAgICAgICByZXR1cm4gY2hpbGQgPyBjaGlsZC5jb21wb25lbnQgOiBudWxsOyAgXG4gICAgfVxuXG4gICAgZHJvcENoaWxkcmVuKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgfVxuXG4gICAgdHJhdmVyc2UoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc3RvcCA9IGNhbGxiYWNrKHRoaXMpXG4gICAgICAgIGlmIChzdG9wKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGZvciAobGV0IG8gb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29tcG9uZW50IH0gPSBvO1xuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnQudHJhdmVyc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LnRyYXZlcnNlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdG9wID0gY2FsbGJhY2soY29tcG9uZW50KVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0gXG4gICAgfVxuXG4gICAgc2V0U2Nyb2xsWU9mZmVyKHNjcm9sbFlPZmZlcikge1xuICAgICAgICB0aGlzLnNjcm9sbFlPZmZzZXQgPSBzY3JvbGxZT2ZmZXI7XG5cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKCh7IGNvbXBvbmVudCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgU2Nyb2xsQmFyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7IHRvcCB9ID0gY29tcG9uZW50LmluaXRpYWxCb3VuZGluZ0NsaWVudFJlY3Q7IFxuICAgICAgICAgICAgY29tcG9uZW50LnNldEJvdW5kaW5nQ2xpZW50UmVjdCh0b3AgKyBzY3JvbGxZT2ZmZXIpO1xuXG4gICAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kSW1hZ2UgPSB0aGlzLmdldEJhY2tncm91bmRJbWFnZSgpO1xuXG4gICAgICAgICAgICBpZiAoYmFja2dyb3VuZEltYWdlKSB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlLnNldFNjcm9sbFlPZmZlcihiYWNrZ3JvdW5kSW1hZ2UueSArIHNjcm9sbFlPZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc2V0U2Nyb2xsWE9mZmVyKHNjcm9sbFhPZmZlcikge1xuICAgICAgICB0aGlzLnNjcm9sbFhPZmZzZXQgPSBzY3JvbGxYT2ZmZXI7XG5cbiAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKCh7IGNvbXBvbmVudCB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgU2Nyb2xsQmFyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB7IGxlZnQgfSA9IGNvbXBvbmVudC5pbml0aWFsQm91bmRpbmdDbGllbnRSZWN0OyBcbiAgICAgICAgICAgIGNvbXBvbmVudC5zZXRCb3VuZGluZ0NsaWVudFJlY3QodW5kZWZpbmVkLCBsZWZ0ICsgc2Nyb2xsWE9mZmVyKTtcblxuICAgICAgICAgICAgY29uc3QgYmFja2dyb3VuZEltYWdlID0gdGhpcy5nZXRCYWNrZ3JvdW5kSW1hZ2UoKTtcblxuICAgICAgICAgICAgaWYgKGJhY2tncm91bmRJbWFnZSkge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZS5zZXRTY3JvbGxYT2ZmZXIoYmFja2dyb3VuZEltYWdlLnggKyBzY3JvbGxYT2ZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNhbGN1bGF0ZVRvdGFsV2lkdGhDb21wb25lbnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWF4Q29tcG9uZW50ID0gdGhpcy5jaGlsZHJlblswXS5jb21wb25lbnQ7XG4gICAgICAgIGNvbnN0IHsgbGVmdCwgd2lkdGggfSA9IG1heENvbXBvbmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBsZXQgbWF4ID0gbGVmdCArIHdpZHRoO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jaGlsZHJlbltpXS5jb21wb25lbnQ7XG4gICAgICAgICAgICBsZXQgeyBsZWZ0LCB3aWR0aCB9ID0gY29tcG9uZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobGVmdCArIHdpZHRoID4gbWF4KSB7XG4gICAgICAgICAgICAgICBtYXggPSBsZWZ0ICsgd2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH0gXG5cbiAgICBjYWxjdWxhdGVUb3RhbEhlaWdodENvbXBvbmVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBtYXhDb21wb25lbnQgPSB0aGlzLmNoaWxkcmVuWzBdLmNvbXBvbmVudDtcbiAgICAgICAgY29uc3QgeyB0b3AsIGhlaWdodCB9ID0gbWF4Q29tcG9uZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGxldCBtYXggPSB0b3AgKyBoZWlnaHQ7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNoaWxkcmVuW2ldLmNvbXBvbmVudDtcbiAgICAgICAgICAgIGxldCB7IHRvcCwgaGVpZ2h0IH0gPSBjb21wb25lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0b3AgKyBoZWlnaHQgPiBtYXgpIHtcbiAgICAgICAgICAgICAgIG1heCA9IHRvcCArIGhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfSBcblxuICAgIGNoZWNrRm9yQ29sbGlzaW9uKG9iamVjdE1ldHJpYykge1xuICAgICAgICBjb25zdCBlbGVtZW50SW5zaWRlID0gW107XG4gICAgICAgIGxldCBiaWdnZXN0RGVwdGggPSAxO1xuXG4gICAgICAgIHRoaXMudHJhdmVyc2UoKG8pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0IH0gPSBvLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgY29uc3Qgb0Nvb3JkID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbGV0IGFic29sdXRlVG9wID0gMDtcbiAgICAgICAgICAgIGxldCBhYnNvbHV0ZUxlZnQgPSAwO1xuXG4gICAgICAgICAgICBsZXQgZGVwdGggPSAxO1xuXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gby5nZXRQYXJlbnRDb21wb25lbnQoKTtcblxuICAgICAgICAgICAgY29uc3QgcGFyZW50T3ZlcmZsb3cgPSBbXTtcblxuICAgICAgICAgICAgd2hpbGUgKHBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCB7IHRvcCwgbGVmdCB9ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYWJzb2x1dGVUb3AgKz0gdG9wO1xuICAgICAgICAgICAgICAgIGFic29sdXRlTGVmdCArPSBsZWZ0O1xuXG4gICAgICAgICAgICAgICAgZGVwdGggKz0gMTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuZ2V0T3ZlcmZsb3coKSA9PT0gJ3Njcm9sbCcgfHwgcGFyZW50LmdldE92ZXJmbG93KCkgPT09ICdvdmVyZmxvdycpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50T3ZlcmZsb3cucHVzaChwYXJlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5nZXRQYXJlbnRDb21wb25lbnQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWJzb2x1dGVUb3AgKz0gdG9wO1xuICAgICAgICAgICAgYWJzb2x1dGVMZWZ0ICs9IGxlZnQ7XG5cbiAgICAgICAgICAgIG9Db29yZC50b3AgPSBhYnNvbHV0ZVRvcDtcbiAgICAgICAgICAgIG9Db29yZC5sZWZ0ID0gYWJzb2x1dGVMZWZ0O1xuXG4gICAgICAgICAgICBpZiAocGFyZW50T3ZlcmZsb3cubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJlbnRPdmVyZmxvdy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgeyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQgfSA9IHBhcmVudE92ZXJmbG93W2ldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJlbnRUb3AgPSB0b3A7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXJlbnRMZWZ0ID0gbGVmdDtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IHBhcmVudE92ZXJmbG93W2ldLmdldFBhcmVudENvbXBvbmVudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeyB0b3AsIGxlZnQgfSA9IHAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50VG9wICs9IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudExlZnQgKz0gbGVmdDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHAuZ2V0UGFyZW50Q29tcG9uZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcEJveCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogcGFyZW50VG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcGFyZW50TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNJbnNpZGVQYXJlbnQgPSBvLmNvbGxpc2lvbi5pc0luc2lkZShwQm94LCBvQ29vcmQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNJbnNpZGVQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5jb2xsaXNpb24uaXNJbnNpZGUob0Nvb3JkLCBvYmplY3RNZXRyaWMpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudEluc2lkZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbyxcbiAgICAgICAgICAgICAgICAgICAgZGVwdGhcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChkZXB0aCA+IGJpZ2dlc3REZXB0aCkge1xuICAgICAgICAgICAgICAgICAgICBiaWdnZXN0RGVwdGggPSBkZXB0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChlbGVtZW50SW5zaWRlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRJbnNpZGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIFNjcm9sbEJhciBleHRlbmRzIENvbXBvc2l0ZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3Iob3JpZW50YXRpb24sIGNoaWxkV2lkdGgsIHBhcmVudENvbXBvbmVudCkge1xuICAgICAgICBjb25zdCBoZWlnaHQgPSAxNztcblxuICAgICAgICBsZXQgcGFyZW50V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgbGV0IHBhcmVudEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgICAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XG4gICAgICAgICAgICAoeyB3aWR0aDogcGFyZW50V2lkdGgsIGhlaWdodDogcGFyZW50SGVpZ2h0IH0gPSBwYXJlbnRDb21wb25lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHdpZHRoO1xuXG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykgeyAgXG4gICAgICAgICAgICB3aWR0aCA9IHBhcmVudEhlaWdodDsgXG4gICAgICAgICAgICBzdXBlcigwLCBwYXJlbnRXaWR0aCAtIGhlaWdodCwgaGVpZ2h0LCB3aWR0aCwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpZHRoID0gcGFyZW50V2lkdGg7IFxuICAgICAgICAgICAgc3VwZXIocGFyZW50SGVpZ2h0IC0gaGVpZ2h0LCAwLCB3aWR0aCwgaGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGlsZFdpZHRoID0gY2hpbGRXaWR0aDtcblxuICAgICAgICB0aGlzLnNldEJhY2tncm91bmRDb2xvcignI0YxRjFGMScpO1xuXG4gICAgICAgIGxldCBwcmV2QnV0dG9uVGV4dCA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoJzI1YzQnLCAxNikpO1xuICAgICAgICBsZXQgbmV4dEJ1dHRvblRleHQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KCcyNWJhJywgMTYpKTtcblxuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHByZXZCdXR0b25UZXh0ID0gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludCgnMjViMicsIDE2KSk7XG4gICAgICAgICAgICBuZXh0QnV0dG9uVGV4dCA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoJzI1YmMnLCAxNikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uXG5cbiAgICAgICAgbGV0IG5leHRCdXR0b247XG4gICAgICAgIGNvbnN0IHByZXZCdXR0b24gPSBuZXcgQnV0dG9uKDAsIDAsIGhlaWdodCwgaGVpZ2h0LCBwcmV2QnV0dG9uVGV4dCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICBuZXh0QnV0dG9uID0gbmV3IEJ1dHRvbih3aWR0aCAtIDIgKiBoZWlnaHQsIDAsIGhlaWdodCwgaGVpZ2h0LCBuZXh0QnV0dG9uVGV4dCwgdGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0QnV0dG9uID0gbmV3IEJ1dHRvbigwLCB3aWR0aCAtIDIgKiBoZWlnaHQsIGhlaWdodCwgaGVpZ2h0LCBuZXh0QnV0dG9uVGV4dCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2QnV0dG9uLnNldEJhY2tncm91bmRDb2xvcignI0YxRjFGMScpO1xuICAgICAgICBuZXh0QnV0dG9uLnNldEJhY2tncm91bmRDb2xvcignI0YxRjFGMScpO1xuXG4gICAgICAgIHByZXZCdXR0b24uaG92ZXJQcm9wZXJ0aWVzLmNvbG9yLmJhY2tncm91bmRDb2xvciA9ICcjRDJEMkQyJztcbiAgICAgICAgbmV4dEJ1dHRvbi5ob3ZlclByb3BlcnRpZXMuY29sb3IuYmFja2dyb3VuZENvbG9yID0gJyNEMkQyRDInO1xuXG4gICAgICAgIGxldCBzY3JvbGxCYWNrZ3JvdW5kO1xuXG4gICAgICAgIGNvbnN0IHNjcm9sbEJhY2tncm91bmRXaWR0aCA9IHdpZHRoIC0gMyAqIGhlaWdodDtcblxuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHNjcm9sbEJhY2tncm91bmQgPSBuZXcgQ29tcG9zaXRlQ29tcG9uZW50KGhlaWdodCwgMCwgaGVpZ2h0LCBzY3JvbGxCYWNrZ3JvdW5kV2lkdGgsIHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Nyb2xsQmFja2dyb3VuZCA9IG5ldyBDb21wb3NpdGVDb21wb25lbnQoMCwgaGVpZ2h0LCBzY3JvbGxCYWNrZ3JvdW5kV2lkdGgsIGhlaWdodCwgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2Nyb2xsO1xuXG4gICAgICAgIGxldCBwYXJ0T2ZQYXJlbnQ7XG4gICAgICAgIFxuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHBhcnRPZlBhcmVudCA9IHBhcmVudEhlaWdodCAvIGNoaWxkV2lkdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXJ0T2ZQYXJlbnQgPSBwYXJlbnRXaWR0aCAvIGNoaWxkV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHNjcm9sbCA9IG5ldyBDb21wb25lbnQoMCwgMiwgaGVpZ2h0IC0gNCwgTWF0aC5mbG9vcihwYXJ0T2ZQYXJlbnQgKiAoc2Nyb2xsQmFja2dyb3VuZFdpZHRoKSksIHNjcm9sbEJhY2tncm91bmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Nyb2xsID0gbmV3IENvbXBvbmVudCgyLCAwLCBNYXRoLmZsb29yKHBhcnRPZlBhcmVudCAqIChzY3JvbGxCYWNrZ3JvdW5kV2lkdGgpKSwgaGVpZ2h0IC0gNCwgc2Nyb2xsQmFja2dyb3VuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBzY3JvbGwuc2V0QmFja2dyb3VuZENvbG9yKCcjQzFDMUMxJyk7XG5cbiAgICAgICAgdGhpcy5zY3JvbGxQb3MgPSAwO1xuICAgICAgICB0aGlzLnNjcm9sbFBvc01heCA9IHNjcm9sbEJhY2tncm91bmRXaWR0aCAtIE1hdGguZmxvb3IocGFydE9mUGFyZW50ICogKHNjcm9sbEJhY2tncm91bmRXaWR0aCkpO1xuXG4gICAgICAgIHRoaXMucGFydE9mUGFyZW50ID0gcGFydE9mUGFyZW50O1xuXG4gICAgICAgIGxldCBwYXJBbmRDaGlsZERpZjtcblxuICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHBhckFuZENoaWxkRGlmID0gY2hpbGRXaWR0aCAtIHBhcmVudEhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhckFuZENoaWxkRGlmID0gY2hpbGRXaWR0aCAtIHBhcmVudFdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnRDaGlsZFBvcyA9IDA7XG4gICAgICAgIGxldCBwYXJ0ID0gMTAgLyB0aGlzLnNjcm9sbFBvc01heDtcblxuICAgICAgICBwcmV2QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLk1PVVNFLk1PVVNFX0RPV04sIChlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zY3JvbGxQb3MgKyAxMCA8IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFBvcyArPSAxMDtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2hpbGRQb3MgKz0gcGFydCAqIHBhckFuZENoaWxkRGlmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFBvcyA9IDA7XG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkUG9zID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGwuc2V0Qm91bmRpbmdDbGllbnRSZWN0KC10aGlzLnNjcm9sbFBvcyk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LnNldFNjcm9sbFlPZmZlcihjdXJyZW50Q2hpbGRQb3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY3JvbGwuc2V0Qm91bmRpbmdDbGllbnRSZWN0KHVuZGVmaW5lZCwgLXRoaXMuc2Nyb2xsUG9zKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuc2V0U2Nyb2xsWE9mZmVyKGN1cnJlbnRDaGlsZFBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5leHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihldmVudHMuTU9VU0UuTU9VU0VfRE9XTiwgKGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNjcm9sbFBvcyAtIDEwID4gLXRoaXMuc2Nyb2xsUG9zTWF4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxQb3MgLT0gMTA7XG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkUG9zIC09IHBhcnQgKiBwYXJBbmRDaGlsZERpZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxQb3MgPSAtdGhpcy5zY3JvbGxQb3NNYXg7XG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkUG9zID0gLXBhckFuZENoaWxkRGlmO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5vcmllbnRhdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgICAgIHNjcm9sbC5zZXRCb3VuZGluZ0NsaWVudFJlY3QoLXRoaXMuc2Nyb2xsUG9zKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuc2V0U2Nyb2xsWU9mZmVyKGN1cnJlbnRDaGlsZFBvcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjcm9sbC5zZXRCb3VuZGluZ0NsaWVudFJlY3QodW5kZWZpbmVkLCAtdGhpcy5zY3JvbGxQb3MpO1xuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5zZXRTY3JvbGxYT2ZmZXIoY3VycmVudENoaWxkUG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSAgICBcbn1cblxuY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCB0ZXh0ID0gJycsIHBhcmVudENvbXBvbmVudCA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xuXG4gICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IGdldFRleHRXaWR0aFdpdGhDYW52YXModGV4dCwgJ21vbm9zcGFjZScsICcxNnB4JylcblxuICAgICAgICB0aGlzLmxhYmVsID0gbmV3IExhYmVsKE1hdGguZmxvb3IoaGVpZ2h0IC8gMikgLSAxNiAvIDIsIE1hdGguZmxvb3Iod2lkdGggLyAyKSAtIE1hdGguZmxvb3IodGV4dFdpZHRoIC8gMiksIHRleHRXaWR0aCArIDEsIDE2LCB0ZXh0KTtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICB9XG5cbiAgICBwYWludENvbXBvbmVudChjb250ZXh0LCBlbGFwc2VkVGltZSkgeyBcbiAgICAgICAgc3VwZXIucGFpbnRDb21wb25lbnQoY29udGV4dCwgZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0IH0gPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgXG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuXG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKGxlZnQsIHRvcCk7XG5cbiAgICAgICAgdGhpcy5sYWJlbC5kcmF3KGNvbnRleHQsIGVsYXBzZWRUaW1lKTtcblxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBtZXJnZSB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCBldmVudHMgZnJvbSAnLi4vLi4vZXZlbnQvZXZlbnRzL2V2ZW50cyc7XG5pbXBvcnQgQ3Vyc29yIGZyb20gJy4uL0N1cnNvcic7XG5cbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4vQ29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGFiZWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHRvcCA9IDAsIGxlZnQgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAsIHRleHQgPSAnJywgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xuICAgICAgICBzdXBlcih0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQsIHBhcmVudENvbXBvbmVudCk7XG5cbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmNvbG9yLnRleHRDb2xvciA9ICcjMDAwMDAwJztcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLnRleHRQcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICd0b3AnLFxuICAgICAgICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgICAgICAgZm9udEZhbWlseTogJ21vbm9zcGFjZSdcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMubWF4VGV4dExlbmd0aCA9ICdpbmZpbml0ZSc7XG5cbiAgICAgICAgdGhpcy5lZGl0YWJsZSA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlcnMuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMuTU9VU0UuTU9VU0VfRE9XTiwgdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuICAgICAgICB0aGlzLmhhbmRsZXJzLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLktFWUJPQVJELktFWV9QUkVTUywgdGhpcy5oYW5kbGVLZXlQcmVzcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMuYWRkRXZlbnRMaXN0ZW5lcihldmVudHMuS0VZQk9BUkQuS0VZX0RPV04sIHRoaXMuaGFuZGxlS2V5RG93bik7XG5cbiAgICAgICAgdGhpcy5saW5lc01ldHJpYyA9IFtdO1xuICAgICAgICB0aGlzLnRleHRMaW5lcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuY3Vyc29yUG9zaXRpb24gPSB7XG4gICAgICAgICAgICByb3c6IDAsXG4gICAgICAgICAgICBjb2x1bW46IDAsXG4gICAgICAgICAgICBpbmRleDogMFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucHJvcGVydGllcy5jdXJzb3IgPSAndGV4dCc7XG5cbiAgICAgICAgbWVyZ2UodGhpcy5hbmltYXRpb25zLmFuaW1hdGVkUHJvcGVydGllcywgdGhpcy5wcm9wZXJ0aWVzKTtcbiAgICAgICAgbWVyZ2UodGhpcy5ob3ZlclByb3BlcnRpZXMsIHRoaXMucHJvcGVydGllcyk7XG5cbiAgICAgICAgdGhpcy5uZWVkZWRUb1JlY2FsY3VsYXRlID0ge1xuICAgICAgICAgICAgbmVlZGVkOiB0cnVlLFxuICAgICAgICAgICAgcm93OiAwLFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY3Vyc29yID0gbmV3IEN1cnNvcigwLCAwLCAxLCB0aGlzLnByb3BlcnRpZXMudGV4dFByb3BlcnRpZXMuZm9udFNpemUpO1xuICAgIH1cblxuICAgIGhhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldC5lZGl0YWJsZSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXQudGV4dCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuY3Vyc29yLnNldFBvc2l0aW9uKDAsIDApO1xuXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmN1cnNvclBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICByb3c6IDAsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbjogMCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgaXNJbnNpZGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBsaW5lID0gJyc7XG5cbiAgICAgICAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0IH0gPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIGxldCB0b3BPZmZzZXQgPSB0b3A7XG4gICAgICAgICAgICBsZXQgbGVmdE9mZnNldCA9IGxlZnQ7XG5cbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSB0YXJnZXQuZ2V0UGFyZW50Q29tcG9uZW50KCk7XG5cbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRvcCwgbGVmdCB9ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIHRvcE9mZnNldCArPSB0b3A7XG4gICAgICAgICAgICAgICAgbGVmdE9mZnNldCArPSBsZWZ0O1xuXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LmdldFBhcmVudENvbXBvbmVudCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtb3VzZUNvb3JkID0ge1xuICAgICAgICAgICAgICAgIHRvcDogZS5wYXlsb2FkLm1vdXNlQ29vcmQudG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGUucGF5bG9hZC5tb3VzZUNvb3JkLmxlZnQsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhcmdldC5nbHlwaFBvc2l0aW9uLmxlbmd0aCAmJiAhaXNJbnNpZGU7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSB0YXJnZXQuZ2x5cGhQb3NpdGlvbltpXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxpbmUubGVuZ3RoICYmICFpc0luc2lkZTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0IH0gPSBsaW5lW2pdO1xuXG4gICAgICAgICAgICAgICAgaXNJbnNpZGUgPSB0YXJnZXQuY29sbGlzaW9uLmlzSW5zaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogdG9wICsgdG9wT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdCArIGxlZnRPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtb3VzZUNvb3JkXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc0luc2lkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmN1cnNvci5zZXRQb3NpdGlvbih0b3AsIGxlZnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmN1cnNvclBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRhcmdldC50ZXh0TGluZXNbaV0uc3RhcnRPZkxpbmUgKyBqXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzSW5zaWRlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXJnZXQubGluZXNNZXRyaWMubGVuZ3RoICYmICFpc0luc2lkZTsgaSsrKSB7IFxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCB9ID0gdGFyZ2V0LmxpbmVzTWV0cmljW2ldO1xuXG4gICAgICAgICAgICAgICAgaXNJbnNpZGUgPSB0YXJnZXQuY29sbGlzaW9uLmlzSW5zaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogdG9wICsgdG9wT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdCArIGxlZnRPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlQ29vcmRcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzSW5zaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5jdXJzb3Iuc2V0UG9zaXRpb24odG9wLCB3aWR0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmN1cnNvclBvc2l0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93OiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0YXJnZXQuZ2x5cGhQb3NpdGlvbltpXS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogdGFyZ2V0LnRleHRMaW5lc1tpXS5zdGFydE9mTGluZSArIHRhcmdldC5nbHlwaFBvc2l0aW9uW2ldLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNJbnNpZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRvcCwgd2lkdGggfSA9IHRhcmdldC5saW5lc01ldHJpY1t0YXJnZXQubGluZXNNZXRyaWMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmN1cnNvci5zZXRQb3NpdGlvbih0b3AsIHdpZHRoKTtcblxuICAgICAgICAgICAgICAgIHRhcmdldC5jdXJzb3JQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgcm93OiB0YXJnZXQubGluZXNNZXRyaWMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0YXJnZXQuZ2x5cGhQb3NpdGlvblt0YXJnZXQuZ2x5cGhQb3NpdGlvbi5sZW5ndGggLSAxXS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiB0YXJnZXQudGV4dExpbmVzW3RhcmdldC5nbHlwaFBvc2l0aW9uLmxlbmd0aCAtIDFdLnN0YXJ0T2ZMaW5lICsgdGFyZ2V0LmdseXBoUG9zaXRpb25bdGFyZ2V0LmdseXBoUG9zaXRpb24ubGVuZ3RoIC0gMV0ubGVuZ3RoXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZUtleVByZXNzKGUpIHtcbiAgICAgICAgaWYgKGUudGFyZ2V0LmVkaXRhYmxlKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQubWF4VGV4dExlbmd0aCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LnRleHQubGVuZ3RoID49IHRhcmdldC5tYXhUZXh0TGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlLnBheWxvYWQua2V5ID09PSAnRGVsZXRlJykgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGUucGF5bG9hZC5rZXkgPT09ICdCYWNrc3BhY2UnKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoZS5wYXlsb2FkLmtleSA9PT0gJ0VudGVyJykgcmV0dXJuO1xuICAgICBcbiAgICAgICAgICAgIHRhcmdldC50ZXh0ID0gdGFyZ2V0Lmluc2VydEdseXBoKGUucGF5bG9hZC5rZXksIHRhcmdldC5jdXJzb3JQb3NpdGlvbi5pbmRleCwgdGFyZ2V0LnRleHQpO1xuICAgICAgICAgICAgdGFyZ2V0LmN1cnNvclBvc2l0aW9uLmluZGV4ICs9IDE7XG4gICAgXG4gICAgICAgICAgICB0YXJnZXQubmVlZGVkVG9SZWNhbGN1bGF0ZS5uZWVkZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlS2V5RG93bihlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldC5lZGl0YWJsZSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICBsZXQga2V5ID0gZS5wYXlsb2FkLmtleTtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IHRhcmdldC5jdXJzb3JQb3NpdGlvbi5pbmRleDtcblxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ0RlbGV0ZScpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gdGFyZ2V0LnRleHQubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB0YXJnZXQudGV4dCA9IHRhcmdldC5kZWxldGVHbHlwaChpbmRleCwgdGFyZ2V0LnRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdCYWNrc3BhY2UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB0YXJnZXQudGV4dCA9IHRhcmdldC5kZWxldGVHbHlwaChpbmRleCAtIDEsIHRhcmdldC50ZXh0KTtcbiAgICAgICAgICAgICAgICBpbmRleCAtPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0YXJnZXQuY3Vyc29yUG9zaXRpb24uaW5kZXggPSBpbmRleDtcblxuICAgICAgICAgICAgdGFyZ2V0Lm5lZWRlZFRvUmVjYWxjdWxhdGUubmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlbGV0ZUdseXBoKGluZGV4LCBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCBpbmRleCkgKyBzdHJpbmcuc2xpY2UoaW5kZXggKyAxKTtcbiAgICB9XG5cbiAgICBpbnNlcnRHbHlwaChrZXksIGluZGV4LCBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcgKyBrZXk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBrZXkgKyBzdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIGluZGV4KSArIGtleSArIHN0cmluZy5zbGljZShpbmRleCk7XG4gICAgfVxuXG4gICAgZ2V0VGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dDtcbiAgICB9XG5cbiAgICBzZXRUZXh0KHRleHQgPSAnJykge1xuICAgICAgICB0aGlzLm5lZWRlZFRvUmVjYWxjdWxhdGUubmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB9XG5cbiAgICBzZXRGb250U2l6ZShmb250U2l6ZSA9IDE2KSB7XG4gICAgICAgIHRoaXMucHJvcGVydGllcy50ZXh0UHJvcGVydGllcy5mb250U2l6ZSA9IGZvbnRTaXplO1xuICAgIH1cblxuICAgIHNldFRleHRDb2xvcihjb2xvciA9ICcjMDAwMDAwJykge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMuY29sb3IudGV4dENvbG9yID0gY29sb3I7XG4gICAgfVxuXG4gICAgc2V0Rm9udChmb250KSB7XG4gICAgICAgIHRoaXMudGV4dFByb3BlcnRpZXMuZm9udCA9IGZvbnQ7XG4gICAgfVxuXG4gICAgc2V0Q3Vyc29yUG9zaXRpb25Gcm9tMkQocm93LCBjb2x1bW4pIHtcbiAgICAgICAgaWYgKHRoaXMuZ2x5cGhQb3NpdGlvbi5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGlmIChjb2x1bW4gPj0gdGhpcy5nbHlwaFBvc2l0aW9uW3Jvd10ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJzb3Iuc2V0UG9zaXRpb24odGhpcy5nbHlwaFBvc2l0aW9uW3Jvd11bY29sdW1uIC0gMV0udG9wLCB0aGlzLmdseXBoUG9zaXRpb25bcm93XVtjb2x1bW4gLSAxXS5sZWZ0ICsgdGhpcy5nbHlwaFBvc2l0aW9uW3Jvd11bY29sdW1uIC0gMV0ud2lkdGgpOyAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yLnNldFBvc2l0aW9uKHRoaXMuZ2x5cGhQb3NpdGlvbltyb3ddW2NvbHVtbl0udG9wLCB0aGlzLmdseXBoUG9zaXRpb25bcm93XVtjb2x1bW5dLmxlZnQpOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvci5zZXRQb3NpdGlvbigwLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldENvbnRleHRQcm9wZXJ0aWVzKGNvbnRleHQsIGVsYXBzZWRUaW1lKSB7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5hbmltYXRpb25zLmFuaW1hdGVkUHJvcGVydGllcy5jb2xvci50ZXh0Q29sb3I7XG4gICAgICAgIGNvbnRleHQuZm9udCA9IGAke3RoaXMuYW5pbWF0aW9ucy5hbmltYXRlZFByb3BlcnRpZXMudGV4dFByb3BlcnRpZXMuZm9udFNpemV9cHggJHt0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLnRleHRQcm9wZXJ0aWVzLmZvbnRGYW1pbHl9YDtcbiAgICAgICAgY29udGV4dC50ZXh0QWxpZ24gPSB0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLnRleHRQcm9wZXJ0aWVzLnRleHRBbGlnbjtcbiAgICAgICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSB0aGlzLmFuaW1hdGlvbnMuYW5pbWF0ZWRQcm9wZXJ0aWVzLnRleHRQcm9wZXJ0aWVzLnRleHRCYXNlbGluZTsgICAgIFxuXG4gICAgICAgIHN1cGVyLnNldENvbnRleHRQcm9wZXJ0aWVzKGNvbnRleHQsIGVsYXBzZWRUaW1lKVxuICAgIH1cblxuICAgIGNhbGN1bGF0ZUxpbmVzKGNvbnRleHQpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IHRoaXMuYW5pbWF0aW9ucy5hbmltYXRlZFByb3BlcnRpZXMudGV4dFByb3BlcnRpZXMuZm9udFNpemU7XG4gICAgICAgIHRoaXMudGV4dExpbmVzID0gW107XG4gICAgICAgIHRoaXMubGluZXNNZXRyaWMgPSBbXTtcblxuICAgICAgICBsZXQgZ2x5cGhzID0gdGhpcy50ZXh0LnNwbGl0KCcnKTtcblxuICAgICAgICBsZXQgbGluZVdpZHRoID0gMDtcbiAgICAgICAgbGV0IGdseXBoV2lkdGggPSAwO1xuICAgICAgICBsZXQgc3RhcnRPZkxpbmUgPSAwO1xuICAgICAgICBsZXQgbGluZSA9ICcnO1xuICAgICAgICBnbHlwaHMuZm9yRWFjaCgoZ2x5cGgsIGkpID0+IHtcbiAgICAgICAgICAgIGdseXBoV2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGdseXBoKS53aWR0aDtcblxuICAgICAgICAgICAgaWYgKGxpbmVXaWR0aCArIGdseXBoV2lkdGggPCB3aWR0aCkge1xuICAgICAgICAgICAgICAgIGxpbmUgKz0gZ2x5cGg7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoICs9IGdseXBoV2lkdGg7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubGluZXNNZXRyaWMucHVzaCh7XG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnRleHRMaW5lcy5sZW5ndGggKiBmb250U2l6ZSxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBsaW5lV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBmb250U2l6ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50ZXh0TGluZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnRPZkxpbmUsXG4gICAgICAgICAgICAgICAgbGluZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHN0YXJ0T2ZMaW5lICs9IGxpbmUubGVuZ3RoO1xuXG4gICAgICAgICAgICBnbHlwaFdpZHRoID0gY29udGV4dC5tZWFzdXJlVGV4dChnbHlwaCkud2lkdGg7XG4gICAgICAgICAgICBsaW5lV2lkdGggPSBnbHlwaFdpZHRoO1xuICAgICAgICAgICAgbGluZSA9IGdseXBoO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobGluZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMubGluZXNNZXRyaWMucHVzaCh7XG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnRleHRMaW5lcy5sZW5ndGggKiBmb250U2l6ZSxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBjb250ZXh0Lm1lYXN1cmVUZXh0KGxpbmUpLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogZm9udFNpemUsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy50ZXh0TGluZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0T2ZMaW5lLFxuICAgICAgICAgICAgICAgICAgICBsaW5lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGN1bGF0ZUdseXBoUG9zaXRpb24oY29udGV4dCk7XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlR2x5cGhQb3NpdGlvbihjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZ2x5cGhQb3NpdGlvbiA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5hbmltYXRpb25zLmFuaW1hdGVkUHJvcGVydGllcy50ZXh0UHJvcGVydGllcy5mb250U2l6ZTtcbiAgICAgICAgdGhpcy50ZXh0TGluZXMuZm9yRWFjaCgoeyBsaW5lIH0sIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGdseXBoUG9zaXRpb24gPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGdseXBocyA9IGxpbmUuc3BsaXQoJycpO1xuXG4gICAgICAgICAgICBsZXQgbGluZVdpZHRoID0gMDtcblxuICAgICAgICAgICAgZ2x5cGhzLmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGNvbnRleHQubWVhc3VyZVRleHQoZSkud2lkdGg7XG5cbiAgICAgICAgICAgICAgICBnbHlwaFBvc2l0aW9uLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBnbHlwaDogZSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogbGluZVdpZHRoLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IGZvbnRTaXplICogaSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGZvbnRTaXplXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aCArPSB3aWR0aDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmdseXBoUG9zaXRpb24ucHVzaChnbHlwaFBvc2l0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29udmVydEluZGV4VG8yRFBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIGxldCByb3cgPSAwO1xuICAgICAgICBsZXQgY29sdW1uID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRleHRMaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMudGV4dExpbmVzW2ldLnN0YXJ0T2ZMaW5lIDwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICByb3cgPSBpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRleHRMaW5lcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGNvbHVtbiA9IGluZGV4IC0gdGhpcy50ZXh0TGluZXNbcm93XS5zdGFydE9mTGluZTtcblxuICAgICAgICAgICAgaWYgKGNvbHVtbiA+PSB0aGlzLmdseXBoUG9zaXRpb25bcm93XS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSB0aGlzLmdseXBoUG9zaXRpb25bcm93XS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLnRleHRMaW5lc1tyb3ddLnN0YXJ0T2ZMaW5lICsgY29sdW1uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sdW1uID0gMDtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3csXG4gICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICBpbmRleFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHBhaW50Q29tcG9uZW50KGNvbnRleHQsIGVsYXBzZWRUaW1lKSB7IFxuICAgICAgICBzdXBlci5wYWludENvbXBvbmVudChjb250ZXh0LCBlbGFwc2VkVGltZSk7XG4gICAgICAgIGxldCB7IHRvcCwgbGVmdCB9ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBjb250ZXh0LnNhdmUoKTtcblxuICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShsZWZ0LCB0b3ApO1xuICAgICAgICBpZiAodGhpcy5uZWVkZWRUb1JlY2FsY3VsYXRlLm5lZWRlZCkge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVMaW5lcyhjb250ZXh0LCB0aGlzLnRleHQsIHRoaXMubmVlZGVkVG9SZWNhbGN1bGF0ZS5yb3cpO1xuXG4gICAgICAgICAgICBjb25zdCB7IHJvdywgY29sdW1uLCBpbmRleCB9ID0gdGhpcy5jb252ZXJ0SW5kZXhUbzJEUG9zaXRpb24odGhpcy5jdXJzb3JQb3NpdGlvbi5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLmN1cnNvclBvc2l0aW9uLnJvdyA9IHJvdztcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yUG9zaXRpb24uY29sdW1uID0gY29sdW1uO1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JQb3NpdGlvbi5pbmRleCA9IGluZGV4O1xuXG4gICAgICAgICAgICB0aGlzLnNldEN1cnNvclBvc2l0aW9uRnJvbTJEKHJvdywgY29sdW1uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5uZWVkZWRUb1JlY2FsY3VsYXRlLm5lZWRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLnByb3BlcnRpZXMuY29sb3IudGV4dENvbG9yO1xuICAgICAgICBjb250ZXh0LmZvbnQgPSBgJHt0aGlzLnByb3BlcnRpZXMudGV4dFByb3BlcnRpZXMuZm9udFNpemV9cHggJHt0aGlzLnByb3BlcnRpZXMudGV4dFByb3BlcnRpZXMuZm9udEZhbWlseX1gO1xuXG4gICAgICAgIHRoaXMudGV4dExpbmVzLmZvckVhY2goKHsgbGluZSB9LCBpKSA9PiB7ICAgICAgICBcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQobGluZSwgMCwgdGhpcy5saW5lc01ldHJpY1tpXS50b3ApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5pc1NlbGVjdGVkICYmIHRoaXMuZWRpdGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yLmRyYXcoY29udGV4dCwgZWxhcHNlZFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKGltYWdlLCBkeCA9IDAsIGR5ID0gMCwgbmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0LCBkV2lkdGgsIGRIZWlnaHQsIHN4ID0gMCwgc3kgPSAwLCBzV2lkdGgsIHNIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5odG1sQ29tcG9uZW50ID0gaW1hZ2U7XG5cbiAgICAgICAgdGhpcy54ID0gZHg7XG4gICAgICAgIHRoaXMueSA9IGR5O1xuXG4gICAgICAgIGlmIChkV2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGRXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkSGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gZEhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzV2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5zV2lkdGggPSBzV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc0hlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNIZWlnaHQgPSBzSGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5uYXR1cmFsV2lkdGggPSBuYXR1cmFsV2lkdGg7XG4gICAgICAgIHRoaXMubmF0dXJhbEhlaWdodCA9IG5hdHVyYWxIZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5vZmZzZXRYID0gMDtcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gMDtcblxuICAgICAgICB0aGlzLnNjcm9sbFhPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLnNjcm9sbFlPZmZzZXQgPSAwO1xuXG5cbiAgICAgICAgdGhpcy5zeCA9IHN4O1xuICAgICAgICB0aGlzLnN5ID0gc3k7XG4gICAgfVxuXG4gICAgc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZUZyYW1lcygpO1xuICAgIH1cblxuICAgIHNldFNjcm9sbFhPZmZlcih4KSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsWE9mZnNldCA9IHg7XG4gICAgfVxuXG4gICAgc2V0U2Nyb2xsWU9mZmVyKHkpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxZT2Zmc2V0ID0geTtcbiAgICB9XG5cbiAgICBzZXREWFBvc2l0aW9uKGR4LCBkeSkge1xuICAgICAgICB0aGlzLnggPSBkeDtcbiAgICAgICAgdGhpcy55ID0gZHk7XG4gICAgfVxuXG4gICAgcmVjYWxjdWxhdGVGcmFtZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLm5hdHVyYWxXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnhGcmFtZXNDb3VudCA9IE1hdGguZmxvb3IoKHRoaXMubmF0dXJhbFdpZHRoIC0gdGhpcy5zeCkgLyB0aGlzLnNXaWR0aCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnhGcmFtZXNDb3VudCA8IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhGcmFtZXNDb3VudCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnhGcmFtZXNDb3VudCA9IDE7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYgKHRoaXMubmF0dXJhbEhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnlGcmFtZXNDb3VudCA9IE1hdGguZmxvb3IoKHRoaXMubmF0dXJhbEhlaWdodCAtIHRoaXMuc3kpIC8gdGhpcy5zSGVpZ2h0KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMueUZyYW1lc0NvdW50IDwgMSkge1xuICAgICAgICAgICAgICAgIHRoaXMueUZyYW1lc0NvdW50ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueUZyYW1lc0NvdW50ID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3VycmVudFhGcmFtZSA9IDE7XG4gICAgICAgIHRoaXMuY3VycmVudFlGcmFtZSA9IDE7XG4gICAgfVxuXG4gICAgZ2V0SHRtbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHRtbENvbXBvbmVudDtcbiAgICB9XG5cbiAgICBnZXRYRnJhbWVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnhGcmFtZXNDb3VudDtcbiAgICB9XG5cbiAgICBnZXRZRnJhbWVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnlGcmFtZXNDb3VudDtcbiAgICB9XG5cbiAgICBnZXRGcmFtZXNDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueEZyYW1lc0NvdW50ICogdGhpcy55RnJhbWVzQ291bnQ7XG4gICAgfVxuXG4gICAgZ2V0UmVtYWluWEZyYW1lc0NvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy54RnJhbWVzQ291bnQgLSB0aGlzLmN1cnJlbnRYRnJhbWU7XG4gICAgfVxuXG4gICAgZ2V0UmVtYWluWUZyYW1lc0NvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy55RnJhbWVzQ291bnQgLSB0aGlzLmN1cnJlbnRZRnJhbWU7XG4gICAgfVxuXG4gICAgZ2V0UmVtYWluRnJhbWVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy54RnJhbWVzQ291bnQgLSB0aGlzLmN1cnJlbnRYRnJhbWUpICogKHRoaXMueUZyYW1lc0NvdW50IC0gdGhpcy5jdXJyZW50WUZyYW1lKTtcbiAgICB9XG5cbiAgICBzZXROZXh0RnJhbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRYRnJhbWUgKyAxID4gdGhpcy54RnJhbWVzQ291bnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRZRnJhbWUgKyAxID4gdGhpcy55RnJhbWVzQ291bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRYRnJhbWUgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFlGcmFtZSA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFlGcmFtZSArPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFhGcmFtZSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRYRnJhbWUgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IHRoaXMuc3ggKyB0aGlzLnNXaWR0aCAqICh0aGlzLmN1cnJlbnRYRnJhbWUgLSAxKTtcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gdGhpcy5zeSArIHRoaXMuc0hlaWdodCAqICh0aGlzLmN1cnJlbnRZRnJhbWUgLSAxKTtcbiAgICB9XG5cbiAgICBzZXRGcmFtZShmcmFtZSkge1xuICAgICAgICBsZXQgZnJhbWVzQ291bnQgPSB0aGlzLmdldEZyYW1lc0NvdW50KCk7XG4gICAgICAgIGxldCBmcmFtZUNvdW50ID0gTWF0aC5mbG9vcihmcmFtZXNDb3VudCAqIGZyYW1lKSArIDE7XG5cbiAgICAgICAgaWYgKGZyYW1lQ291bnQgPiBmcmFtZXNDb3VudCkge1xuICAgICAgICAgICAgZnJhbWVDb3VudCA9IGZyYW1lc0NvdW50O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHhGcmFtZUNvdW50ID0gdGhpcy5nZXRYRnJhbWVzQ291bnQoKTtcblxuICAgICAgICBpZiAoZnJhbWVDb3VudCA8IHhGcmFtZUNvdW50KSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRYRnJhbWUgPSBmcmFtZUNvdW50O1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50WUZyYW1lID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFlGcmFtZSA9IE1hdGguY2VpbChmcmFtZUNvdW50IC8geEZyYW1lQ291bnQpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50WEZyYW1lID0gZnJhbWVDb3VudCAtICgodGhpcy5jdXJyZW50WUZyYW1lIC0gMSkgKiB4RnJhbWVDb3VudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9mZnNldFggPSB0aGlzLnN4ICsgdGhpcy5zV2lkdGggKiAodGhpcy5jdXJyZW50WEZyYW1lIC0gMSk7XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IHRoaXMuc3kgKyB0aGlzLnNIZWlnaHQgKiAodGhpcy5jdXJyZW50WUZyYW1lIC0gMSk7XG4gICAgfVxuXG4gICAgc2V0T2Zmc2V0KGZyYW1lKSB7XG4gICAgICAgIGxldCB3aWR0aE9mT25lTGluZSA9IHRoaXMubmF0dXJhbFdpZHRoIC0gdGhpcy5zV2lkdGg7XG4gICAgICAgIGxldCB3aWR0aCA9IHRoaXMuZ2V0WUZyYW1lc0NvdW50KCkgKiB3aWR0aE9mT25lTGluZTtcblxuICAgICAgICBsZXQgbmV3V2lkdGggPSBNYXRoLmZsb29yKHdpZHRoICogZnJhbWUpO1xuXG4gICAgICAgIGxldCBsaW5lc0NvdW50ID0gIE1hdGguZmxvb3IobmV3V2lkdGggLyB0aGlzLnNXaWR0aCk7XG5cbiAgICAgICAgdGhpcy5vZmZzZXRZID0gdGhpcy5zSGVpZ2h0ICogTWF0aC5mbG9vcihuZXdXaWR0aCAvIHdpZHRoT2ZPbmVMaW5lKTtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gbmV3V2lkdGggLSBsaW5lc0NvdW50ICogdGhpcy5zV2lkdGg7XG4gICAgfVxuXG4gICAgZHJhdyhjb250ZXh0LCB4LCB5KSB7XG4gICAgICAgIGxldCBsZWZ0ID0gdGhpcy54O1xuICAgICAgICBsZXQgdG9wID0gdGhpcy55O1xuXG4gICAgICAgIGlmICh4ICE9PSB1bmRlZmluZWQgJiYgeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZWZ0ID0geDtcbiAgICAgICAgICAgIHRvcCA9IHk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0aGlzLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMuaHRtbENvbXBvbmVudCwgdGhpcy5vZmZzZXRYLCB0aGlzLm9mZnNldFksIHRoaXMuc1dpZHRoLCB0aGlzLnNIZWlnaHQsIGxlZnQgKyB0aGlzLnNjcm9sbFhPZmZzZXQsIHRvcCArIHRoaXMuc2Nyb2xsWU9mZnNldCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy5odG1sQ29tcG9uZW50LCBsZWZ0ICsgdGhpcy5zY3JvbGxYT2Zmc2V0LCB0b3AgKyB0aGlzLnNjcm9sbFlPZmZzZXQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IExhYmVsIGZyb20gJy4vTGFiZWwnO1xuXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudCc7XG5pbXBvcnQgeyBnZXRUZXh0V2lkdGhXaXRoQ2FudmFzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGV4dFdpZHRoJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCB0ZXh0ID0gJycsIHBhcmVudENvbXBvbmVudCA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xuXG4gICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IGdldFRleHRXaWR0aFdpdGhDYW52YXModGV4dCwgJ21vbm9zcGFjZScsICcxNnB4JylcblxuICAgICAgICB0aGlzLmxhYmVsID0gbmV3IExhYmVsKE1hdGguZmxvb3IoaGVpZ2h0IC8gMikgLSAxNiAvIDIsIE1hdGguZmxvb3Iod2lkdGggLyAyKSAtIE1hdGguZmxvb3IodGV4dFdpZHRoIC8gMiksIHRleHRXaWR0aCArIDEsIDE2LCB0ZXh0KTtcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICB9XG5cbiAgICBwYWludENvbXBvbmVudChjb250ZXh0LCBlbGFwc2VkVGltZSkgeyBcbiAgICAgICAgc3VwZXIucGFpbnRDb21wb25lbnQoY29udGV4dCwgZWxhcHNlZFRpbWUpO1xuXG4gICAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0IH0gPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgXG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xuXG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKGxlZnQsIHRvcCk7XG5cbiAgICAgICAgdGhpcy5sYWJlbC5kcmF3KGNvbnRleHQsIGVsYXBzZWRUaW1lKTtcblxuICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgTGFiZWwgZnJvbSAnLi4vQ29tcG9uZW50L0xhYmVsJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vQ29tcG9uZW50L0J1dHRvbic7XG5cbmltcG9ydCB7IENvbXBvc2l0ZUNvbXBvbmVudCB9IGZyb20gJy4uL0NvbXBvbmVudC9Db21wb25lbnQnO1xuaW1wb3J0IHsgZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyB9IGZyb20gJy4uLy4uL3V0aWxzL3RleHRXaWR0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHRJbnB1dE1vZGFsV2luZG93IGV4dGVuZHMgQ29tcG9zaXRlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBkZXNjcmlwdGlvblRleHQsIHBhcmVudENvbXBvbmVudCA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xuXG4gICAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IE1hdGguY2VpbCh3aWR0aCAvIDIpO1xuICAgICAgICBjb25zdCBoYWxmSGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCAvIDIpO1xuICAgICAgICBjb25zdCBoYWxmRGVzY3JpcHRpb25XaWR0aCA9IE1hdGguY2VpbCgoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyhkZXNjcmlwdGlvblRleHQsICdtb25vc3BhY2UnLCAnMTZweCcpICsgMSkgLyAyKTtcbiAgICAgICAgY29uc3QgaGFsZlVzZXJJbnB1dFdpZHRoID0gTWF0aC5jZWlsKGhhbGZXaWR0aCAqIDAuNik7XG5cbiAgICAgICAgY29uc3Qgb25lR2x5cGhXaWR0aCA9IE1hdGguY2VpbChnZXRUZXh0V2lkdGhXaXRoQ2FudmFzKCd4JywgJ21vbm9zcGFjZScsICcxNnB4JykpO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gbmV3IExhYmVsKGhhbGZIZWlnaHQgLSAxMCAtIDIwIC0gMywgaGFsZldpZHRoIC0gaGFsZlVzZXJJbnB1dFdpZHRoLCBoYWxmRGVzY3JpcHRpb25XaWR0aCAqIDIsIDIwLCBkZXNjcmlwdGlvblRleHQpO1xuICAgICAgICBjb25zdCB1c2VySW5wdXQgPSBuZXcgTGFiZWwoaGFsZkhlaWdodCAtIDEwLCBoYWxmV2lkdGggLSBoYWxmVXNlcklucHV0V2lkdGgsIGhhbGZVc2VySW5wdXRXaWR0aCAqIDIsIDIwLCAnJyk7XG4gICAgICAgIGNvbnN0IGVudGVyQnV0dG9uID0gbmV3IEJ1dHRvbihoYWxmSGVpZ2h0ICogMiAtIDUwIC0gNSwgaGFsZldpZHRoICogMiAtIDEwMCAtIDUsIDEwMCwgNTAsICcnKTtcblxuICAgICAgICB1c2VySW5wdXQuZWRpdGFibGUgPSB0cnVlO1xuICAgICAgICB1c2VySW5wdXQuc2V0QmFja2dyb3VuZENvbG9yKCcjYmIwMDAwJyk7XG4gICAgICAgIHVzZXJJbnB1dC5tYXhUZXh0TGVuZ3RoID0gTWF0aC5mbG9vcihoYWxmVXNlcklucHV0V2lkdGggLyBvbmVHbHlwaFdpZHRoICogMik7XG4gICAgICAgIGRlc2NyaXB0aW9uLnNldEJhY2tncm91bmRDb2xvcignIzAwYmJiYicpO1xuXG4gICAgICAgIGVudGVyQnV0dG9uLnNldEJhY2tncm91bmRDb2xvcignI2FhYWFhYScpO1xuXG4gICAgICAgIHVzZXJJbnB1dC5zZXRUZXh0Q29sb3IoJyNGRkZGMDAnKTtcbiAgICAgICAgdXNlcklucHV0LmN1cnNvci5zZXRDb2xvcignIzA4QjYwMCcpO1xuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25LZXkgPSAnZGVzY3JpcHRpb24nO1xuICAgICAgICB0aGlzLnVzZXJJbnB1dEtleSA9ICd1c2VyaW5wdXQnO1xuICAgICAgICB0aGlzLmJ1dHRvbktleSA9ICdidXR0b24nO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGRlc2NyaXB0aW9uLCB0aGlzLmRlc2NyaXB0aW9uS2V5KTtcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQodXNlcklucHV0LCB0aGlzLnVzZXJJbnB1dEtleSk7XG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGVudGVyQnV0dG9uLCB0aGlzLmJ1dHRvbktleSk7XG4gICAgfVxuXG4gICAgYWRkQnV0dG9uRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudCkge1xuICAgICAgICB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuYnV0dG9uS2V5KS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGV2ZW50KTtcbiAgICB9XG5cbiAgICBnZXRPa0J1dHRvbkNvbXBvbmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb21wb25lbnQodGhpcy5idXR0b25LZXkpO1xuICAgIH1cblxuICAgIGdldERlc2NyaXB0aW9uQ29tcG9uZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLmRlc2NyaXB0aW9uS2V5KTtcbiAgICB9XG5cbiAgICBnZXRJbnB1dFVzZXJDb21wb25lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMudXNlcklucHV0S2V5KTtcbiAgICB9XG5cbiAgICBnZXRJbnB1dFVzZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMudXNlcklucHV0S2V5KS50ZXh0O1xuICAgIH1cbn0iLCJpbXBvcnQgZXZlbnRzIGZyb20gJy4uLy4uL2V2ZW50L2V2ZW50cy9ldmVudHMnO1xyXG5pbXBvcnQgSW1hZ2VDb21wb25lbnQgZnJvbSAnLi4vSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnQnO1xyXG5pbXBvcnQgTGFiZWwgZnJvbSAnLi4vQ29tcG9uZW50L0xhYmVsJztcclxuXHJcbmltcG9ydCB7IENvbXBvc2l0ZUNvbXBvbmVudCB9IGZyb20gJy4uL0NvbXBvbmVudC9Db21wb25lbnQnO1xyXG5pbXBvcnQgeyBnZXRUZXh0V2lkdGhXaXRoQ2FudmFzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGV4dFdpZHRoJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hZ2ljU2VsZWN0aW5nTW9kYWxXaW5kb3cgZXh0ZW5kcyBDb21wb3NpdGVDb21wb25lbnQge1xyXG4gICAgY29uc3RydWN0b3IodG9wID0gMCwgbGVmdCA9IDAsIHdpZHRoID0gMCwgaGVpZ2h0ID0gMCwgbWFnaWNzID0gW10sIGltYWdlcyA9IHt9LCBwYXJlbnRDb21wb25lbnQgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xyXG5cclxuICAgICAgICB0aGlzLm1hZ2ljcyA9IFsuLi5tYWdpY3NdO1xyXG4gICAgICAgIHRoaXMudG90YWxXaWR0aCA9IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhY2sgPSBpbWFnZXMuYmFjaztcclxuICAgICAgICBjb25zdCB7IG5hdHVyYWxXaWR0aDogYmFja1dpZHRoLCBuYXR1cmFsSGVpZ2h0OiBiYWNrSGVpZ2h0IH0gPSBiYWNrO1xyXG5cclxuICAgICAgICBjb25zdCBiYWNrSW1hZ2VDb21wb25lbnQgPSBuZXcgSW1hZ2VDb21wb25lbnQoYmFjaywgMCwgMCwgYmFja1dpZHRoLCBiYWNrSGVpZ2h0LCBiYWNrV2lkdGgsIGJhY2tIZWlnaHQsIDAsIDAsIGJhY2tXaWR0aCwgYmFja0hlaWdodCk7XHJcbiAgICAgICAgdGhpcy5zZXRCYWNrZ3JvdW5kSW1hZ2UoYmFja0ltYWdlQ29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5tYWdpY3MuZm9yRWFjaCgobWFnaWMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZ3JhcGhpY0NvbXBvbmVudCA9IG1hZ2ljLmdldEdyYXBoaWNDb21wb25lbnQoKTtcclxuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBncmFwaGljQ29tcG9uZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbWFnaWNOYW1lID0gbWFnaWMuZ2V0TmFtZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBtYWdpY05hbWVXaWR0aCA9IE1hdGguY2VpbChnZXRUZXh0V2lkdGhXaXRoQ2FudmFzKG1hZ2ljTmFtZSwgJ21vbm9zcGFjZScsICcxNnB4JykpO1xyXG5cclxuICAgICAgICAgICAgZ3JhcGhpY0NvbXBvbmVudC5zZXRCb3VuZGluZ0NsaWVudFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hZ2ljV2l0aE5hbWUgPSBuZXcgQ29tcG9zaXRlQ29tcG9uZW50KDUsIHRoaXMudG90YWxXaWR0aCArIDUsIHdpZHRoLCBoZWlnaHQgKyAzICsgMTYpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgbWFnaWNOYW1lTGFiZWwgPSBuZXcgTGFiZWwoMCwgMCwgbWFnaWNOYW1lV2lkdGgsIDE2LCBtYWdpY05hbWUpO1xyXG5cclxuICAgICAgICAgICAgbWFnaWNOYW1lTGFiZWwucHJvcGVydGllcy5jdXJzb3IgPSAnYXV0byc7XHJcblxyXG4gICAgICAgICAgICBtYWdpY1dpdGhOYW1lLmFkZENvbXBvbmVudChncmFwaGljQ29tcG9uZW50LCAncGljdHVyZScpO1xyXG4gICAgICAgICAgICBtYWdpY1dpdGhOYW1lLmFkZENvbXBvbmVudChtYWdpY05hbWVMYWJlbCwgJ25hbWUnKTtcclxuICAgICAgICAgICAgbWFnaWNOYW1lTGFiZWwuYWxpZ25DZW50ZXIoKTtcclxuXHJcbiAgICAgICAgICAgIG1hZ2ljTmFtZUxhYmVsLnNldEJvdW5kaW5nQ2xpZW50UmVjdChoZWlnaHQgKyAzKTtcclxuICAgICAgICAgICAgbWFnaWNOYW1lTGFiZWwuc2V0VGV4dENvbG9yKCcjRThENDc4Jyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFkZENvbXBvbmVudChtYWdpY1dpdGhOYW1lLCBtYWdpYy5nZXROYW1lKCkpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50b3RhbFdpZHRoICs9IDUgKyB3aWR0aDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIGFkZE1hZ2ljU2VsZWN0aW5nRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudCkge1xyXG4gICAgICAgIHRoaXMuZ2V0Q2hpbGRDb21wb25lbnQodGhpcy5idXR0b25LZXkpXHJcbiAgICAgICAgdGhpcy5tYWdpY3MuZm9yRWFjaCgobWFnaWMpID0+IHtcclxuICAgICAgICAgICAgbWFnaWMuZ2V0R3JhcGhpY0NvbXBvbmVudCgpLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRNYWdpY0J5R3JhcGhpY0NvbXBvbmVudChncmFwaGljQ29tcG9uZW50KSB7XHJcbiAgICAgICAgY29uc3QgbWFnaWMgPSB0aGlzLm1hZ2ljcy5maW5kKChtYWdpYykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtYWdpY0dyYXBoaWNDb21wb25lbnQgPSBtYWdpYy5nZXRHcmFwaGljQ29tcG9uZW50KCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gZ3JhcGhpY0NvbXBvbmVudCA9PT0gbWFnaWNHcmFwaGljQ29tcG9uZW50O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbWFnaWMgPyBtYWdpYyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0TWFnaWMoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTWFnaWNTZWxlY3RpbmdFdmVudExpc3RlbmVyKGV2ZW50cy5NT1VTRS5NT1VTRV9ET1dOLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5nZXRQYXJlbnRDb21wb25lbnQoKS5nZXRQYXJlbnRDb21wb25lbnQoKS5maW5kTWFnaWNCeUdyYXBoaWNDb21wb25lbnQoZS50YXJnZXQpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICBcclxufVxyXG4iLCJpbXBvcnQgTGFiZWwgZnJvbSAnLi9MYWJlbCc7XHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIENvbXBvc2l0ZUNvbXBvbmVudCB9IGZyb20gJy4vQ29tcG9uZW50JztcclxuaW1wb3J0IHsgZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyB9IGZyb20gJy4uLy4uL3V0aWxzL3RleHRXaWR0aCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9ncmVzc0JhciBleHRlbmRzIENvbXBvc2l0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBtaW5WYWx1ZSwgbWF4VmFsdWUsIGluaXRpYWxWYWx1ZSwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xyXG4gICAgICAgIHN1cGVyKHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCwgcGFyZW50Q29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5taW5WYWx1ZSA9IG1pblZhbHVlO1xyXG4gICAgICAgIHRoaXMubWF4VmFsdWUgPSBtYXhWYWx1ZTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5vbmVJblBpeGVsID0gKHdpZHRoIC0gMikgLyAobWF4VmFsdWUgLSBtaW5WYWx1ZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhckNvbXBvbmVudCA9IG5ldyBDb21wb25lbnQoMSwgMSwgdGhpcy5vbmVJblBpeGVsICogKGluaXRpYWxWYWx1ZSAtIG1pblZhbHVlKSwgaGVpZ2h0IC0gMik7XHJcbiAgICAgICAgYmFyQ29tcG9uZW50LnNldEJhY2tncm91bmRDb2xvcignI2FhMDAwMCcpO1xyXG4gICAgICAgIHRoaXMuc2V0QmFja2dyb3VuZENvbG9yKCcjZmZmZmZmJyk7XHJcblxyXG4gICAgICAgIHRoaXMuYmFyQ29tcG9uZW50S2V5ID0gJ2Jhcic7XHJcblxyXG4gICAgICAgIGNvbnN0IGxhYmVsVGV4dCA9IGAke2luaXRpYWxWYWx1ZX0vJHttYXhWYWx1ZX1gO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0V2lkdGggPSBNYXRoLmNlaWwoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyhsYWJlbFRleHQsJ21vbm9zcGFjZScsIDE2KSkgKyAxO1xyXG5cclxuICAgICAgICBjb25zdCBsYWJlbCA9IG5ldyBMYWJlbCgwICwgMCwgdGV4dFdpZHRoLCAxNiwgbGFiZWxUZXh0KTtcclxuXHJcbiAgICAgICAgdGhpcy5sYWJlbENvbXBvbmVudEtleSA9ICdsYWJlbCc7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGJhckNvbXBvbmVudCwgdGhpcy5iYXJDb21wb25lbnRLZXkpO1xyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGxhYmVsLCB0aGlzLmxhYmVsQ29tcG9uZW50S2V5KTtcclxuXHJcbiAgICAgICAgbGFiZWwuYWxpZ25DZW50ZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUZXh0Q29tcG9uZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMubGFiZWxDb21wb25lbnRLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJhckNvbXBvbmVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLmJhckNvbXBvbmVudEtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QmFyQ29sb3IoY29sb3IgPSAnI2FhMDAwMCcpIHtcclxuICAgICAgICB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuYmFyQ29tcG9uZW50S2V5KS5zZXRCYWNrZ3JvdW5kQ29sb3IoY29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCBiYXIgPSB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuYmFyQ29tcG9uZW50S2V5KTtcclxuICAgICAgICBjb25zdCB7IHRvcCwgbGVmdCwgaGVpZ2h0IH0gPSBiYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgIGJhci5zZXRCb3VuZGluZ0NsaWVudFJlY3QodG9wLCBsZWZ0LCBNYXRoLmZsb29yKHZhbHVlICogdGhpcy5vbmVJblBpeGVsKSwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29uc3QgbGFiZWxUZXh0ID0gYCR7dmFsdWV9LyR7dGhpcy5tYXhWYWx1ZX1gO1xyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLmxhYmVsQ29tcG9uZW50S2V5KTtcclxuICAgICAgICBsYWJlbC5zZXRUZXh0KGxhYmVsVGV4dCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgaGVpZ2h0OiBoZWlnaHRMYWJlbCB9ID0gbGFiZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRleHRXaWR0aCA9IE1hdGguY2VpbChnZXRUZXh0V2lkdGhXaXRoQ2FudmFzKGxhYmVsVGV4dCwnbW9ub3NwYWNlJywgMTYpKSArIDE7XHJcblxyXG4gICAgICAgIGxhYmVsLnNldEJvdW5kaW5nQ2xpZW50UmVjdCgwLCAwLCB0ZXh0V2lkdGgsIGhlaWdodExhYmVsKTtcclxuICAgICAgICBsYWJlbC5hbGlnbkNlbnRlcigpO1xyXG4gICAgfVxyXG4gfVxyXG5cclxuIiwiaW1wb3J0IEltYWdlQ29tcG9uZW50IGZyb20gXCIuLi9JbWFnZUNvbXBvbmVudC9JbWFnZUNvbXBvbmVudFwiO1xyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb3NpdGVDb21wb25lbnQgfSBmcm9tIFwiLi9Db21wb25lbnRcIjtcclxuaW1wb3J0IHsgZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyB9IGZyb20gXCIuLi8uLi91dGlscy90ZXh0V2lkdGhcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXR1c0JhciBleHRlbmRzIENvbXBvc2l0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBpbWFnZXMgPSB7fSwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xyXG4gICAgICAgIHN1cGVyKHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCwgcGFyZW50Q29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbmVteUluZm9XaW5kb3dLZXkgPSAnZW5lbXknO1xyXG4gICAgICAgIHRoaXMucGxheWVySW5mb1dpbmRvd0tleSA9ICdwbGF5ZXInO1xyXG5cclxuICAgICAgICBjb25zdCBiYWNrID0gaW1hZ2VzLmJhY2s7XHJcbiAgICAgICAgY29uc3QgbGVmdEltZyA9IGltYWdlcy5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gaW1hZ2VzLnJpZ2h0O1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IGJhY2tXaWR0aCwgbmF0dXJhbEhlaWdodDogYmFja0hlaWdodCB9ID0gYmFjaztcclxuICAgICAgICBjb25zdCB7IG5hdHVyYWxXaWR0aDogbGVmdFdpZHRoLCBuYXR1cmFsSGVpZ2h0OiBsZWZ0SGVpZ2h0IH0gPSBsZWZ0SW1nO1xyXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiByaWdodFdpZHRoLCBuYXR1cmFsSGVpZ2h0OiByaWdodEhlaWdodCB9ID0gcmlnaHQ7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhY2tJbWdDb21wb25lbnQgPSBuZXcgSW1hZ2VDb21wb25lbnQoYmFjaywgMCwgMCwgYmFja1dpZHRoLCBiYWNrSGVpZ2h0LCBiYWNrV2lkdGgsIGJhY2tIZWlnaHQsIDAsIDAsIGJhY2tXaWR0aCwgYmFja0hlaWdodCk7XHJcbiAgICAgICAgY29uc3QgbGVmdEltZ0NvbXBvbmVudCA9IG5ldyBJbWFnZUNvbXBvbmVudChsZWZ0SW1nLCAwLCAwLCBsZWZ0V2lkdGgsIGxlZnRIZWlnaHQsIGxlZnRXaWR0aCwgbGVmdEhlaWdodCwgMCwgMCwgbGVmdFdpZHRoLCBsZWZ0SGVpZ2h0KTtcclxuICAgICAgICBjb25zdCByaWdodEltZ0NvbXBvbmVudCA9IG5ldyBJbWFnZUNvbXBvbmVudChyaWdodCwgMCwgMCwgcmlnaHRXaWR0aCwgcmlnaHRIZWlnaHQsIHJpZ2h0V2lkdGgsIHJpZ2h0SGVpZ2h0LCAwLCAwLCByaWdodFdpZHRoLCByaWdodEhlaWdodCk7XHJcbiAgICAgXHJcbiAgICAgICAgbGV0IHRvdGFsV2lkdGggPSAwO1xyXG5cclxuICAgICAgICB3aGlsZSAodG90YWxXaWR0aCA8IHdpZHRoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBDb21wb25lbnQoMCwgdG90YWxXaWR0aCwgYmFja1dpZHRoLCBiYWNrSGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIGNvbXBvbmVudC5zZXRCYWNrZ3JvdW5kSW1hZ2UoYmFja0ltZ0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcblxyXG4gICAgICAgICAgICB0b3RhbFdpZHRoICs9IGJhY2tXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxlZnRDb21wb25lbnQgPSBuZXcgQ29tcG9uZW50KDAsIDAsIGxlZnRXaWR0aCwgbGVmdEhlaWdodCk7XHJcblxyXG4gICAgICAgIGxlZnRDb21wb25lbnQuc2V0QmFja2dyb3VuZEltYWdlKGxlZnRJbWdDb21wb25lbnQpO1xyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGxlZnRDb21wb25lbnQpO1xyXG5cclxuICAgICAgICBjb25zdCByaWdodENvbXBvbmVudCA9IG5ldyBDb21wb25lbnQoMCwgd2lkdGggLSByaWdodFdpZHRoLCByaWdodFdpZHRoLCByaWdodEhlaWdodCk7XHJcblxyXG4gICAgICAgIHJpZ2h0Q29tcG9uZW50LnNldEJhY2tncm91bmRJbWFnZShyaWdodEltZ0NvbXBvbmVudCk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQocmlnaHRDb21wb25lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBsYXllckluZm9XaW5kb3coKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb21wb25lbnQodGhpcy5wbGF5ZXJJbmZvV2luZG93S2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbmVteUluZm9XaW5kb3coKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb21wb25lbnQodGhpcy5lbmVteUluZm9XaW5kb3dLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEVuZW15SW5mb1dpbmRvdyhlbmVteUluZm9XaW5kb3cpIHtcclxuICAgICAgICBjb25zdCBlbmVteSA9IHRoaXMuZ2V0Q2hpbGRDb21wb25lbnQodGhpcy5lbmVteUluZm9XaW5kb3dLZXkpO1xyXG5cclxuICAgICAgICBpZiAoZW5lbXkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDb21wb25lbnQoZW5lbXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoZW5lbXlJbmZvV2luZG93LCB0aGlzLmVuZW15SW5mb1dpbmRvd0tleSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UGxheWVySW5mb1dpbmRvdyhwbGF5ZXJJbmZvV2luZG93KSB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyID0gdGhpcy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLnBsYXllckluZm9XaW5kb3dLZXkpO1xyXG5cclxuICAgICAgICBpZiAocGxheWVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ29tcG9uZW50KHBsYXllcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChwbGF5ZXJJbmZvV2luZG93LCB0aGlzLnBsYXllckluZm9XaW5kb3dLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEVuZW15SW5mbyhuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IGVuZW15ID0gdGhpcy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLmVuZW15SW5mb1dpbmRvd0tleSk7XHJcbiAgICAgICAgZW5lbXkuZ2V0Q2hpbGRDb21wb25lbnQoZW5lbXkuaGVhbHRoQmFyS2V5KS5zZXRWYWx1ZSh2YWx1ZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gZW5lbXkuZ2V0Q2hpbGRDb21wb25lbnQoZW5lbXkubmFtZUxhYmVsS2V5KTtcclxuICAgICAgICBsYWJlbC5zZXRUZXh0KG5hbWUpO1xyXG5cclxuICAgICAgICBjb25zdCB7IHRvcCwgbGVmdCwgaGVpZ2h0IH0gPSBsYWJlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCBuYW1lV2lkdGggPSBNYXRoLmNlaWwoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyhuYW1lLCBsYWJlbC5wcm9wZXJ0aWVzLnRleHRQcm9wZXJ0aWVzLmZvbnRGYW1pbHksIGxhYmVsLnByb3BlcnRpZXMudGV4dFByb3BlcnRpZXMuZm9udFNpemUpKTtcclxuXHJcbiAgICAgICAgbGFiZWwuc2V0Qm91bmRpbmdDbGllbnRSZWN0KHRvcCwgbGVmdCwgbmFtZVdpZHRoLCBoZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFBsYXllckluZm8obmFtZSwgdmFsdWUpIHtcclxuICAgICAgICBjb25zdCBwbGF5ZXIgPSB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMucGxheWVySW5mb1dpbmRvd0tleSk7XHJcbiAgICAgICAgcGxheWVyLmdldENoaWxkQ29tcG9uZW50KHBsYXllci5oZWFsdGhCYXJLZXkpLnNldFZhbHVlKHZhbHVlKTtcclxuXHJcbiAgICAgICAgY29uc3QgbGFiZWwgPSBwbGF5ZXIuZ2V0Q2hpbGRDb21wb25lbnQocGxheWVyLm5hbWVMYWJlbEtleSk7XHJcbiAgICAgICAgbGFiZWwuc2V0VGV4dChuYW1lKTtcclxuXHJcbiAgICAgICAgY29uc3QgeyB0b3AsIGxlZnQsIGhlaWdodCB9ID0gbGFiZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgbmFtZVdpZHRoID0gTWF0aC5jZWlsKGdldFRleHRXaWR0aFdpdGhDYW52YXMobmFtZSwgbGFiZWwucHJvcGVydGllcy50ZXh0UHJvcGVydGllcy5mb250RmFtaWx5LCBsYWJlbC5wcm9wZXJ0aWVzLnRleHRQcm9wZXJ0aWVzLmZvbnRTaXplKSk7XHJcblxyXG4gICAgICAgIGxhYmVsLnNldEJvdW5kaW5nQ2xpZW50UmVjdCh0b3AsIGxlZnQsIG5hbWVXaWR0aCwgaGVpZ2h0KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgTGFiZWwgZnJvbSBcIi4vTGFiZWxcIjtcclxuaW1wb3J0IFByb2dyZXNzQmFyIGZyb20gXCIuL1Byb2dyZXNzQmFyXCI7XHJcbmltcG9ydCBJbWFnZUNvbXBvbmVudCBmcm9tIFwiLi4vSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnRcIjtcclxuXHJcbmltcG9ydCB7IENvbXBvc2l0ZUNvbXBvbmVudCB9IGZyb20gXCIuL0NvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBnZXRUZXh0V2lkdGhXaXRoQ2FudmFzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3RleHRXaWR0aFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hhcmFjdGVySW5mb1dpbmRvdyBleHRlbmRzIENvbXBvc2l0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBjaGFyYWN0ZXJOYW1lID0gJycsIG1pbkhQLCBtYXhIUCwgaW5pdGlhbEhQLCBpbWFnZXMgPSB7fSwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xyXG4gICAgICAgIHN1cGVyKHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCwgcGFyZW50Q29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgY29uc3QgbmFtZVdpZHRoID0gTWF0aC5jZWlsKGdldFRleHRXaWR0aFdpdGhDYW52YXMoYCR7Y2hhcmFjdGVyTmFtZX06YCwgJ21vbm9zcGFjZScsIDE2KSkgKyAxO1xyXG5cclxuICAgICAgICBjb25zdCBuYW1lTGFiZWwgPSBuZXcgTGFiZWwoMTUsIDEwLCBuYW1lV2lkdGggKyAxLCAxNiwgYCR7Y2hhcmFjdGVyTmFtZX06YCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWx0aEJhciA9IG5ldyBQcm9ncmVzc0JhcigxNiArIDE1ICsgMywgMTAsIHdpZHRoIC0gMjQsIDI1LCBtaW5IUCwgbWF4SFAsIGluaXRpYWxIUCk7XHJcblxyXG4gICAgICAgIHRoaXMubmFtZUxhYmVsS2V5ID0gJ25hbWVsYWJlbCc7XHJcbiAgICAgICAgdGhpcy5oZWFsdGhCYXJLZXkgPSAnaGVhbHRiYXInO1xyXG5cclxuICAgICAgICBuYW1lTGFiZWwuc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiBpbWdXaWR0aCwgbmF0dXJhbEhlaWdodDogaW1nSGVpZ2h0IH0gPSBpbWFnZXMuYmFjaztcclxuXHJcbiAgICAgICAgY29uc3QgYmFja0ltYWdlQ29tcG9uZW50ID0gbmV3IEltYWdlQ29tcG9uZW50KGltYWdlcy5iYWNrLCAwLCAwLCBpbWdXaWR0aCwgaW1nSGVpZ2h0LCBpbWdXaWR0aCwgaW1nSGVpZ2h0LCAwLCAwLCBpbWdXaWR0aCwgaW1nSGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQobmFtZUxhYmVsLCB0aGlzLm5hbWVMYWJlbEtleSk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoaGVhbHRoQmFyLCB0aGlzLmhlYWx0aEJhcktleSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0QmFja2dyb3VuZEltYWdlKGJhY2tJbWFnZUNvbXBvbmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SGVhbHRoQmFyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuaGVhbHRoQmFyS2V5KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb3NpdGVDb21wb25lbnQgfSBmcm9tICcuL0NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJsZSBleHRlbmRzIENvbXBvc2l0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCByb3dDb3VudCA9IDAsIGNvbHVtbkNvdW50ID0gMCwgY2VsbFdpZHRoID0gMCwgY2VsbEhlaWdodCA9IDAsIHBhcmVudENvbXBvbmVudCA9IG51bGwpIHtcclxuICAgICAgICBzdXBlcih0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQsIHBhcmVudENvbXBvbmVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuY29sdW1uQ291bnQgPSBjb2x1bW5Db3VudDtcclxuICAgICAgICB0aGlzLnJvd0NvdW50ID0gcm93Q291bnQ7XHJcblxyXG4gICAgICAgIGxldCB0b3RhbFJvd3NIZWlnaHQgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93Q291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdG90YWxSb3dzV2lkdGggPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbkNvdW50OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBuZXcgQ29tcG9zaXRlQ29tcG9uZW50KHRvdGFsUm93c0hlaWdodCwgdG90YWxSb3dzV2lkdGgsIGNlbGxXaWR0aCwgY2VsbEhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZENvbXBvbmVudChjZWxsLCBTdHJpbmcoaSAqIGNvbHVtbkNvdW50ICsgaikpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNlbGwuc2V0QmFja2dyb3VuZENvbG9yKCdyZ2JhKDAsIDAsIDAsIDApJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdG90YWxSb3dzV2lkdGggKz0gY2VsbFdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b3RhbFJvd3NIZWlnaHQgKz0gY2VsbEhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGFibGVDb21wb25lbnQocm93ID0gMCwgY29sdW1uID0gMCkge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5nZXRDaGlsZENvbXBvbmVudChTdHJpbmcocm93ICogdGhpcy5jb2x1bW5Db3VudCArIGNvbHVtbikpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2hpbGQgPyBjaGlsZCA6IG51bGw7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGdldEZpbGVTaXplID0gKHVybCkgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgeGhyLm9wZW4oXCJIRUFEXCIsIHVybCwgdHJ1ZSk7IFxyXG4gXHJcbiAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IHhoci5ET05FKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHhoci5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtTGVuZ3RoXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgeGhyLnNlbmQoKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEZpbGVCbG9iID0gKHVybCwgb25wcm9ncmVzcywgaWRlbnRpZmllcikgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeG1sSFRUUCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIHhtbEhUVFAub3BlbignR0VUJywgdXJsLCB0cnVlKTtcclxuICAgICAgICB4bWxIVFRQLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XHJcblxyXG4gICAgICAgIGxldCBwcmV2VmFsdWUgPSAtMTtcclxuXHJcbiAgICAgICAgeG1sSFRUUC5vbmxvYWQgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3htbEhUVFAucmVzcG9uc2VdKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSh3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgeG1sSFRUUC5vbnByb2dyZXNzID0gKCh7IGxvYWRlZCB9KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChsb2FkZWQgIT09IHByZXZWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcHJldlZhbHVlID0gbG9hZGVkO1xyXG5cclxuICAgICAgICAgICAgICAgIG9ucHJvZ3Jlc3MobG9hZGVkLCBpZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB4bWxIVFRQLnNlbmQoKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNyZWF0ZUZpbGVQcm9taXNlID0gKGZpbGUpID0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIGZpbGUub25sb2FkID0gKGkpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZShpLnNyY0VsZW1lbnQpO1xyXG4gICAgICAgIH0gXHJcbiAgICB9KVxyXG59O1xyXG4iLCJpbXBvcnQgeyBnZXRGaWxlU2l6ZSwgZ2V0RmlsZUJsb2IsIGNyZWF0ZUZpbGVQcm9taXNlIH0gZnJvbSAnLi4vdXRpbHMvZmlsZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2FkTWFuYWdlciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnRvdGFsU2l6ZSA9IDA7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TG9hZGVkU2l6ZSA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuaW1hZ2VVcmwgPSBbXTtcclxuICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLnNvdW5kVXJsID0gW107XHJcbiAgICAgICAgdGhpcy5sb2FkZWRTb3VuZCA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFVybCh1cmxPYmplY3QsIG5hbWVPYmopIHtcclxuICAgICAgICBjb25zdCBzb3VuZFVybEFycmF5ID0gdXJsT2JqZWN0LnNvdW5kO1xyXG4gICAgICAgIGNvbnN0IGltYWdlVXJsQXJyYXkgPSB1cmxPYmplY3QuaW1hZ2U7XHJcblxyXG4gICAgICAgIGNvbnN0IHNvdW5kTmFtZSA9IG5hbWVPYmouc291bmQ7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VOYW1lID0gbmFtZU9iai5pbWFnZTtcclxuICAgICAgICBsZXQgaW5kZXggPSAtMTtcclxuXHJcbiAgICAgICAgaWYgKGltYWdlVXJsQXJyYXkpIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmltYWdlVXJsLmZpbmRJbmRleCgoeyBuYW1lOiB1cmxOYW1lIH0pID0+IHVybE5hbWUgPT09IGltYWdlTmFtZSk7XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZVVybFtpbmRleF0udXJscyA9IFsuLi50aGlzLmltYWdlVXJsW2luZGV4XS51cmxzLCAuLi5pbWFnZVVybEFycmF5XVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZVVybC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICB1cmxzOiBbLi4uaW1hZ2VVcmxBcnJheV0sXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaW1hZ2VOYW1lXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNvdW5kVXJsQXJyYXkpIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLnNvdW5kVXJsLmZpbmRJbmRleCgoeyBuYW1lOiB1cmxOYW1lIH0pID0+IHVybE5hbWUgPT09IHNvdW5kTmFtZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAofmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvdW5kVXJsW2luZGV4XS51cmxzID0gWy4uLnRoaXMuc291bmRVcmxbaW5kZXhdLnVybHMsIC4uLnNvdW5kVXJsQXJyYXldXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvdW5kVXJsLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybHM6IFsuLi5zb3VuZFVybEFycmF5XSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBzb3VuZE5hbWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNhbGN1bGF0ZVRvdGFsU2l6ZSgpIHtcclxuICAgICAgICBjb25zdCBwcm9taXNlQXJyID0gW107XHJcblxyXG4gICAgICAgIGxldCBpbWFnZUNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5pbWFnZVVybC5mb3JFYWNoKCh7IHVybHMgfSkgPT4ge1xyXG4gICAgICAgICAgICB1cmxzLmZvckVhY2goKHVybCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZUFyci5wdXNoKGdldEZpbGVTaXplKHVybCkpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VDb3VudCArPSAxO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNvdW5kVXJsLmZvckVhY2goKHsgdXJscyB9KSA9PiB7XHJcbiAgICAgICAgICAgIHVybHMuZm9yRWFjaCgodXJsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlQXJyLnB1c2goZ2V0RmlsZVNpemUodXJsKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFzc2V0c1NpemUgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlQXJyKTtcclxuXHJcbiAgICAgICAgdGhpcy50b3RhbFNpemUgPSBhc3NldHNTaXplLnJlZHVjZSgocHJldiwgc2l6ZSkgPT4gcHJldiArIHBhcnNlSW50KHNpemUsIDEwKSwgMCk7XHJcbiAgICAgICAgdGhpcy5pbWFnZXNTaXplID0gYXNzZXRzU2l6ZS5zbGljZSgwLCBpbWFnZUNvdW50KTtcclxuICAgICAgICB0aGlzLnNvdW5kU2l6ZSA9IGFzc2V0c1NpemUuc2xpY2UoaW1hZ2VDb3VudCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdGFsU2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBsb2FkKG9ucHJvZ3Jlc3NDYWxsYmFjaykge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2VBcnIgPSBbXTtcclxuICAgICAgICBjb25zdCBsb2FkUHJvZ3Jlc3MgPSB7fTtcclxuXHJcbiAgICAgICAgY29uc3Qgb25wcm9ncmVzcyA9ICh2YWx1ZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBsb2FkUHJvZ3Jlc3NbaV0gPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50TG9hZGVkU2l6ZSA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhsb2FkUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMb2FkZWRTaXplICs9IGxvYWRQcm9ncmVzc1trZXlzW2ldXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50TG9hZGVkU2l6ZSA9IGN1cnJlbnRMb2FkZWRTaXplO1xyXG4gICAgICAgICAgICBjb25zdCBwZXJjZW50ID0gTWF0aC5yb3VuZCh0aGlzLmN1cnJlbnRMb2FkZWRTaXplIC8gdGhpcy50b3RhbFNpemUgKiAxMDApO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9ucHJvZ3Jlc3NDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgb25wcm9ncmVzc0NhbGxiYWNrKHBlcmNlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IGltYWdlQ291bnQgPSAwO1xyXG5cclxuICAgICAgICBsZXQgaWQgPSAwO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VVcmwuZm9yRWFjaCgoeyB1cmxzIH0pID0+IHtcclxuICAgICAgICAgICAgdXJscy5mb3JFYWNoKCh1cmwpID0+IHtcclxuICAgICAgICAgICAgICAgIHByb21pc2VBcnIucHVzaChnZXRGaWxlQmxvYih1cmwsIG9ucHJvZ3Jlc3MsIGlkKSk7XHJcbiAgICAgICAgICAgICAgICBpZCArPSAxO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2VDb3VudCArPSAxO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zb3VuZFVybC5mb3JFYWNoKCh7IHVybHMgfSkgPT4ge1xyXG4gICAgICAgICAgICB1cmxzLmZvckVhY2goKHVybCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcHJvbWlzZUFyci5wdXNoKGdldEZpbGVCbG9iKHVybCwgb25wcm9ncmVzcywgaWQpKTtcclxuICAgICAgICAgICAgICAgIGlkICs9IDE7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBibG9icyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VBcnIpO1xyXG5cclxuICAgICAgICBjb25zdCBpbWdQcm9taXNlID0gYmxvYnMuc2xpY2UoMCwgaW1hZ2VDb3VudCkubWFwKChibG9iKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICBpbWcuc3JjID0gYmxvYjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVGaWxlUHJvbWlzZShpbWcpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBzb3VuZFByb21pc2UgPSBibG9icy5zbGljZShpbWFnZUNvdW50KS5tYXAoKGJsb2IpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc291bmQgPSBuZXcgQXVkaW8oKTtcclxuICAgICAgICAgICAgc291bmQuc3JjID0gYmxvYjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzb3VuZDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgYXNzZXRzUHJvbWlzZSA9IFsuLi5pbWdQcm9taXNlXTtcclxuICAgICAgICBsZXQgYXNzZXRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYXNzZXRzUHJvbWlzZSk7XHJcbiAgICAgICAgYXNzZXRzID0gWy4uLmFzc2V0cywgLi4uc291bmRQcm9taXNlXTtcclxuXHJcbiAgICAgICAgY29uc3QgZ3JvdXBlZCA9IHtcclxuICAgICAgICAgICAgaW1hZ2VzOiBbXSxcclxuICAgICAgICAgICAgc291bmQ6IFtdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IGsgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pbWFnZVVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLmltYWdlVXJsW2ldLnVybHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5pbWFnZVVybFtpXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgZ3JvdXBlZC5pbWFnZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpbWFnZXM6IGFzc2V0cy5zbGljZShrLCBrICsgbGVuZ3RoKSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBrICs9IGxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zb3VuZFVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLnNvdW5kVXJsW2ldLnVybHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5zb3VuZFVybFtpXS5uYW1lO1xyXG5cclxuICAgICAgICAgICAgZ3JvdXBlZC5zb3VuZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHNvdW5kOiBhc3NldHMuc2xpY2UoaywgayArIGxlbmd0aCksXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgayArPSBsZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmltYWdlVXJsID0gW107XHJcbiAgICAgICAgdGhpcy5zb3VuZFVybCA9IFtdO1xyXG4gICAgICAgIHRoaXMubG9hZGVkID0gey4uLnRoaXMubG9hZGVkSW1hZ2VzLCAuLi5ncm91cGVkIH07ICAgICAgICBcclxuXHJcbiAgICAgICAgcmV0dXJuIGdyb3VwZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW1hZ2VzQnlOYW1lKG5hbWUpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMubG9hZGVkLmltYWdlcy5maW5kSW5kZXgoKHsgbmFtZTogaW1hZ2VzTmFtZSB9KSA9PiBpbWFnZXNOYW1lID09PSBuYW1lKTtcclxuICAgICAgICByZXR1cm4gKH5pbmRleCkgPyB0aGlzLmxvYWRlZC5pbWFnZXNbaW5kZXhdLmltYWdlcyA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U291bmRCeU5hbWUobmFtZSkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5sb2FkZWQuc291bmQuZmluZEluZGV4KCh7IG5hbWU6IHNvdW5kTmFtZSB9KSA9PiBzb3VuZE5hbWUgPT09IG5hbWUpO1xyXG4gICAgICAgIHJldHVybiAofmluZGV4KSA/IHRoaXMubG9hZGVkLnNvdW5kW2luZGV4XS5zb3VuZCA6IG51bGw7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcmFnZU1hbmFnZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5rZXlzID0gW107XHJcbiAgICAgICAgdGhpcy5yZWNvcmRzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxTdG9yYWdlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGxvY2FsU3RvcmFnZS5rZXkoaSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoa2V5Lm1hdGNoKC9tYWxla3lsaWstZ2FtZS8pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBhcnNlUmVjb3JkcygpOyAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZVJlc3VsdChuYW1lLCBtb25zdGVyS2lsbGVkKSB7XHJcbiAgICAgICAgdGhpcy5yZWNvcmRzLnB1c2goe1xyXG4gICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICBtb25zdGVyS2lsbGVkXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucmVjb3Jkcy5zb3J0KChsLCByKSA9PiBsLnRpbWUgLSByLnRpbWUpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucmVjb3Jkcy5sZW5ndGggJiYgaSA8IDEwOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgeyBuYW1lLCBtb25zdGVyS2lsbGVkIH0gPSB0aGlzLnJlY29yZHNbaV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZWNvcmQgPSBgbmFtZT0ke25hbWV9O21vbnN0ZXJLaWxsZWQ9JHttb25zdGVyS2lsbGVkfTtgO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWFsZWt5bGlrLWdhbWU9JyArIGksIHJlY29yZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5yZWNvcmRzLmxlbmd0aCA+IDEwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjb3JkcyA9IHRoaXMucmVjb3Jkcy5zbGljZSgwLCAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBhcnNlUmVjb3JkcygpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMua2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCByZWNvcmQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmtleXNbaV0pLnNwbGl0KCc7Jyk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBuYW1lID0gcmVjb3JkWzBdLnNwbGl0KCc9JylbMV07XHJcbiAgICAgICAgICAgIGNvbnN0IG1vbnN0ZXJLaWxsZWQgPSByZWNvcmRbMV0uc3BsaXQoJz0nKVsxXTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZE9iamVjdCA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgICBtb25zdGVyS2lsbGVkLFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlY29yZHMucHVzaChyZWNvcmRPYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRTb3J0ZWRSZWNvcmRzKCkge1xyXG4gICAgICAgIHRoaXMucmVjb3Jkcy5zb3J0KChsLCByKSA9PiByLm1vbnN0ZXJLaWxsZWQgLSBsLm1vbnN0ZXJLaWxsZWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlY29yZHM7XHJcbiAgICB9XHJcbn1cclxuIiwiY29uc3QgUEFUSCA9IHtcclxuICAgIElNQUdFOiB7XHJcbiAgICAgICAgSEVBRF9JTUFHRVM6ICcuL2Fzc2V0cy9pbWFnZXMvbW9uc3RlcnMvaGVhZHMnLFxyXG4gICAgICAgIEJPRFlfSU1BR0VTOiAnLi9hc3NldHMvaW1hZ2VzL21vbnN0ZXJzL2JvZGllcycsXHJcbiAgICAgICAgTEVGVF9BUk1fSU1BR0VTOiAnLi9hc3NldHMvaW1hZ2VzL21vbnN0ZXJzL2FybXMvbGVmdCcsXHJcbiAgICAgICAgUklHSFRfQVJNX0lNQUdFUzogJy4vYXNzZXRzL2ltYWdlcy9tb25zdGVycy9hcm1zL3JpZ2h0JyxcclxuICAgICAgICBMRUdfSU1BR0VTOiAnLi9hc3NldHMvaW1hZ2VzL21vbnN0ZXJzL2xlZ3MnLFxyXG4gICAgICAgIEJBQ0tHUk9VTkRfSU1BR0VTOiAnLi9hc3NldHMvaW1hZ2VzJyxcclxuICAgICAgICBNQUlOX0NIQVI6ICcuL2Fzc2V0cy9pbWFnZXMnLFxyXG4gICAgICAgIE1BR0lDOiAnLi9hc3NldHMvaW1hZ2VzL21hZ2ljJyxcclxuICAgICAgICBVSTogJy4vYXNzZXRzL2ltYWdlcy91aScsXHJcbiAgICAgICAgVEFTSzoge1xyXG4gICAgICAgICAgICBOQU1FOiAnLi9hc3NldHMvaW1hZ2VzL3Rhc2svbmFtZSdcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIFNPVU5EOiB7XHJcbiAgICAgICAgTUFHSUM6ICcuL2Fzc2V0cy9zb3VuZC9tYWdpYydcclxuICAgIH0sXHJcbn07IFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUEFUSDtcclxuIiwiaW1wb3J0IEltYWdlQ29tcG9uZW50IGZyb20gJy4uL1VJL0ltYWdlQ29tcG9uZW50L0ltYWdlQ29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9zaXRlQ29tcG9uZW50IH0gZnJvbSAnLi4vVUkvQ29tcG9uZW50L0NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb25zdGVyR3JhcGhpY0NvbXBvbmVudCBleHRlbmRzIENvbXBvc2l0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AsIGxlZnQsIGhlYWRJbWFnZSwgbGVmdEFybUltYWdlLCByaWdodEltYWdlLCBib2R5SW1hZ2UsIGxlZ0ltYWdlLCBwYXJlbnRDb21wb25lbnQgPSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IGhlYWROYXR1cmFsV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IGhlYWROYXR1cmFsSGVpZ2h0IH0gPSBoZWFkSW1hZ2U7XHJcbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IGJvZHlOYXR1cmFsV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IGJvZHlOYXR1cmFsSGVpZ2h0IH0gPSBib2R5SW1hZ2U7XHJcbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IGxlZnROYXR1cmFsV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IGxlZnROYXR1cmFsSGVpZ2h0IH0gPSBsZWZ0QXJtSW1hZ2U7XHJcbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IHJpZ2h0TmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0OiByaWdodE5hdHVyYWxIZWlnaHQgfSA9IHJpZ2h0SW1hZ2U7XHJcbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IGxlZ05hdHVyYWxXaWR0aCwgbmF0dXJhbEhlaWdodDogbGVnTmF0dXJhbEhlaWdodCB9ID0gbGVnSW1hZ2U7XHJcblxyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gbGVmdE5hdHVyYWxXaWR0aCArIGJvZHlOYXR1cmFsV2lkdGggKyByaWdodE5hdHVyYWxXaWR0aDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSBoZWFkTmF0dXJhbEhlaWdodCArIGJvZHlOYXR1cmFsSGVpZ2h0ICsgbGVnTmF0dXJhbEhlaWdodCAtIDMwO1xyXG5cclxuICAgICAgICBzdXBlcih0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQsIHBhcmVudENvbXBvbmVudCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvZHlDb21wb25lbnQgPSBuZXcgQ29tcG9uZW50KGhlaWdodCAtIGxlZ05hdHVyYWxIZWlnaHQgLSBib2R5TmF0dXJhbEhlaWdodCwgd2lkdGggLyAyIC0gYm9keU5hdHVyYWxXaWR0aCAvIDIsIGJvZHlOYXR1cmFsV2lkdGgsIGJvZHlOYXR1cmFsSGVpZ2h0KTtcclxuICAgICAgICBib2R5Q29tcG9uZW50LnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQoYm9keUltYWdlLCAwLCAwLCBib2R5TmF0dXJhbFdpZHRoLCBib2R5TmF0dXJhbEhlaWdodCwgYm9keU5hdHVyYWxXaWR0aCwgYm9keU5hdHVyYWxIZWlnaHQsIDAsIDAsIGJvZHlOYXR1cmFsV2lkdGgsIGJvZHlOYXR1cmFsSGVpZ2h0KSkgIFxyXG5cclxuICAgICAgICBjb25zdCBoZWFkQ29tcG9uZW50ID0gbmV3IENvbXBvbmVudChoZWlnaHQgLSBsZWdOYXR1cmFsSGVpZ2h0IC0gYm9keU5hdHVyYWxIZWlnaHQgLSBoZWFkTmF0dXJhbEhlaWdodCArIDMwLCB3aWR0aCAvIDIgLSBoZWFkTmF0dXJhbFdpZHRoIC8gMiAtIDE1LCBoZWFkTmF0dXJhbFdpZHRoLCBoZWFkTmF0dXJhbEhlaWdodCk7XHJcbiAgICAgICAgaGVhZENvbXBvbmVudC5zZXRCYWNrZ3JvdW5kSW1hZ2UobmV3IEltYWdlQ29tcG9uZW50KGhlYWRJbWFnZSwgMCwgMCwgaGVhZE5hdHVyYWxXaWR0aCwgaGVhZE5hdHVyYWxIZWlnaHQsIGhlYWROYXR1cmFsV2lkdGgsIGhlYWROYXR1cmFsSGVpZ2h0LCAwLCAwLCBoZWFkTmF0dXJhbFdpZHRoLCBoZWFkTmF0dXJhbEhlaWdodCkpO1xyXG5cclxuICAgICAgICBjb25zdCBsZWdDb21wb25lbnQgPSBuZXcgQ29tcG9uZW50KGhlaWdodCAtIGxlZ05hdHVyYWxIZWlnaHQsIHdpZHRoIC8gMiAtIGxlZ05hdHVyYWxXaWR0aCAvIDIgLSAxMywgbGVnTmF0dXJhbFdpZHRoLCBsZWdOYXR1cmFsSGVpZ2h0KTtcclxuICAgICAgICBsZWdDb21wb25lbnQuc2V0QmFja2dyb3VuZEltYWdlKG5ldyBJbWFnZUNvbXBvbmVudChsZWdJbWFnZSwgMCwgMCwgbGVnTmF0dXJhbFdpZHRoLCBsZWdOYXR1cmFsSGVpZ2h0LCBsZWdOYXR1cmFsV2lkdGgsIGxlZ05hdHVyYWxIZWlnaHQsIDAsIDAsIGxlZ05hdHVyYWxXaWR0aCwgbGVnTmF0dXJhbEhlaWdodCkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGxlZnRBcm1Db21wb25lbnQgPSBuZXcgQ29tcG9uZW50KGhlaWdodCAtIGxlZ05hdHVyYWxIZWlnaHQgLSBib2R5TmF0dXJhbEhlaWdodCArIDQ1LCB3aWR0aCAvIDIgLSAxNSwgbGVmdE5hdHVyYWxXaWR0aCwgbGVmdE5hdHVyYWxIZWlnaHQpO1xyXG4gICAgICAgIGxlZnRBcm1Db21wb25lbnQuc2V0QmFja2dyb3VuZEltYWdlKG5ldyBJbWFnZUNvbXBvbmVudChsZWZ0QXJtSW1hZ2UsIDAsIDAsIGxlZnROYXR1cmFsV2lkdGgsIGxlZnROYXR1cmFsSGVpZ2h0LCBsZWZ0TmF0dXJhbFdpZHRoLCBsZWZ0TmF0dXJhbEhlaWdodCwgMCwgMCwgbGVmdE5hdHVyYWxXaWR0aCwgbGVmdE5hdHVyYWxIZWlnaHQpKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmlnaHRBcm1Db21wb25lbnQgPSBuZXcgQ29tcG9uZW50KGhlaWdodCAtIGxlZ05hdHVyYWxIZWlnaHQgLSBib2R5TmF0dXJhbEhlaWdodCArIDQwLCB3aWR0aCAvIDIgLSA4OSwgcmlnaHROYXR1cmFsV2lkdGgsIHJpZ2h0TmF0dXJhbEhlaWdodCk7XHJcbiAgICAgICAgcmlnaHRBcm1Db21wb25lbnQuc2V0QmFja2dyb3VuZEltYWdlKG5ldyBJbWFnZUNvbXBvbmVudChyaWdodEltYWdlLCAwLCAwLCByaWdodE5hdHVyYWxXaWR0aCwgcmlnaHROYXR1cmFsSGVpZ2h0LCByaWdodE5hdHVyYWxXaWR0aCwgcmlnaHROYXR1cmFsSGVpZ2h0LCAwLCAwLCByaWdodE5hdHVyYWxXaWR0aCwgcmlnaHROYXR1cmFsSGVpZ2h0KSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGJvZHlDb21wb25lbnQsICdib2R5Jyk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoaGVhZENvbXBvbmVudCwgJ2hlYWQnKTtcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChsZWdDb21wb25lbnQsICdsZWcnKTtcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChsZWZ0QXJtQ29tcG9uZW50LCAnbGVmdGFybScpO1xyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KHJpZ2h0QXJtQ29tcG9uZW50LCAncmlnaHRhcm0nKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFyYWN0ZXIge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgbWF4SFAsIGluaXRpYWxIUCwgZ3JhcGhpY0NvbXBvbmVudCA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEhQID0gaW5pdGlhbEhQO1xyXG4gICAgICAgIHRoaXMubWF4SFAgPSBtYXhIUDtcclxuICAgICAgICB0aGlzLmdyYXBoaWNDb21wb25lbnQgPSBncmFwaGljQ29tcG9uZW50O1xyXG4gICAgICAgIHRoaXMubWFnaWNzID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuaHBDaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRHcmFwaGljQ29tcG9uZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdyYXBoaWNDb21wb25lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYXR0YWNrKGNoYXJhY3RlciwgbWFnaWMsIGNhbnZhcykge1xyXG4gICAgICAgIGlmIChtYWdpYykge1xyXG4gICAgICAgICAgICBhd2FpdCBtYWdpYy5hdHRhY2sodGhpcywgY2hhcmFjdGVyLCBjYW52YXMpO1xyXG4gICAgICAgICAgICBjaGFyYWN0ZXIudGFrZUF0dGFjayhtYWdpYy5kYW1hZ2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoYXJhY3Rlci50YWtlQXR0YWNrKDUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0YWtlQXR0YWNrKGRhbWFnZSkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudEhQIC09IGRhbWFnZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudEhQIDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRIUCA9IDA7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaHBDaGFuZ2VMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcclxuICAgICAgICAgICAgbGlzdGVuZXIodGhpcy5jdXJyZW50SFApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTWFnaWMobWFnaWMpIHtcclxuICAgICAgICB0aGlzLm1hZ2ljcy5wdXNoKG1hZ2ljKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNYWdpY3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFnaWNzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDdXJyZW50SFAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEhQO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1heEhQKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1heEhQO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQWxpdmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEhQID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBhZGRIUENoYW5nZUxpc3RlbmVyKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5ocENoYW5nZUxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgTW9uc3RlckdyYXBoaWNDb21wb25lbnQgZnJvbSAnLi4vR3JhcGhpY0NvbXBvbmVudC9Nb25zdGVyR3JhcGhpY0NvbXBvbmVudCc7XHJcbmltcG9ydCBDaGFyYWN0ZXIgZnJvbSAnLi4vQ2hhcmFjdGVyL0NoYXJhY3Rlcic7XHJcblxyXG5jb25zdCBhZGplY3RpdmUgPSBbXHJcbiAgICAn0KPQttCw0YHQvdGL0LknLCBcclxuICAgICfQl9C70L7QsdC90YvQuScsXHJcbiAgICAn0KHQvtC/0LvQuNCy0YvQuScsXHJcbl07XHJcblxyXG5jb25zdCByYWNlID0gW1xyXG4gICAgJ9Ce0LPRgCcsXHJcbiAgICAn0JPQvdC+0LwnLFxyXG4gICAgJ9CT0L7QsdC70LjQvScsXHJcbl07XHJcblxyXG5jb25zdCBuYW1lID0gW1xyXG4gICAgJ9Ci0L7QvCcsXHJcbiAgICAn0JzQsNC60YEnLFxyXG4gICAgJ9CU0LjQvNCwJyxcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbnN0ZXJGYWN0b3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKGhlYWRJbWdzLCBsZWZ0QXJtSW1ncywgcmlnaHRBcm1JbWdzLCBib2R5SW1ncywgbGVnSW1ncykge1xyXG4gICAgICAgIHRoaXMuaGVhZEltZ3MgPSBbLi4uaGVhZEltZ3NdO1xyXG4gICAgICAgIHRoaXMubGVmdEFybUltZ3MgPSBbLi4ubGVmdEFybUltZ3NdO1xyXG4gICAgICAgIHRoaXMucmlnaHRBcm1JbWdzID0gWy4uLnJpZ2h0QXJtSW1nc107XHJcbiAgICAgICAgdGhpcy5ib2R5SW1ncyA9IFsuLi5ib2R5SW1nc107XHJcbiAgICAgICAgdGhpcy5sZWdJbWdzID0gWy4uLmxlZ0ltZ3NdO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU1vbnN0ZXIodG9wID0gMCwgbGVmdCA9IDApIHtcclxuICAgICAgICBjb25zdCByYW5kID0gTWF0aC5yYW5kb207XHJcbiAgICAgICAgY29uc3Qgcm91bmQgPSBNYXRoLnJvdW5kO1xyXG5cclxuICAgICAgICBjb25zdCBoZWFkSW5kZXggPSByb3VuZChyYW5kKCkgKiAodGhpcy5oZWFkSW1ncy5sZW5ndGggLSAxKSk7XHJcbiAgICAgICAgY29uc3QgbGVmdEFybUluZGV4ID0gcm91bmQocmFuZCgpICogKHRoaXMubGVmdEFybUltZ3MubGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0QXJtSW5kZXggPSByb3VuZChyYW5kKCkgKiAodGhpcy5yaWdodEFybUltZ3MubGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgIGNvbnN0IGJvZHlJbmRleCA9IHJvdW5kKHJhbmQoKSAqICh0aGlzLmJvZHlJbWdzLmxlbmd0aCAtIDEpKTtcclxuICAgICAgICBjb25zdCBsZWdJbmRleCA9IHJvdW5kKHJhbmQoKSAqICh0aGlzLmxlZ0ltZ3MubGVuZ3RoIC0gMSkpO1xyXG5cclxuICAgICAgICBjb25zdCBtb25zdGVyR3JhcGhpYyA9IG5ldyBNb25zdGVyR3JhcGhpY0NvbXBvbmVudCh0b3AsIGxlZnQsIHRoaXMuaGVhZEltZ3NbaGVhZEluZGV4XSwgdGhpcy5sZWZ0QXJtSW1nc1tsZWZ0QXJtSW5kZXhdLCB0aGlzLnJpZ2h0QXJtSW1nc1tyaWdodEFybUluZGV4XSwgdGhpcy5ib2R5SW1nc1tib2R5SW5kZXhdLCB0aGlzLmxlZ0ltZ3NbbGVnSW5kZXhdKTtcclxuICAgICAgICBjb25zdCB7IHdpZHRoOiBtb25zdGVyV2lkdGgsICBoZWlnaHQ6IG1vbnN0ZXJIZWlnaHQgfSA9IG1vbnN0ZXJHcmFwaGljLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIG1vbnN0ZXJHcmFwaGljLnNldEJvdW5kaW5nQ2xpZW50UmVjdChNYXRoLmZsb29yKCh3aW5kb3cuaW5uZXJIZWlnaHQgLSAxNTApIC8gMiAtIG1vbnN0ZXJIZWlnaHQgLyAyKSwgTWF0aC5mbG9vcih3aW5kb3cuaW5uZXJXaWR0aCAvIDIgKyAxMDApLCBtb25zdGVyV2lkdGgsIG1vbnN0ZXJIZWlnaHQpO1xyXG5cclxuICAgICAgICBjb25zdCBmaXJzdE5hbWUgPSBhZGplY3RpdmVbcm91bmQocmFuZCgpICogKGFkamVjdGl2ZS5sZW5ndGggLSAxKSldO1xyXG4gICAgICAgIGNvbnN0IHNlY29uZE5hbWUgPSByYWNlW3JvdW5kKHJhbmQoKSAqIChyYWNlLmxlbmd0aCAtIDEpKV07XHJcbiAgICAgICAgY29uc3QgdGhpcmROYW1lID0gbmFtZVtyb3VuZChyYW5kKCkgKiAobmFtZS5sZW5ndGggLSAxKSldO1xyXG5cclxuICAgICAgICBjb25zdCBtb25zdGVyID0gbmV3IENoYXJhY3RlcihgJHtmaXJzdE5hbWV9ICR7c2Vjb25kTmFtZX0gJHt0aGlyZE5hbWV9YCwgMTAwLCAxMDAsIG1vbnN0ZXJHcmFwaGljKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1vbnN0ZXI7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFBBVEggZnJvbSAnLi4vcGF0aC9wYXRoJztcclxuXHJcbmNvbnN0IG5hbWVUYXNrTWFwID0gW1xyXG4gICAge1xyXG4gICAgICAgIG5hbWVzOiBbJ2FsbGlnYXRvcicsICdjcm9jb2RpbGUnXSxcclxuICAgICAgICBpbWFnZTogYCR7UEFUSC5JTUFHRS5UQVNLLk5BTUV9L2FsbGlnYXRvci5qcGdgXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG5hbWVzOiBbJ2JlYXInXSxcclxuICAgICAgICBpbWFnZTogYCR7UEFUSC5JTUFHRS5UQVNLLk5BTUV9L2JlYXIuanBnYFxyXG4gICAgfSxcclxuICAgIHsgXHJcbiAgICAgICAgbmFtZXM6IFsnY3JvdyddLFxyXG4gICAgICAgIGltYWdlOiBgJHtQQVRILklNQUdFLlRBU0suTkFNRX0vY3Jvdy5qcGdgXHJcbiAgICB9LFxyXG4gICAgeyBcclxuICAgICAgICBuYW1lczogWydkb2xwaGluJ10sXHJcbiAgICAgICAgaW1hZ2U6IGAke1BBVEguSU1BR0UuVEFTSy5OQU1FfS9kb2xwaGluLmpwZ2BcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZXM6IFsnZm94J10sXHJcbiAgICAgICAgaW1hZ2U6IGAke1BBVEguSU1BR0UuVEFTSy5OQU1FfS9mb3guanBnYFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lczogWyd0aWdlciddLFxyXG4gICAgICAgIGltYWdlOiBgJHtQQVRILklNQUdFLlRBU0suTkFNRX0vdGlnZXIuanBnYFxyXG4gICAgfSxcclxuICAgIHsgXHJcbiAgICAgICAgbmFtZXM6IFsnbGlvbicsICdsZXYnLCAnbGV3J10sXHJcbiAgICAgICAgaW1hZ2U6IGAke1BBVEguSU1BR0UuVEFTSy5OQU1FfS9saW9uLmpwZ2BcclxuICAgIH0sXHJcbiAgICB7IFxyXG4gICAgICAgIG5hbWVzOiBbJ2NhdCcsICdtYWxlIGNhdCddLFxyXG4gICAgICAgIGltYWdlOiBgJHtQQVRILklNQUdFLlRBU0suTkFNRX0vY2F0LmpwZ2BcclxuICAgIH0sXHJcbiAgICB7IFxyXG4gICAgICAgIG5hbWVzOiBbJ2RvZyddLFxyXG4gICAgICAgIGltYWdlOiBgJHtQQVRILklNQUdFLlRBU0suTkFNRX0vZG9nLmpwZ2BcclxuICAgIH0sXHJcbiAgICB7IFxyXG4gICAgICAgIG5hbWVzOiBbJ2hvcnNlJ10sXHJcbiAgICAgICAgaW1hZ2U6IGAke1BBVEguSU1BR0UuVEFTSy5OQU1FfS9ob3JzZS5qcGdgXHJcbiAgICB9LFxyXG4gICAgeyBcclxuICAgICAgICBuYW1lczogWyd6ZWJyYSddLFxyXG4gICAgICAgIGltYWdlOiBgJHtQQVRILklNQUdFLlRBU0suTkFNRX0vemVicmEuanBnYFxyXG4gICAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5hbWVUYXNrTWFwO1xyXG4iLCJpbXBvcnQgTGFiZWwgZnJvbSAnLi4vLi4vQ29tcG9uZW50L0xhYmVsJztcclxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuLi8uLi9Db21wb25lbnQvQnV0dG9uJztcclxuaW1wb3J0IGV2ZW50cyBmcm9tICcuLi8uLi8uLi9ldmVudC9ldmVudHMvZXZlbnRzJztcclxuaW1wb3J0IEltYWdlQ29tcG9uZW50IGZyb20gJy4uLy4uL0ltYWdlQ29tcG9uZW50L0ltYWdlQ29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IENvbXBvc2l0ZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL0NvbXBvbmVudC9Db21wb25lbnQnO1xyXG5pbXBvcnQgeyBnZXRUZXh0V2lkdGhXaXRoQ2FudmFzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdGV4dFdpZHRoJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2tNb2RhbFdpbmRvdyBleHRlbmRzIENvbXBvc2l0ZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBkZXNjcmlwdGlvbiA9ICcnICwgYWRkaXRpb25hbFJlc291cmNlcyA9IHt9LCBwYXJlbnRDb21wb25lbnQgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xyXG5cclxuICAgICAgICBjb25zdCBoYWxmV2lkdGggPSBNYXRoLmNlaWwod2lkdGggLyAyKTtcclxuICAgICAgICBjb25zdCBoYWxmSGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCAvIDIpO1xyXG4gICAgICAgIGxldCBoYWxmRGVzY3JpcHRpb25XaWR0aCA9IE1hdGguY2VpbCgoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyhkZXNjcmlwdGlvbiwgJ21vbm9zcGFjZScsICcxNnB4JykgKyAxKSAvIDIpO1xyXG5cclxuICAgICAgICBpZiAoaGFsZkRlc2NyaXB0aW9uV2lkdGggPiBoYWxmV2lkdGggLSAyMCkge1xyXG4gICAgICAgICAgICBoYWxmRGVzY3JpcHRpb25XaWR0aCA9IGhhbGZXaWR0aCAtIDIwO1xyXG4gICAgICAgIH1cclxuICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbiA9IG5ldyBMYWJlbCgxMCwgaGFsZldpZHRoIC0gaGFsZkRlc2NyaXB0aW9uV2lkdGgsIGhhbGZEZXNjcmlwdGlvbldpZHRoICogMiwgMzAsIGRlc2NyaXB0aW9uKTtcclxuICAgICAgICBjb25zdCBlbnRlckJ1dHRvbiA9IG5ldyBCdXR0b24oaGFsZkhlaWdodCAqIDIgLSA1MCAtIDUsIGhhbGZXaWR0aCAqIDIgLSAxMDAgLSA1LCAxMDAsIDUwLCAnJyk7XHJcblxyXG4gICAgICAgIHRhc2tEZXNjcmlwdGlvbi5zZXRCYWNrZ3JvdW5kQ29sb3IoJyMwMGJiYmInKTtcclxuXHJcbiAgICAgICAgZW50ZXJCdXR0b24uc2V0QmFja2dyb3VuZENvbG9yKCcjYWFhYWFhJyk7XHJcblxyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25LZXkgPSAnZGVzY3JpcHRpb24nO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uS2V5ID0gJ2J1dHRvbic7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KHRhc2tEZXNjcmlwdGlvbiwgdGhpcy5kZXNjcmlwdGlvbktleSk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoZW50ZXJCdXR0b24sIHRoaXMuYnV0dG9uS2V5KTtcclxuXHJcbiAgICAgICAgdGFza0Rlc2NyaXB0aW9uLnNldEJhY2tncm91bmRDb2xvcigncmdiYSgwLCAwLCAwLCAwKScpO1xyXG4gICAgICAgIHRhc2tEZXNjcmlwdGlvbi5zZXRUZXh0Q29sb3IoJyNmZmZmZmYnKTtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kYWxXaW5kb3dJbWFnZSA9IGFkZGl0aW9uYWxSZXNvdXJjZXMuaW1hZ2VzLm1vZGFsV2luZG93SW1hZ2U7XHJcbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IG1vZGFsV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IG1vZGFsSGVpZ2h0IH0gPSBtb2RhbFdpbmRvd0ltYWdlO1xyXG5cclxuICAgICAgICBjb25zdCBva0J1dHRvbkltYWdlID0gYWRkaXRpb25hbFJlc291cmNlcy5pbWFnZXMub2tCdXR0b25JbWFnZTtcclxuICAgICAgICBjb25zdCB7IG5hdHVyYWxXaWR0aDogb2tCdXR0b25XaWR0aCwgbmF0dXJhbEhlaWdodDogb2tCdXR0b25IZWlnaHQgfSA9IG9rQnV0dG9uSW1hZ2U7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0QmFja2dyb3VuZEltYWdlKG5ldyBJbWFnZUNvbXBvbmVudChtb2RhbFdpbmRvd0ltYWdlLCAwLCAwLCBtb2RhbFdpZHRoLCBtb2RhbEhlaWdodCwgbW9kYWxXaWR0aCwgbW9kYWxIZWlnaHQsIDAsIDAsIG1vZGFsV2lkdGgsIG1vZGFsSGVpZ2h0KSk7XHJcblxyXG4gICAgICAgIGVudGVyQnV0dG9uLnNldEJvdW5kaW5nQ2xpZW50UmVjdChtb2RhbEhlaWdodCAtIDE5IC0gb2tCdXR0b25IZWlnaHQsIG1vZGFsV2lkdGggLSAxOSAtIG9rQnV0dG9uV2lkdGggLyAyLCBva0J1dHRvbldpZHRoIC8gMiwgb2tCdXR0b25IZWlnaHQpO1xyXG4gICAgICAgIGVudGVyQnV0dG9uLnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQob2tCdXR0b25JbWFnZSwgMCwgMCwgb2tCdXR0b25XaWR0aCwgb2tCdXR0b25IZWlnaHQsIG9rQnV0dG9uV2lkdGgsIG9rQnV0dG9uSGVpZ2h0LCAwLCAwLCBva0J1dHRvbldpZHRoIC8gMiwgb2tCdXR0b25IZWlnaHQpKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRPa0J1dHRvbkNvbXBvbmVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLmJ1dHRvbktleSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGFza0Rlc2NyaXB0aW9uQ29tcG9uZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuZGVzY3JpcHRpb25LZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEJ1dHRvbkV2ZW50TGlzdGVuZXIobmFtZSwgZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuYnV0dG9uS2V5KS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBhbnN3ZXJJc1JpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiAgZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmVzdWx0KCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFkZEJ1dHRvbkV2ZW50TGlzdGVuZXIoZXZlbnRzLk1PVVNFLk1PVVNFX0RPV04sICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRoaXMuYW5zd2VySXNSaWdodCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IExhYmVsIGZyb20gJy4uLy4uL0NvbXBvbmVudC9MYWJlbCc7XG5pbXBvcnQgVGFza01vZGFsV2luZG93IGZyb20gJy4vVGFza01vZGFsV2luZG93JztcbmltcG9ydCBJbWFnZUNvbXBvbmVudCBmcm9tICcuLi8uLi9JbWFnZUNvbXBvbmVudC9JbWFnZUNvbXBvbmVudCc7XG5cbmltcG9ydCB7IGdldFRleHRXaWR0aFdpdGhDYW52YXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy90ZXh0V2lkdGgnO1xuXG5jb25zdCBvcGVyYXRpb25zID0gW1xuICAgIHtcbiAgICAgICAgY2hhclByZXNlbnRhdGlvbjogJysnLFxuICAgICAgICBwZXJmb3JtKGZpcnN0LCBzZWNvbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBmaXJzdCArIHNlY29uZDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBjaGFyUHJlc2VudGF0aW9uOiAnLScsXG4gICAgICAgIHBlcmZvcm0oZmlyc3QsIHNlY29uZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0IC0gc2Vjb25kO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGNoYXJQcmVzZW50YXRpb246ICd4JyxcbiAgICAgICAgcGVyZm9ybShmaXJzdCwgc2Vjb25kKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlyc3QgKiBzZWNvbmQ7XG4gICAgICAgIH1cbiAgICB9LFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29sdmVFeHByZXNzaW9uVGFza1dpbmRvdyBleHRlbmRzIFRhc2tNb2RhbFdpbmRvdyB7XG4gICAgY29uc3RydWN0b3IodG9wID0gMCwgbGVmdCA9IDAsIHdpZHRoID0gMCwgaGVpZ2h0ID0gMCwgYWRkaXRpb25hbFJlc291cmNlcyA9IHt9LCBwYXJlbnRDb21wb25lbnQgPSBudWxsKSB7XG4gICAgICAgIHN1cGVyKHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCwgJ9Cg0LXRiNC40YLQtSDQtNCw0L3QvdC+0LUg0LLRi9GA0LDQttC10L3QuNC1OicsIGFkZGl0aW9uYWxSZXNvdXJjZXMsIHBhcmVudENvbXBvbmVudCk7XG5cbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gb3BlcmF0aW9uc1tNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAob3BlcmF0aW9ucy5sZW5ndGggLSAxKSldO1xuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcblxuICAgICAgICBjb25zdCB0ZXh0RmllbGRJbWFnZSA9IGFkZGl0aW9uYWxSZXNvdXJjZXMuaW1hZ2VzLnRleHRGaWVsZEltYWdlO1xuICAgICAgICBjb25zdCB7IG5hdHVyYWxXaWR0aDogdGV4dEZpZWxkV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IHRleHRGaWVsZEhlaWdodCB9ID0gdGV4dEZpZWxkSW1hZ2U7XG5cbiAgICAgICAgbGV0IGZpcnN0ID0gMTtcbiAgICAgICAgbGV0IHNlY29uZCA9IDE7XG5cbiAgICAgICAgZmlyc3QgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA1MCk7XG5cbiAgICAgICAgaWYgKG9wZXJhdGlvbi5jaGFyUHJlc2VudGF0aW9uID09PSAneCcpIHtcbiAgICAgICAgICAgIGlmIChmaXJzdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHNlY29uZCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDUwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGltaXQgPSBNYXRoLmNlaWwoMTAwIC8gZmlyc3QpO1xuICAgICAgICAgICAgICAgIHNlY29uZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxpbWl0KTsgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWNvbmQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA1MCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpcnN0ID0gZmlyc3Q7XG4gICAgICAgIHRoaXMuc2Vjb25kID0gc2Vjb25kO1xuXG4gICAgICAgIGNvbnN0IGxhYmVsVGV4dCA9IGAke2ZpcnN0fSAke29wZXJhdGlvbi5jaGFyUHJlc2VudGF0aW9ufSAke3NlY29uZH0gPWA7XG5cbiAgICAgICAgY29uc3QgaGFsZldpZHRoID0gTWF0aC5jZWlsKHdpZHRoIC8gMik7XG4gICAgICAgIGNvbnN0IGhhbGZIZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0IC8gMik7XG4gICAgICAgIGNvbnN0IGhhbGZFeHByZXNzaW9uV2lkdGggPSBNYXRoLmNlaWwoKGdldFRleHRXaWR0aFdpdGhDYW52YXMobGFiZWxUZXh0LCAnbW9ub3NwYWNlJywgJzE2cHgnKSArIDEpIC8gMik7XG4gICAgICAgIGNvbnN0IGhhbGZBbnN3ZXJXaWR0aCA9IE1hdGguY2VpbCgoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcygnOTk5OScsICdtb25vc3BhY2UnLCAnMTZweCcpICsgMSkgLyAyKTtcbiAgICAgICAgY29uc3QgaGFsZkV4cHJlc3Npb25XaXRoQW5zd2VyID0gaGFsZkFuc3dlcldpZHRoICsgaGFsZkV4cHJlc3Npb25XaWR0aCArIDM7XG5cbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IG5ldyBMYWJlbChoYWxmSGVpZ2h0IC0gMTUsIGhhbGZXaWR0aCAtIGhhbGZFeHByZXNzaW9uV2l0aEFuc3dlciwgaGFsZkV4cHJlc3Npb25XaWR0aCAqIDIsIDMwLCBsYWJlbFRleHQpO1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSBuZXcgTGFiZWwoaGFsZkhlaWdodCAtIDE1LCBoYWxmV2lkdGggLSBoYWxmRXhwcmVzc2lvbldpdGhBbnN3ZXIgKyBoYWxmRXhwcmVzc2lvbldpZHRoICogMiArIDMsIGhhbGZBbnN3ZXJXaWR0aCAqIDIsIHRleHRGaWVsZEhlaWdodCwgJycpO1xuXG4gICAgICAgIGV4cHJlc3Npb24uc2V0QmFja2dyb3VuZENvbG9yKCdyZ2JhKDAsIDAsIDAsIDApJyk7XG4gICAgICAgIGV4cHJlc3Npb24uc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XG5cbiAgICAgICAgYW5zd2VyLmVkaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgYW5zd2VyLnNldEJhY2tncm91bmRDb2xvcigncmdiYSgwLCAwLCAwLCAwKScpO1xuICAgICAgICBhbnN3ZXIuc2V0QmFja2dyb3VuZEltYWdlKG5ldyBJbWFnZUNvbXBvbmVudCh0ZXh0RmllbGRJbWFnZSwgMCwgMCwgdGV4dEZpZWxkV2lkdGgsIHRleHRGaWVsZEhlaWdodCwgdGV4dEZpZWxkV2lkdGgsIHRleHRGaWVsZEhlaWdodCwgMCwgMCwgdGV4dEZpZWxkV2lkdGgsIHRleHRGaWVsZEhlaWdodCkpO1xuICAgICAgICBhbnN3ZXIubWF4VGV4dExlbmd0aCA9IDQ7XG4gICAgICAgIGFuc3dlci5zZXRUZXh0Q29sb3IoJyNGRkZGMDAnKTtcbiAgICAgICAgYW5zd2VyLmN1cnNvci5zZXRDb2xvcignIzA4QjYwMCcpO1xuXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbktleSA9ICdleHByZXNzaW9uJztcbiAgICAgICAgdGhpcy5hbnN3ZXJLZXkgPSAnYW5zd2VyJztcblxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChleHByZXNzaW9uLCB0aGlzLmV4cHJlc3Npb25LZXkpO1xuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChhbnN3ZXIsIHRoaXMuYW5zd2VyS2V5KTtcbiAgICB9XG5cbiAgICBhbnN3ZXJJc1JpZ2h0KCkge1xuICAgICAgICBjb25zdCBhbnN3ZXIgPSBwYXJzZUZsb2F0KHRoaXMuZ2V0Q2hpbGRDb21wb25lbnQodGhpcy5hbnN3ZXJLZXkpLmdldFRleHQoKSk7XG4gICAgICAgIHJldHVybiAgYW5zd2VyID09PSB0aGlzLm9wZXJhdGlvbi5wZXJmb3JtKHRoaXMuZmlyc3QsIHRoaXMuc2Vjb25kKTtcbiAgICB9XG59XG4iLCJjb25zdCBkaWN0aW9uYXJ5ID0gW1xyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdhZ2UnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQstC+0LfRgNCw0YHRgicsICfQstC10LonLCAn0Y3Qv9C+0YXQsCcsICfQv9C10YDQuNC+0LQnLCAn0YHRgtCw0YDQtdGC0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnYXBwZWFyJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L/QvtGP0LLQu9GP0YLRjNGB0Y8nLCAn0LrQsNC30LDRgtGM0YHRjycsICfQv9GA0LXQtNGB0YLQsNGC0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnYXJ0aXN0JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YXRg9C00L7QttC90LjQuicsICfQsNGA0YLQuNGB0YInXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnYXV0dW1uJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L7RgdC10L3RjCcsICfQvtGB0LXQvdC90LjQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdiYXknLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQt9Cw0LvQuNCyJywgJ9Cx0YPRhdGC0LAnLCAn0L7RgtGB0LXQuicsICfQs9GD0LHQsCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdiZWFrJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LrQu9GO0LInXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnYmxvb20nLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRhtCy0LXRgtC10L3QuNC1JywgJ9GA0LDRgdGG0LLQtdGCJywgJ9GG0LLQtdGB0YLQuCcsICfRgNCw0YHRhtCy0LXRgdGC0LgnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnYnVtcHknLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRg9GF0LDQsdC40YHRgtGL0LknLCAn0L3QtdGA0L7QstC90YvQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdidXJzdCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9Cy0LfRgNGL0LInLCAn0LLRgdC/0YvRiNC60LAnLCAn0YDQsNC30YDRi9CyJywgJ9C70L7Qv9C90YPRgtGMJywgJ9GA0LDQt9GA0YvQstCw0YLRjCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdidXp6JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LPRg9C00LXRgtGMJywgJ9C20YPQttC20LDRgtGMJywgJ9Cz0YPQuycsICfQttGD0LbQttCw0L3QuNC1JywgJ9GB0LvRg9GF0LgnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnY2FyZScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C30LDQsdC+0YLQsCcsICfRg9GF0L7QtCcsICfQt9Cw0LHQvtGC0LjRgtGM0YHRjycsICfRg9GF0LDQttC40LLQsNGC0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnY2hlY2snLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQv9GA0L7QstC10YDQutCwJywgJ9GH0LXQuicsICfQutC+0L3RgtGA0L7Qu9GMJywgJ9C/0YDQvtCy0LXRgNGP0YLRjCcsICfQutC+0L3RgtGA0L7Qu9C40YDQvtCy0LDRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2NoaWxseScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9GF0L7Qu9C+0LTQvdC+JywgJ9GB0YPRhdC+JywgJ9C30Y/QsdC60L4nLCAn0YXQvtC70L7QtNC90YvQuScsICfQv9GA0L7RhdC70LDQtNC90YvQuScsICfQt9GP0LHQutC40LknLCAn0L/RgNC+0LzQvtC30LPQu9GL0LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnY29tZm9ydCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C60L7QvNGE0L7RgNGCJywgJ9GD0LTQvtCx0YHRgtCy0LAnLCAn0YPRjtGCJywgJ9GD0YLQtdGI0LjRgtGMJywgJ9GD0YLQtdGI0LDRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2NvbW11bml0eScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9GB0L7QvtCx0YnQtdGB0YLQstC+JywgJ9C+0LHRidC40L3QsCcsICfQvtCx0YnQtdGB0YLQstC+JywgJ9C+0LHRidC90L7RgdGC0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnY291bnRyeScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9GB0YLRgNCw0L3QsCcsICfQvNC10YHRgtC90L7RgdGC0YwnLCAn0LfQsNCz0L7RgNC+0LTQvdGL0LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnY292ZXJlZCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C60YDRi9GC0YvQuScsICfQv9C+0LrRgNGL0YLRi9C5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2NyYWRsZScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C60L7Qu9GL0LHQtdC70YwnLCAn0LvRjtC70YzQutCwJywgJ9Cz0L3QtdC30LTQviddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdkYW5nbGUnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQvNC+0YLQsNGC0YzRgdGPJywgJ9Cx0L7Qu9GC0LDRgtGM0YHRjycsICfRgdCy0LjRgdCw0YLRjCcsICfQutCw0YfQsNGC0YzRgdGPJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2RlY2lzaW9uJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YDQtdGI0LXQvdC40LUnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnZGVsaWNpb3VzJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LLQutGD0YHQvdC+JywgJ9Cy0L7RgdGF0LjRgtC40YLQtdC70YzQvdGL0LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnZGVudGlzdCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C00LDQvdGC0LjRgdGCJywgJ9C30YPQsdC90L7QuSDQstGA0LDRhyddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdkZXcnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRgNC+0YHQsCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdkaXNhcHBlYXInLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQuNGB0YfQtdC30LDRgtGMJywgJ9C/0YDQvtC/0LDQtNCw0YLRjCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdkdXN0eScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C/0YvQu9GM0L3Ri9C5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2VkZ2UnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQutGA0LDQuScsICfQv9GA0LXQuNC80YPRidC10YHRgtCy0L4nLCAn0LrRgNC+0LzQutCwJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2Zhcm1lcicsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9GE0LXRgNC80LXRgCcsICfQutC+0LvRhdC+0LfQvdC40LonXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnZmVhcicsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9GB0YLRgNCw0YUnLCAn0LHQvtGP0LfQvdGMJywgJ9C+0L/QsNGB0LXQvdC40LUnLCAn0LHQvtGP0YLRjNGB0Y8nLCAn0L7Qv9Cw0YHQsNGC0YzRgdGPJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2ZpcmVmbHknLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRgdCy0LXRgtC70Y/QuicsICfRgdCy0LXRgtC70Y/Rh9C+0LonXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnZml4JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YTQuNC60YHQuNGA0L7QstCw0YLRjCcsICfQuNGB0L/RgNCw0LLQu9GP0YLRjCcsICfRg9GB0YLQsNC90LDQstC70LjQstCw0YLRjCcsICfRh9C40L3QuNGC0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnZmx1ZmZ5JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L/Rg9GI0LjRgdGC0YvQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdmb2xsb3cnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRgdC70LXQtNC+0LLQsNGC0YwnLCAn0YHQu9C10LTQuNGC0YwnLCAn0L/RgNC40LTQtdGA0LbQuNCy0LDRgtGM0YHRjycsICfQuNC00YLQuCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdnYWxsb3AnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQs9Cw0LvQvtC/0L7QvCcsICfQs9Cw0LvQvtC/JywgJ9GB0LrQsNGH0LrQsCcsICfQv9GA0L7RgdC60LDQutCw0YLRjCcsICfRgdC60LDQutCw0YLRjCDQs9Cw0LvQvtC/0L7QvCcsICfQs9Cw0LvQvtC/0LjRgNC+0LLQsNGC0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnZ2VudGxlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L3QtdC20L3Ri9C5JywgJ9C80Y/Qs9C60LjQuScsICfQstC10LbQu9C40LLRi9C5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2dsYW5jZScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9Cy0LfQs9C70Y/QtCcsICfQt9GA0LXQvdC40LUnLCAn0LLQuNC0JywgJ9C30YDQtdC70LjRidC1JywgJ9C/0YDQuNGG0LXQuycsICfRg9Cy0LjQtNC10YLRjCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdnbG9zc3knLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQs9C70Y/QvdGG0LXQstGL0LknLCAn0LHQu9C10YHRgtGP0YnQuNC5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2dsb3cnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQv9GL0LvQsNGC0YwnLCAn0YHQstC10YLQuNGC0YzRgdGPJywgJ9C/0YvQu9Cw0YLRjCcsICfRgdCy0LXRh9C10L3QuNC1JywgJ9C20LDRgCcsICfRgNGD0LzRj9C90LXRhiddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdnb2FsJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YbQtdC70YwnLCAn0LPQvtC7JywgJ9C30LDQtNCw0YfQsCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdoYWxmJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L/QvtC70L7QstC40L3QsCcsICfRh9Cw0YHRgtGMJywgJ9C90LDQv9C+0LvQvtCy0LjQvdGDJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2hlYWx0aHknLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQt9C00L7RgNC+0LLRi9C5JywgJ9C/0L7Qu9C10LfQvdGL0LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnaG9vZicsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C60L7Qv9GL0YLQvicsICfQvdC+0LPQsCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdpbmNsdWRlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LLQutC70Y7Rh9Cw0YLRjCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdpbnZpdGF0aW9uJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L/RgNC40LPQu9Cw0YjQtdC90LjQtSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdrbmlnaHQnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRgNGL0YbQsNGA0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnbGF6eScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C70LXQvdC40LLRi9C5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2xlYWYnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQu9C40YHRgicsICfQu9C40YHRgtC+0LLQvtC5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ2xlYWsnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRg9GC0LXRh9C60LAnLCAn0YLQtdGH0YwnLCAn0L/RgNC+0YHQsNGH0LjQstCw0YLRjNGB0Y8nXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnbGlicmFyeScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9Cx0LjQsdC70LjQvtGC0LXQutCwJywgJ9Cx0LjQsdC70LjQvtGC0LXRh9C90YvQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdtYXJrZXQnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRgNGL0L3QvtC6JywgJ9Cx0LDQt9Cw0YAnLCAn0L/RgNC+0LTQsNCy0LDRgtGMJywgJ9GA0YvQvdC+0YfQvdGL0LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnbWVsdCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9GC0LDRj9GC0YwnLCAn0L/Qu9Cw0LLQuNGC0YzRgdGPJywgJ9GA0LDRgdGC0L7Qv9C40YLRjCcsICfQv9C70LDQstC40YLRjNGB0Y8nLCAn0L/Qu9Cw0LLQuNGC0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnbWlzZXJhYmxlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L3QtdGB0YfQsNGB0YLQvdGL0LknLCAn0LbQsNC70LrQuNC5JywgJ9GD0LHQvtCz0LjQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdtb250aCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C80LXRgdGP0YYnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnbXVkZHknLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQvNGD0YLQuNGC0YwnLCAn0LPRgNGP0LfQvdGL0LknLCAn0LzRg9GC0L3Ri9C5JywgJ9GC0YPRgdC60LvRi9C5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ211c2V1bScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C80YPQt9C10LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnbm90ZScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C30LDQvNC10YLQutCwJywgJ9Cy0L3QuNC80LDQvdC40LUnLCAn0L/RgNC40LzQtdGH0LDQvdC40LUnLCAn0LfQsNC/0LjRgdC60LAnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAncGFpcicsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C/0LDRgNCwJywgJ9GH0LXRgtCwJywgJ9C/0LDRgNC90YvQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdwYXRpZW50JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L/QsNGG0LjQtdC90YInLCAn0YLQtdGA0L/QtdC70LjQstGL0LknLCAn0L/QsNGG0LjQtdC90YInLCAn0LHQvtC70YzQvdC+0LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAncGVhY2VmdWwnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQvNC40YDQvdC+0LUnLCAn0YHQv9C+0LrQvtC50L3Ri9C5JywgJ9C80LjRgNC90YvQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdwZWNrJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LrQu9C10LLQsNGC0YwnLCAn0LTQvtC70LHQuNGC0YwnLCAn0LrQu9C10LLQvtC6J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3BpbG90JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L/QuNC70L7RgicsICfQu9C10YLRh9C40LonLCAn0L/QuNC70L7RgtC40YDQvtCy0LDRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3BsYW4nLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQv9C70LDQvScsICfRgdGF0LXQvNCwJywgJ9C/0YDQvtC10LrRgicsICfQt9Cw0LzRi9GB0LXQuycsICfQv9C70LDQvdC40YDQvtCy0LDRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3BvaW50eScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C30LDQvtGB0YLRgNC10L3QvdGL0LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAncG9uZCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C/0YDRg9C0JywgJ9Cy0L7QtNC+0LXQvCcsICfQsdCw0YHRgdC10LnQvSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdwcmVzaWRlbnQnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQv9GA0LXQt9C40LTQtdC90YInLCAn0L/RgNC10LTRgdC10LTQsNGC0LXQu9GMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3Byb3RlY3QnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQt9Cw0YnQuNGJ0LDRgtGMJywgJ9C+0YXRgNCw0L3Rj9GC0YwnLCAn0LHQtdGA0LXRh9GMJywgJ9C+0LHQtdGA0LXQs9Cw0YLRjCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdyYWNlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YDQsNGB0LAnLCAn0LPQvtC90LrQuCcsICfQs9C+0L3QutCwJywgJ9GA0L7QtCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdyZWFjaCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C00L7RgdGC0LjRh9GMJywgJ9C+0YXQstCw0YInLCAn0LTQvtGB0Y/Qs9Cw0LXQvNC+0YHRgtGMJywgJ9C00L7RgdGC0LjQs9Cw0YLRjCcsICfRgdCy0Y/Qt9Cw0YLRjNGB0Y8nLCAn0LTQvtGF0L7QtNC40YLRjCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdyZWxheCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9GA0LDRgdGB0LvQsNCx0LjRgtGM0YHRjycsICfQvtGC0LTRi9GF0LDRgtGMJywgJ9GA0LDRgdGB0LvQsNCx0LvRj9GC0YzRgdGPJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3JvdHRlbicsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9Cz0L3QuNC70L7QuScsICfQv9GA0L7Qs9C90LjQstGI0LjQuScsICfRgtGD0YXQu9GL0LknXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAncm91bmQnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQutGA0YPQs9C70YvQuScsICfRgNCw0YPQvdC0JywgJ9GC0YPRgCcsICfQutGA0YPQsycsICfQstC+0LrRgNGD0LMnLCAn0LrRgNGD0LPQvtC8JywgJ9C+0LrRgNGD0LPQu9GP0YLRjCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdyb3cnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRgNGP0LQnLCAn0LPRgNC10YHRgtC4J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3NhaWwnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQv9Cw0YDRg9GB0LAnLCAn0L/QsNGA0YPRgScsICfQv9C70YvRgtGMJywgJ9C/0LvQsNCy0LDRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3NjZW5lJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YHRhtC10L3QsCcsICfQutCw0YDRgtC40L3QsCcsICfRjdC/0LjQt9C+0LQnLCAn0LzQtdGB0YLQviDQtNC10LnRgdGC0LLQuNGPJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3NjcnViJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YHQutGA0LDQsScsICfQutGD0YHRgtCw0YDQvdC40LonLCAn0YHQutGA0LXRgdGC0LgnLCAn0YLQtdGA0LXRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3NoYWRlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YLQtdC90YwnLCAn0L7RgtGC0LXQvdC+0LonXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnc2hpcCcsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C60L7RgNCw0LHQu9GMJywgJ9GB0YPQtNC90L4nXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnc2hvcmUnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQsdC10YDQtdCzJywgJ9C/0L7QsdC10YDQtdC20YzQtScsICfQsdC10YDQtdCz0L7QstC+0LknLCAn0L/QvtC00L/QuNGA0LDRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3NpbGt5JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0YjQtdC70LrQvtCy0LjRgdGC0YvQuScsICfRiNC10LvQutC+0LLRi9C5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3NsaWRlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LPQvtGA0LrQsCcsICfRgdC70LDQudC0JywgJ9GB0LrQvtC70YzQttC10L3QuNC1JywgJ9C/0L7Qu9C30YPQvScsICfRgdC60L7Qu9GM0LfQuNGC0YwnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnc25pZmYnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRgdC+0L/QtdC90LjQtScsICfQstC00L7RhScsICfQvdGO0YXQsNGC0YwnLCAn0LLQtNGL0YXQsNGC0YwnLCAn0YHQvtC/0LXRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3NvYXB5JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LzRi9C70YzQvdGL0LknLCAn0LzRi9C70LrQuNC5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3NwYXJrbGUnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQuNGB0LrRgNC40YLRjNGB0Y8nLCAn0YHQstC10YDQutCw0YLRjCcsICfQsdC70LjRgdGC0LDRgtGMJywgJ9Cx0LvQtdGB0YLQtdGC0YwnLCAn0LHQu9C10YHQuicsICfRgdC40Y/QvdC40LUnLCAn0LjRgdC60L7RgNC60LAnLCAn0YHQstC10YDQutCw0L3QuNC1J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3Nwb3R0ZWQnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQv9GP0YLQvdC40YHRgtGL0LknLCAn0LfQsNC/0Y/RgtC90LDQvdC90YvQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICdzcHJpbmcnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQstC10YHQvdCwJywgJ9C/0YDRg9C20LjQvdCwJywgJ9GA0LXRgdGB0L7RgNCwJywgJ9C40YHRgtC+0YfQvdC40LonLCAn0YDQvtC00L3QuNC6JywgJ9Cy0LXRgdC10L3QvdC40LknLCAn0LLQvtC30L3QuNC60LDRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3N0YXJlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LPQu9Cw0LfQtdGC0YwnLCAn0L/Rj9C70LjRgtGM0YHRjycsICfQv9C+0LPQu9Cw0LfQtdGC0YwnLCAn0L/RgNC40YHRgtCw0LvRjNC90YvQuSDQstC30LPQu9GP0LQnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnc3VtbWVyJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LvQtdGC0L4nXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnc3VwcGxpZXMnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQv9GA0LXQtNC80LXRgtGLINGB0L3QsNCx0LbQtdC90LjRjycsICfQt9Cw0L/QsNGBJywgJ9C/0YDQuNC/0LDRgdGLJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3RhbmdsZWQnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQt9Cw0L/Rg9GC0LDQvdC90YvQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICd0ZW50JyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L/QsNC70LDRgtC60LAnLCAn0L3QsNCy0LXRgSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICd0b21vcnJvdycsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C30LDQstGC0YDQsCcsICfQt9Cw0LLRgtGA0LDRiNC90LjQuSDQtNC10L3RjCcsICfQt9Cw0LLRgtGA0LDRiNC90LjQuSddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICd0cmFkZScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9GB0LTQtdC70LrQsCcsICfRgtC+0YDQs9C+0LLQu9GPJywgJ9GC0L7RgNCz0L7QstCw0YLRjCcsICfRgtC+0YDQs9C+0LLRi9C5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3dhcm0nLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfRgtC10L/Qu9C+JywgJ9GC0LXQv9C70YvQuScsICfQs9C+0YDRj9GH0LjQuScsICfQttCw0YDQutC40LknLCAn0L3QsNCz0YDQtdCy0LDRgtGM0YHRjycsICfRgdC+0LPRgNC10LLQsNGC0YwnLCAn0LPRgNC10YLRjCddXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHdvcmQ6ICd3YXZlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LLQvtC70L3QsCcsICfQstC+0LvQvdC+0LLQvtC5JywgJ9C80LDRhdCw0YLRjCcsICfQvNCw0YXQvdGD0YLRjCcsICfRgNCw0LfQvNCw0YXQuNCy0LDRgtGMJywgJ9GA0LDQt9Cy0LXQstCw0YLRjNGB0Y8nXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnd2VlaycsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9C90LXQtNC10LvRjicsICfQvdC10LTQtdC70Y8nXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnd2lnZ2xlJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0L/QvtC60LDRh9C40LLQsNC90LjQtScsICfQv9C+0LrQsNGH0LjQstCw0YLRjNGB0Y8nLCAn0LjQt9Cy0LjQstCw0YLRjNGB0Y8nLCAn0L/QvtC60LDRh9C40LLQsNGC0YwnLCAn0LXRgNC30LDRgtGMJywgJ9C/0L7QutCw0YfQuNCy0LDQvdC40LUnXVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICB3b3JkOiAnd2ludGVyJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LfQuNC80LAnLCAn0LfQuNC80L3QuNC5J11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3dpc2gnLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogWyfQttC10LvQsNC90LjQtScsICfQv9C+0LbQtdC70LDQvdC40LUnLCAn0LbQtdC70LDRgtGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3llc3RlcmRheScsXHJcbiAgICAgICAgdHJhbnNsYXRlOiBbJ9Cy0YfQtdGA0LAnLCAn0LLRh9C10YDQsNGI0L3QuNC5INC00LXQvdGMJ11cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgd29yZDogJ3lvdW5nJyxcclxuICAgICAgICB0cmFuc2xhdGU6IFsn0LzQvtC70L7QtNC+0LknLCAn0Y7QvdGL0LknLCAn0LzQvtC70L7QtNC10LbRjCddXHJcbiAgICB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGljdGlvbmFyeTtcclxuIiwiaW1wb3J0IExhYmVsIGZyb20gJy4uLy4uL0NvbXBvbmVudC9MYWJlbCc7XHJcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vLi4vQ29tcG9uZW50L0J1dHRvbic7XHJcbmltcG9ydCBkaWN0aW9uYXJ5IGZyb20gJy4uLy4uLy4uL2RpY3Rpb25hcnkvZGljdGlvbmFyeSc7XHJcbmltcG9ydCBldmVudHMgZnJvbSAnLi4vLi4vLi4vZXZlbnQvZXZlbnRzL2V2ZW50cyc7XHJcbmltcG9ydCBUYXNrTW9kYWxXaW5kb3cgZnJvbSAnLi9UYXNrTW9kYWxXaW5kb3cnO1xyXG5pbXBvcnQgSW1hZ2VDb21wb25lbnQgZnJvbSAnLi4vLi4vSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3RleHRXaWR0aCc7XHJcblxyXG5jb25zdCBTcGVlY2hSZWNvZ25pdGlvbiA9IHdpbmRvdy5TcGVlY2hSZWNvZ25pdGlvbiB8fCB3aW5kb3cud2Via2l0U3BlZWNoUmVjb2duaXRpb247XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0ZW5pbmdUYXNrTW9kYWxXaW5kb3cgIGV4dGVuZHMgVGFza01vZGFsV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKHRvcCA9IDAsIGxlZnQgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAsIGFkZGl0aW9uYWxSZXNvdXJjZXMgPSB7fSwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xyXG4gICAgICAgIHN1cGVyKHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCwgJ9Cf0YDQvtC40LfQvdC10YHQuNGC0LUg0YHQu9C+0LLQvjonLCBhZGRpdGlvbmFsUmVzb3VyY2VzLCBwYXJlbnRDb21wb25lbnQpO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0RmllbGRJbWFnZSA9IGFkZGl0aW9uYWxSZXNvdXJjZXMuaW1hZ2VzLnRleHRGaWVsZEltYWdlO1xyXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiB0ZXh0RmllbGRXaWR0aCwgbmF0dXJhbEhlaWdodDogdGV4dEZpZWxkSGVpZ2h0IH0gPSB0ZXh0RmllbGRJbWFnZTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IG1pY3JvQnV0dG9uSW1hZ2UgPSBhZGRpdGlvbmFsUmVzb3VyY2VzLmltYWdlcy5taWNyb0J1dHRvbkltYWdlO1xyXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiBtaWNyb0J1dHRvbldpZHRoLCBuYXR1cmFsSGVpZ2h0OiBtaWNyb0J1dHRvbkhlaWdodCB9ID0gbWljcm9CdXR0b25JbWFnZTtcclxuXHJcbiAgICAgICAgdGhpcy53b3JkID0gZGljdGlvbmFyeVtNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoZGljdGlvbmFyeS5sZW5ndGggLSAxKSldLndvcmQ7XHJcblxyXG4gICAgICAgIGNvbnN0IGxhYmVsVGV4dCA9IGAke3RoaXMud29yZH06IGA7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlY29nbml0aW9uID0gbmV3IFNwZWVjaFJlY29nbml0aW9uKCk7XHJcbiAgICAgICAgcmVjb2duaXRpb24ubGFuZyA9ICdlbi1VUyc7XHJcbiAgICAgICAgcmVjb2duaXRpb24uaW50ZXJpbVJlc3VsdHMgPSBmYWxzZTtcclxuICAgICAgICByZWNvZ25pdGlvbi5tYXhBbHRlcm5hdGl2ZXMgPSAxO1xyXG5cclxuICAgICAgICB0aGlzLnJlY29nbml0aW9uID0gcmVjb2duaXRpb247XHJcblxyXG4gICAgICAgIGNvbnN0IGhhbGZIZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgY29uc3QgaGFsZkV4cHJlc3Npb25XaWR0aCA9IE1hdGguY2VpbCgoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyhsYWJlbFRleHQsICdtb25vc3BhY2UnLCAnMTZweCcpICsgMSkgLyAyKTtcclxuXHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IG5ldyBMYWJlbChoYWxmSGVpZ2h0IC0gdGV4dEZpZWxkSGVpZ2h0IC0gOCwgNSwgaGFsZkV4cHJlc3Npb25XaWR0aCAqIDIsIHRleHRGaWVsZEhlaWdodCwgbGFiZWxUZXh0KTtcclxuICAgICAgICBjb25zdCBhbnN3ZXIgPSBuZXcgTGFiZWwoaGFsZkhlaWdodCAtIDE1LCA1LHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQsICcnKTtcclxuICAgICAgICBjb25zdCBtaWNyb0J1dHRvbiA9IG5ldyBCdXR0b24oaGFsZkhlaWdodCAtIDE1LCB3aWR0aCAtIDEwIC0gMzAsIG1pY3JvQnV0dG9uV2lkdGggLyAyLCBtaWNyb0J1dHRvbkhlaWdodCwgJycpO1xyXG4gICAgICAgIG1pY3JvQnV0dG9uLnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQobWljcm9CdXR0b25JbWFnZSwgMCwgMCwgbWljcm9CdXR0b25XaWR0aCwgbWljcm9CdXR0b25IZWlnaHQsIG1pY3JvQnV0dG9uV2lkdGgsIG1pY3JvQnV0dG9uSGVpZ2h0LCAwLCAwLCBtaWNyb0J1dHRvbldpZHRoIC8gMiwgbWljcm9CdXR0b25IZWlnaHQpKTtcclxuXHJcbiAgICAgICAgYW5zd2VyLnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQodGV4dEZpZWxkSW1hZ2UsIDAsIDAsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQsIDAsIDAsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQpKTtcclxuICAgICAgICBhbnN3ZXIuc2V0VGV4dENvbG9yKCcjRkZGRjAwJyk7XHJcbiAgICAgICAgYW5zd2VyLnByb3BlcnRpZXMuY3Vyc29yID0gJ2F1dG8nO1xyXG4gICAgICAgIGV4cHJlc3Npb24uc2V0QmFja2dyb3VuZENvbG9yKCdyZ2JhKDAsIDAsIDAsIDApJyk7XHJcbiAgICAgICAgZXhwcmVzc2lvbi5zZXRUZXh0Q29sb3IoJyNmZmZmZmYnKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb25lR2x5cGhXaWR0aCA9IE1hdGguY2VpbChnZXRUZXh0V2lkdGhXaXRoQ2FudmFzKCd4JywgJ21vbm9zcGFjZScsICcxNnB4JykpO1xyXG5cclxuICAgICAgICBhbnN3ZXIubWF4VGV4dExlbmd0aCA9IE1hdGguZmxvb3IoKHdpZHRoIC0gMTApIC8gb25lR2x5cGhXaWR0aCk7XHJcblxyXG4gICAgICAgIG1pY3JvQnV0dG9uLnNldEJhY2tncm91bmRDb2xvcignI2FhYWFhYScpO1xyXG5cclxuICAgICAgICB0aGlzLmV4cHJlc3Npb25LZXkgPSAnZXhwcmVzc2lvbic7XHJcbiAgICAgICAgdGhpcy5hbnN3ZXJLZXkgPSAnYW5zd2VyJztcclxuICAgICAgICB0aGlzLm1pY3JvQnV0dG9uS2V5ID0gJ21pY3JvYnV0dG9uJztcclxuXHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoZXhwcmVzc2lvbiwgdGhpcy5leHByZXNzaW9uS2V5KTtcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChhbnN3ZXIsIHRoaXMuYW5zd2VyS2V5KTtcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChtaWNyb0J1dHRvbiwgdGhpcy5taWNyb0J1dHRvbktleSk7XHJcbiAgICAgICAgYW5zd2VyLmFsaWduQ2VudGVyKCk7XHJcbiAgICAgICAgbWljcm9CdXR0b24uYWxpZ25DZW50ZXIoKTtcclxuXHJcbiAgICAgICAgZXhwcmVzc2lvbi5zZXRCb3VuZGluZ0NsaWVudFJlY3QodW5kZWZpbmVkLCBhbnN3ZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCk7XHJcbiAgICAgICAgbWljcm9CdXR0b24uc2V0Qm91bmRpbmdDbGllbnRSZWN0KHVuZGVmaW5lZCwgYW5zd2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0ICsgNSk7XHJcblxyXG4gICAgICAgIGxldCBpc1dvcmtpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgbWljcm9CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihldmVudHMuTU9VU0UuTU9VU0VfRE9XTiwgKGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpc1dvcmtpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJlY29nbml0aW9uLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICBpc1dvcmtpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbWljcm9CdXR0b24uZ2V0QmFja2dyb3VuZEltYWdlKCkuc2V0RnJhbWUoMC42KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlY29nbml0aW9uLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIGlzV29ya2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbWljcm9CdXR0b24uZ2V0QmFja2dyb3VuZEltYWdlKCkuc2V0RnJhbWUoMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmVjb2duaXRpb24ub25yZXN1bHQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LnJlc3VsdHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYW5zd2VyLnNldFRleHQoZXZlbnQucmVzdWx0c1swXVswXS50cmFuc2NyaXB0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICBcclxuICAgICAgICByZWNvZ25pdGlvbi5vbnNwZWVjaGVuZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmVjb2duaXRpb24uc3RvcCgpO1xyXG4gICAgICAgICAgICBpc1dvcmtpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgbWljcm9CdXR0b24uZ2V0QmFja2dyb3VuZEltYWdlKCkuc2V0RnJhbWUoMCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmVjb2duaXRpb24ub25lcnJvciA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igb2NjdXJyZWQgaW4gcmVjb2duaXRpb246ICcgKyBldmVudC5lcnJvcik7XHJcbiAgICAgICAgICAgIG1pY3JvQnV0dG9uLmdldEJhY2tncm91bmRJbWFnZSgpLnNldEZyYW1lKDApO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgYW5zd2VySXNSaWdodCgpIHtcclxuICAgICAgICBjb25zdCBhbnN3ZXIgPSB0aGlzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuYW5zd2VyS2V5KS5nZXRUZXh0KCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICByZXR1cm4gIGFuc3dlciA9PT0gdGhpcy53b3JkO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBldmVudHMgZnJvbSAnLi4vLi4vZXZlbnQvZXZlbnRzL2V2ZW50cyc7XHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi9Db21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYXJ0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHRvcCA9IDAsIGxlZnQgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAsIGNlbGxDb3VudCwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xyXG4gICAgICAgIHN1cGVyKHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCwgcGFyZW50Q29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzLmN1cnNvciA9ICdwb2ludGVyJztcclxuXHJcbiAgICAgICAgY29uc3QgYm90dG9tID0gdG9wICsgaGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xyXG5cclxuICAgICAgICB0aGlzLmNlbGxDb3VudCA9IGNlbGxDb3VudDtcclxuXHJcbiAgICAgICAgdGhpcy5vcmlnaW5Db29yZCA9IHtcclxuICAgICAgICAgICAgeDogbGVmdCArIDIwLFxyXG4gICAgICAgICAgICB5OiBib3R0b20gLSAyMFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMueEF4aXNDb29yZCA9IHtcclxuICAgICAgICAgICAgeDogcmlnaHQgLSAxMCxcclxuICAgICAgICAgICAgeTogdGhpcy5vcmlnaW5Db29yZC55LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMueUF4aXNDb29yZCA9IHtcclxuICAgICAgICAgICAgeDogdGhpcy5vcmlnaW5Db29yZC54LFxyXG4gICAgICAgICAgICB5OiB0b3AgKyAxMCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmxhc3RDZWxsWEF4aXNDb29yZCA9IHtcclxuICAgICAgICAgICAgeDogdGhpcy54QXhpc0Nvb3JkLnggLSAyMCxcclxuICAgICAgICAgICAgeTogdGhpcy54QXhpc0Nvb3JkLnlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmxhc3RDZWxsWUF4aXNDb29yZCA9IHtcclxuICAgICAgICAgICAgeDogdGhpcy55QXhpc0Nvb3JkLngsXHJcbiAgICAgICAgICAgIHk6IHRoaXMueUF4aXNDb29yZC55ICsgMjBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnhBeGlzQXJyb3cgPSB7XHJcbiAgICAgICAgICAgIGxlZnRQb2ludDoge1xyXG4gICAgICAgICAgICAgICAgeDogdGhpcy54QXhpc0Nvb3JkLnggLSA2LFxyXG4gICAgICAgICAgICAgICAgeTogdGhpcy54QXhpc0Nvb3JkLnkgLSA4XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJpZ2h0UG9pbnQ6IHtcclxuICAgICAgICAgICAgICAgIHg6IHRoaXMueEF4aXNDb29yZC54IC0gNixcclxuICAgICAgICAgICAgICAgIHk6IHRoaXMueEF4aXNDb29yZC55ICsgOFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy55QXhpc0Fycm93ID0ge1xyXG4gICAgICAgICAgICBsZWZ0UG9pbnQ6IHtcclxuICAgICAgICAgICAgICAgIHg6IHRoaXMueUF4aXNDb29yZC54IC0gOCxcclxuICAgICAgICAgICAgICAgIHk6IHRoaXMueUF4aXNDb29yZC55ICsgNlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByaWdodFBvaW50OiB7XHJcbiAgICAgICAgICAgICAgICB4OiB0aGlzLnlBeGlzQ29vcmQueCArIDgsXHJcbiAgICAgICAgICAgICAgICB5OiB0aGlzLnlBeGlzQ29vcmQueSArIDZcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMueEF4aXNXaWR0aCA9IHRoaXMubGFzdENlbGxYQXhpc0Nvb3JkLnggLSB0aGlzLm9yaWdpbkNvb3JkLng7XHJcbiAgICAgICAgdGhpcy55QXhpc1dpZHRoID0gdGhpcy5vcmlnaW5Db29yZC55IC0gdGhpcy5sYXN0Q2VsbFlBeGlzQ29vcmQueTtcclxuXHJcbiAgICAgICAgdGhpcy5vbmVDZWxsWCA9IHRoaXMueEF4aXNXaWR0aCAvIChjZWxsQ291bnQgKyAxKTtcclxuICAgICAgICB0aGlzLm9uZUNlbGxZID0gdGhpcy55QXhpc1dpZHRoIC8gKGNlbGxDb3VudCArIDEpO1xyXG5cclxuICAgICAgICB0aGlzLnBvaW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5NT1VTRS5NT1VTRV9ET1dOLCB0aGlzLmhhbmRsZUNsaWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVDbGljayhlKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgY29uc3QgeyB0b3AsIGxlZnQgfSA9IHRhcmdldC5nZXRBYnNvbHV0ZUNvb3JkKCk7XHJcbiAgICAgICAgY29uc3QgeyB0b3A6IG1vdXNlVG9wLCBsZWZ0OiBtb3VzZUxlZnQgfSA9IGUucGF5bG9hZC5tb3VzZUNvb3JkO1xyXG5cclxuICAgICAgICBjb25zdCByZWxhdGl2ZU1vdXNlVG9wID0gbW91c2VUb3AgLSB0b3AgICsgdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgICAgICBjb25zdCByZWxhdGl2ZU1vdXNlTGVmdCA9IG1vdXNlTGVmdCAtIGxlZnQgKyB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuXHJcbiAgICAgICAgaWYgKHJlbGF0aXZlTW91c2VUb3AgPCB0YXJnZXQubGFzdENlbGxZQXhpc0Nvb3JkLnkgKyB0YXJnZXQub25lQ2VsbFkgLyAyIHx8IHJlbGF0aXZlTW91c2VUb3AgPiB0YXJnZXQub3JpZ2luQ29vcmQueVxyXG4gICAgICAgIHx8IHJlbGF0aXZlTW91c2VMZWZ0IDwgdGFyZ2V0Lm9yaWdpbkNvb3JkLnggfHwgcmVsYXRpdmVNb3VzZUxlZnQgPiB0YXJnZXQubGFzdENlbGxYQXhpc0Nvb3JkLnggLSB0YXJnZXQub25lQ2VsbFggLyAyKSB7XHJcbiAgICAgICAgICAgIHRhcmdldC5wb2ludCA9IG51bGw7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgeSA9IE1hdGgucm91bmQoKHRhcmdldC5vcmlnaW5Db29yZC55IC0gcmVsYXRpdmVNb3VzZVRvcCkgLyB0YXJnZXQub25lQ2VsbFkpO1xyXG4gICAgICAgICAgICBjb25zdCB4ID0gTWF0aC5yb3VuZCgocmVsYXRpdmVNb3VzZUxlZnQgLSB0YXJnZXQub3JpZ2luQ29vcmQueCkgLyB0YXJnZXQub25lQ2VsbFgpO1xyXG5cclxuICAgICAgICAgICAgdGFyZ2V0LnNldFBvaW50KHgsIHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRQb2ludCgpIHtcclxuICAgICAgICBpZiAodGhpcy5wb2ludCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMucG9pbnQueCxcclxuICAgICAgICAgICAgeTogdGhpcy5wb2ludC55XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwYWludENvbXBvbmVudChjb250ZXh0LCBlbGFwc2VkVGltZSkge1xyXG4gICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgIHN1cGVyLnBhaW50Q29tcG9uZW50KGNvbnRleHQsIGVsYXBzZWRUaW1lKTtcclxuXHJcbiAgICAgICAgY29uc3QgeyB0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeyB4OiBvcmlnaW5YLCB5OiBvcmlnaW5ZIH0gPSB0aGlzLm9yaWdpbkNvb3JkO1xyXG5cclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmZmZmJztcclxuXHJcbiAgICAgICAgY29udGV4dC5maWxsUmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gJyMwMDAwMDAnO1xyXG5cclxuICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDM7XHJcblxyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8ob3JpZ2luWCwgb3JpZ2luWSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8odGhpcy54QXhpc0Nvb3JkLngsIHRoaXMueEF4aXNDb29yZC55KTtcclxuXHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8odGhpcy54QXhpc0Nvb3JkLngsIHRoaXMueEF4aXNDb29yZC55KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh0aGlzLnhBeGlzQXJyb3cubGVmdFBvaW50LngsIHRoaXMueEF4aXNBcnJvdy5sZWZ0UG9pbnQueSk7XHJcblxyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHRoaXMueEF4aXNDb29yZC54LCB0aGlzLnhBeGlzQ29vcmQueSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8odGhpcy54QXhpc0Fycm93LnJpZ2h0UG9pbnQueCwgdGhpcy54QXhpc0Fycm93LnJpZ2h0UG9pbnQueSk7XHJcblxyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKHRoaXMueUF4aXNDb29yZC54LCB0aGlzLnlBeGlzQ29vcmQueSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8odGhpcy55QXhpc0Fycm93LmxlZnRQb2ludC54LCB0aGlzLnlBeGlzQXJyb3cubGVmdFBvaW50LnkpO1xyXG5cclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyh0aGlzLnlBeGlzQ29vcmQueCwgdGhpcy55QXhpc0Nvb3JkLnkpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKHRoaXMueUF4aXNBcnJvdy5yaWdodFBvaW50LngsIHRoaXMueUF4aXNBcnJvdy5yaWdodFBvaW50LnkpO1xyXG5cclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhvcmlnaW5YLCBvcmlnaW5ZKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyh0aGlzLnlBeGlzQ29vcmQueCwgdGhpcy55QXhpc0Nvb3JkLnkpO1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyMwMDAwMDAnO1xyXG4gICAgICAgIGNvbnRleHQuZm9udCA9IGAxNnB4IG1vbm9zcGFjZWA7XHJcbiAgICAgICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSAndG9wJztcclxuICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG5cclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KCcwJywgb3JpZ2luWCwgb3JpZ2luWSk7XHJcblxyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnIzc3Nzc3Nyc7XHJcbiAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSAyO1xyXG5cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cclxuICAgICAgICBjb25zdCBsYXN0Q2VsbFggPSB0aGlzLmxhc3RDZWxsWEF4aXNDb29yZC54O1xyXG4gICAgICAgIGNvbnN0IGxhc3RDZWxsWSA9IHRoaXMubGFzdENlbGxZQXhpc0Nvb3JkLnk7XHJcblxyXG4gICAgICAgIGNvbnN0IGxhc3RUZW5DZWxsWSA9IHRoaXMubGFzdENlbGxZQXhpc0Nvb3JkLnkgKyB0aGlzLm9uZUNlbGxZO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5jZWxsQ291bnQgKyAxOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgeCAgPSBvcmlnaW5YICsgaSAqIHRoaXMub25lQ2VsbFg7XHJcbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHgsIG9yaWdpblkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh4LCBsYXN0VGVuQ2VsbFkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxUZXh0KFN0cmluZyhpKSwgeCwgb3JpZ2luWSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xyXG4gICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gJ3JpZ2h0JztcclxuXHJcbiAgICAgICAgY29uc3QgbGFzdFRlbkNlbGxYID0gdGhpcy5sYXN0Q2VsbFhBeGlzQ29vcmQueCAtIHRoaXMub25lQ2VsbFg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmNlbGxDb3VudCArIDE7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB5ICA9IG9yaWdpblkgLSAodGhpcy5jZWxsQ291bnQgKyAxIC0gaSkgKiB0aGlzLm9uZUNlbGxZO1xyXG5cclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8ob3JpZ2luWCwgeSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGxhc3RUZW5DZWxsWCwgeSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQoU3RyaW5nKHRoaXMuY2VsbENvdW50ICsgMSAtIGkpLCBvcmlnaW5YIC0gMywgeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wb2ludCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnI2FhMDAwMCc7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKHRoaXMucG9pbnQucG9pbnRDb29yZC54LCB0aGlzLnBvaW50LnBvaW50Q29vcmQueSwgNSwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmNsaXAoKTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyNhYTAwMDAnO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHRoaXMucG9pbnQucG9pbnRDb29yZC54IC0gMTAsIHRoaXMucG9pbnQucG9pbnRDb29yZC55IC0gMTAsIDIwLCAyMCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNldFBvaW50KHgsIHkpIHtcclxuICAgICAgICB0aGlzLnBvaW50ID0ge1xyXG4gICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICB5LFxyXG4gICAgICAgICAgICBwb2ludENvb3JkOiB7XHJcbiAgICAgICAgICAgICAgICB4OiB0aGlzLm9yaWdpbkNvb3JkLnggKyB0aGlzLm9uZUNlbGxYICogeCxcclxuICAgICAgICAgICAgICAgIHk6IHRoaXMub3JpZ2luQ29vcmQueSAtIHRoaXMub25lQ2VsbFkgKiB5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IFxyXG4iLCJpbXBvcnQgTGFiZWwgZnJvbSAnLi4vLi4vQ29tcG9uZW50L0xhYmVsJztcclxuaW1wb3J0IFRhc2tNb2RhbFdpbmRvdyBmcm9tICcuL1Rhc2tNb2RhbFdpbmRvdyc7XHJcbmltcG9ydCBJbWFnZUNvbXBvbmVudCBmcm9tICcuLi8uLi9JbWFnZUNvbXBvbmVudC9JbWFnZUNvbXBvbmVudCc7XHJcblxyXG5pbXBvcnQgeyBnZXRUZXh0V2lkdGhXaXRoQ2FudmFzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdGV4dFdpZHRoJztcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vQ29tcG9uZW50L0NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYW1lVGFza01vZGFsV2luZG93ICBleHRlbmRzIFRhc2tNb2RhbFdpbmRvdyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBhZGRpdGlvbmFsUmVzb3VyY2VzID0ge30sIHBhcmVudENvbXBvbmVudCA9IG51bGwpIHtcclxuXHJcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBg0J3QsNC30L7QstC40YLQtSDRgtC+LCDRh9GC0L4g0JLRiyDQstC40LTQuNGC0LUg0L3QsCDQutCw0YDRgtC40L3QutC1INC+0LTQvdC40Lwg0YHQu9C+0LLQvtC8INC90LAg0LDQvdCz0LvQuNC50YHQutC+0Lw6YCwgYWRkaXRpb25hbFJlc291cmNlcywgcGFyZW50Q29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dEZpZWxkSW1hZ2UgPSBhZGRpdGlvbmFsUmVzb3VyY2VzLmltYWdlcy50ZXh0RmllbGRJbWFnZTtcclxuICAgICAgICBjb25zdCB7IG5hdHVyYWxXaWR0aDogdGV4dEZpZWxkV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IHRleHRGaWVsZEhlaWdodCB9ID0gdGV4dEZpZWxkSW1hZ2U7XHJcblxyXG4gICAgICAgIGNvbnN0IHRhc2tJbWFnZSA9IGFkZGl0aW9uYWxSZXNvdXJjZXMuaW1hZ2VzLm5hbWVJbWFnZTtcclxuICAgICAgICBjb25zdCB7IG5hdHVyYWxXaWR0aDogdGFza0ltYWdlV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IHRhc2tJbWFnZUhlaWdodCB9ID0gdGFza0ltYWdlO1xyXG5cclxuICAgICAgICBjb25zdCBoYWxmSGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCAvIDIpO1xyXG4gICAgIFxyXG4gICAgICAgIGNvbnN0IGFuc3dlciA9IG5ldyBMYWJlbChoYWxmSGVpZ2h0IC0gMTUsIDUsdGV4dEZpZWxkV2lkdGgsIHRleHRGaWVsZEhlaWdodCwgJycpO1xyXG5cclxuICAgICAgICBhbnN3ZXIuZWRpdGFibGUgPSB0cnVlO1xyXG4gICAgICAgIGFuc3dlci5zZXRCYWNrZ3JvdW5kQ29sb3IoJyNiYjAwMDAnKTtcclxuXHJcbiAgICAgICAgY29uc3Qgb25lR2x5cGhXaWR0aCA9IE1hdGguY2VpbChnZXRUZXh0V2lkdGhXaXRoQ2FudmFzKCd4JywgJ21vbm9zcGFjZScsICcxNnB4JykpO1xyXG5cclxuICAgICAgICBhbnN3ZXIubWF4VGV4dExlbmd0aCA9IE1hdGguZmxvb3IodGV4dEZpZWxkV2lkdGggLyBvbmVHbHlwaFdpZHRoKSArIDE7XHJcbiAgICAgICAgYW5zd2VyLnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQodGV4dEZpZWxkSW1hZ2UsIDAsIDAsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQsIDAsIDAsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQpKTtcclxuICAgICAgICBhbnN3ZXIuc2V0VGV4dENvbG9yKCcjRkZGRjAwJyk7XHJcbiAgICAgICAgYW5zd2VyLmN1cnNvci5zZXRDb2xvcignIzA4QjYwMCcpO1xyXG5cclxuICAgICAgICB0aGlzLmFuc3dlcktleSA9ICdhbnN3ZXInO1xyXG5cclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudChhbnN3ZXIsIHRoaXMuYW5zd2VyS2V5KTtcclxuICAgICAgICBhbnN3ZXIuYWxpZ25DZW50ZXIoKTtcclxuXHJcbiAgICAgICAgY29uc3QgeyB0b3A6IG9rQnV0dG9uVG9wLCBoZWlnaHQ6IG9rQnV0dG9uSGVpZ2h0IH0gPSBzdXBlci5nZXRPa0J1dHRvbkNvbXBvbmVudCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGFuc3dlci5zZXRCb3VuZGluZ0NsaWVudFJlY3Qob2tCdXR0b25Ub3AgKyBNYXRoLnJvdW5kKChva0J1dHRvbkhlaWdodCAtIHRleHRGaWVsZEhlaWdodCkgLyAyKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgYm90dG9tOiBkZXNjcmlwdGlvbkJvdHRvbSwgbGVmdDogZGVzY3JpcHRpb25MZWZ0IH0gPSBzdXBlci5nZXRUYXNrRGVzY3JpcHRpb25Db21wb25lbnQoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgICAgbGV0IHRhc2tJbWFnZVdpZHRoUHJvcCA9IHRhc2tJbWFnZVdpZHRoO1xyXG4gICAgICAgIGxldCB0YXNrSW1hZ2VIZWlnaHRQcm9wID0gdGFza0ltYWdlSGVpZ2h0O1xyXG4gICAgICAgIGxldCByYXRpb247XHJcblxyXG4gICAgICAgIGNvbnN0IG1heFRhc2tJbWFnZVdpZHRoID0gd2lkdGggLSBkZXNjcmlwdGlvbkxlZnQgKiAyO1xyXG4gICAgICAgIGNvbnN0IG1heFRhc2tJbWFnZUhlaWdodCA9IGhlaWdodCAtIChoZWlnaHQgLSBva0J1dHRvblRvcCkgLSBkZXNjcmlwdGlvbkJvdHRvbSAtIDIwO1xyXG5cclxuICAgICAgICBpZiAoKHRhc2tJbWFnZVdpZHRoUHJvcCAvIG1heFRhc2tJbWFnZVdpZHRoKSA+ICh0YXNrSW1hZ2VIZWlnaHRQcm9wIC8gbWF4VGFza0ltYWdlSGVpZ2h0KSkge1xyXG4gICAgICAgICAgICBpZiAodGFza0ltYWdlV2lkdGhQcm9wID4gbWF4VGFza0ltYWdlV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHRhc2tJbWFnZVdpZHRoUHJvcCA9IG1heFRhc2tJbWFnZVdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByYXRpb24gPSB0YXNrSW1hZ2VXaWR0aFByb3AgLyB0YXNrSW1hZ2VXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIHRhc2tJbWFnZUhlaWdodFByb3AgPSBNYXRoLnJvdW5kKHRhc2tJbWFnZUhlaWdodCAqIHJhdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGFza0ltYWdlSGVpZ2h0UHJvcCA+IG1heFRhc2tJbWFnZUhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgdGFza0ltYWdlSGVpZ2h0UHJvcCA9IG1heFRhc2tJbWFnZUhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0YXNrSW1hZ2VIZWlnaHRQcm9wID4gbWF4VGFza0ltYWdlSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB0YXNrSW1hZ2VIZWlnaHRQcm9wID0gbWF4VGFza0ltYWdlSGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByYXRpb24gPSB0YXNrSW1hZ2VIZWlnaHRQcm9wIC8gdGFza0ltYWdlSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdGFza0ltYWdlV2lkdGhQcm9wID0gTWF0aC5yb3VuZCh0YXNrSW1hZ2VXaWR0aCAqIHJhdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGFza0ltYWdlV2lkdGhQcm9wID4gbWF4VGFza0ltYWdlV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHRhc2tJbWFnZVdpZHRoUHJvcCA9IG1heFRhc2tJbWFnZVdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRhc2tJbWFnZUtleSA9ICd0YXNrJztcclxuXHJcbiAgICAgICAgY29uc3QgdGFza0ltYWdlQ29tcG9uZW50ID0gbmV3IENvbXBvbmVudCgwLCAwLCB0YXNrSW1hZ2VXaWR0aFByb3AsIHRhc2tJbWFnZUhlaWdodFByb3ApO1xyXG4gICAgICAgIHRhc2tJbWFnZUNvbXBvbmVudC5zZXRCYWNrZ3JvdW5kSW1hZ2UobmV3IEltYWdlQ29tcG9uZW50KHRhc2tJbWFnZSwgMCwgMCwgdGFza0ltYWdlV2lkdGgsIHRhc2tJbWFnZUhlaWdodCwgdGFza0ltYWdlV2lkdGhQcm9wLCB0YXNrSW1hZ2VIZWlnaHRQcm9wLCAwLCAwLCB0YXNrSW1hZ2VXaWR0aCwgdGFza0ltYWdlSGVpZ2h0KSk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQodGFza0ltYWdlQ29tcG9uZW50LCB0aGlzLnRhc2tJbWFnZUtleSk7XHJcblxyXG4gICAgICAgIHRhc2tJbWFnZUNvbXBvbmVudC5hbGlnbkNlbnRlcigpO1xyXG4gICAgICAgIHRhc2tJbWFnZUNvbXBvbmVudC5zZXRCb3VuZGluZ0NsaWVudFJlY3QoZGVzY3JpcHRpb25Cb3R0b20gKyAxMCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW1hZ2VOYW1lcyA9IGFkZGl0aW9uYWxSZXNvdXJjZXMuYWRkaXRpb25hbC5uYW1lLnRhc2tOYW1lcztcclxuICAgIH1cclxuXHJcbiAgICBhbnN3ZXJJc1JpZ2h0KCkge1xyXG4gICAgICAgIGNvbnN0IGFuc3dlciA9IHRoaXMuZ2V0Q2hpbGRDb21wb25lbnQodGhpcy5hbnN3ZXJLZXkpLmdldFRleHQoKS50cmltKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBjb25zdCBuYW1lcyA9IHRoaXMuaW1hZ2VOYW1lcztcclxuXHJcbiAgICAgICAgbGV0IGNvbmNsdXNpb24gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25jbHVzaW9uID0gYW5zd2VyID09PSBuYW1lc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb25jbHVzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uY2x1c2lvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICBjb25jbHVzaW9uO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBuYW1lVGFza01hcCBmcm9tICcuLi9kaWN0aW9uYXJ5L25hbWVUYXNrTWFwJztcclxuaW1wb3J0IFNvbHZlRXhwcmVzc2lvblRhc2tXaW5kb3cgZnJvbSAnLi4vVUkvTW9kYWxXaW5kb3dzL1Rhc2tNb2RhbFdpbmRvdy9Tb2x2ZUV4cHJlc3Npb25UYXNrV2luZG93JztcclxuaW1wb3J0IFRyYW5zbGF0ZVRhc2tXaW5kb3cgZnJvbSAnLi4vVUkvTW9kYWxXaW5kb3dzL1Rhc2tNb2RhbFdpbmRvdy9UcmFuc2xhdGVUYXNrTW9kYWxXaW5kb3cnO1xyXG5pbXBvcnQgTGlzdGVuaW5nVGFza01vZGFsV2luZG93IGZyb20gJy4uL1VJL01vZGFsV2luZG93cy9UYXNrTW9kYWxXaW5kb3cvTGlzdGVuaW5nVGFza01vZGFsV2luZG93JztcclxuaW1wb3J0IENvbnZlcnRGcm9tRGVjVG9CaW5UYXNrTW9kYWxXaW5kb3cgZnJvbSAnLi4vVUkvTW9kYWxXaW5kb3dzL1Rhc2tNb2RhbFdpbmRvdy9Db252ZXJ0RnJvbURlY1RvQmluVGFza01vZGFsV2luZG93JztcclxuaW1wb3J0IFNldFBvaW50QXRDaGFydFRhc2tNb2RhbFdpbmRvdyBmcm9tICcuLi9VSS9Nb2RhbFdpbmRvd3MvVGFza01vZGFsV2luZG93L1NldFBvaW50QXRDaGFydFRhc2tNb2RhbFdpbmRvdyc7XHJcbmltcG9ydCBOYW1lVGFza01vZGFsV2luZG93IGZyb20gJy4uL1VJL01vZGFsV2luZG93cy9UYXNrTW9kYWxXaW5kb3cvTmFtZVRhc2tNb2RhbFdpbmRvdyc7XHJcblxyXG5jb25zdCB0YXNrcyA9IFtcclxuICAgIFRyYW5zbGF0ZVRhc2tXaW5kb3csXHJcbiAgICBTb2x2ZUV4cHJlc3Npb25UYXNrV2luZG93LFxyXG4gICAgU2V0UG9pbnRBdENoYXJ0VGFza01vZGFsV2luZG93LFxyXG4gICAgQ29udmVydEZyb21EZWNUb0JpblRhc2tNb2RhbFdpbmRvdyxcclxuICAgIE5hbWVUYXNrTW9kYWxXaW5kb3csXHJcbiAgICBMaXN0ZW5pbmdUYXNrTW9kYWxXaW5kb3csXHJcbl07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXNrRmFjdG9yeSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1aUltYWdlcywgdGFza0ltYWdlcykge1xyXG4gICAgICAgIHRoaXMudWlJbWFnZXMgPSB1aUltYWdlcztcclxuICAgICAgICB0aGlzLnRhc2tJbWFnZXMgPSB0YXNrSW1hZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVRhc2sodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgY29uc3QgYWRkaXRpb25hbFJlc291cmNlcyA9IHtcclxuICAgICAgICAgICAgaW1hZ2VzOiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0RmllbGRJbWFnZTogdGhpcy51aUltYWdlc1sxXSxcclxuICAgICAgICAgICAgICAgIG1vZGFsV2luZG93SW1hZ2U6IHRoaXMudWlJbWFnZXNbMl0sXHJcbiAgICAgICAgICAgICAgICBva0J1dHRvbkltYWdlOiB0aGlzLnVpSW1hZ2VzWzNdLFxyXG4gICAgICAgICAgICAgICAgbWljcm9CdXR0b25JbWFnZTogdGhpcy51aUltYWdlc1s0XSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWRkaXRpb25hbDoge1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IHRhc2tDb25zdHJ1Y3RvciA9IHRhc2tzW01hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqICh0YXNrcy5sZW5ndGggLSAxKSldO1xyXG5cclxuICAgICAgICBpZiAodGFza0NvbnN0cnVjdG9yID09PSBOYW1lVGFza01vZGFsV2luZG93KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKHRoaXMudGFza0ltYWdlcy5sZW5ndGggLSAxKSk7XHJcblxyXG4gICAgICAgICAgICBhZGRpdGlvbmFsUmVzb3VyY2VzLmFkZGl0aW9uYWwubmFtZSA9IHtcclxuICAgICAgICAgICAgICAgIHRhc2tOYW1lczogbmFtZVRhc2tNYXBbaW5kZXhdLm5hbWVzXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBhZGRpdGlvbmFsUmVzb3VyY2VzLmltYWdlcy5uYW1lSW1hZ2UgPSB0aGlzLnRhc2tJbWFnZXNbaW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGFzayA9IG5ldyB0YXNrQ29uc3RydWN0b3IodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBhZGRpdGlvbmFsUmVzb3VyY2VzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRhc2s7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IExhYmVsIGZyb20gJy4uLy4uL0NvbXBvbmVudC9MYWJlbCc7XHJcbmltcG9ydCBkaWN0aW9uYXJ5IGZyb20gJy4uLy4uLy4uL2RpY3Rpb25hcnkvZGljdGlvbmFyeSc7XHJcbmltcG9ydCBUYXNrTW9kYWxXaW5kb3cgZnJvbSAnLi9UYXNrTW9kYWxXaW5kb3cnO1xyXG5pbXBvcnQgSW1hZ2VDb21wb25lbnQgZnJvbSAnLi4vLi4vSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3RleHRXaWR0aCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2xhdGVUYXNrV2luZG93IGV4dGVuZHMgVGFza01vZGFsV2luZG93IHtcclxuICAgIGNvbnN0cnVjdG9yKHRvcCA9IDAsIGxlZnQgPSAwLCB3aWR0aCA9IDAsIGhlaWdodCA9IDAsIGFkZGl0aW9uYWxSZXNvdXJjZXMgPSB7fSwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xyXG4gICAgICAgIHN1cGVyKHRvcCwgbGVmdCwgd2lkdGgsIGhlaWdodCwgJ9Cf0LXRgNC10LLQtdC00LjRgtC1INGB0LvQvtCy0L46JywgYWRkaXRpb25hbFJlc291cmNlcywgcGFyZW50Q29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy53b3JkT2JqID0gZGljdGlvbmFyeVtNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoZGljdGlvbmFyeS5sZW5ndGggLSAxKSldO1xyXG5cclxuICAgICAgICBjb25zdCB0ZXh0RmllbGRJbWFnZSA9IGFkZGl0aW9uYWxSZXNvdXJjZXMuaW1hZ2VzLnRleHRGaWVsZEltYWdlO1xyXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiB0ZXh0RmllbGRXaWR0aCwgbmF0dXJhbEhlaWdodDogdGV4dEZpZWxkSGVpZ2h0IH0gPSB0ZXh0RmllbGRJbWFnZTtcclxuXHJcbiAgICAgICAgY29uc3QgbGFiZWxUZXh0ID0gYCR7dGhpcy53b3JkT2JqLndvcmR9OiBgO1xyXG5cclxuICAgICAgICBjb25zdCBoYWxmSGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCAvIDIpO1xyXG4gICAgICAgIGNvbnN0IGhhbGZFeHByZXNzaW9uV2lkdGggPSBNYXRoLmNlaWwoKGdldFRleHRXaWR0aFdpdGhDYW52YXMobGFiZWxUZXh0LCAnbW9ub3NwYWNlJywgJzE2cHgnKSArIDEpIC8gMik7XHJcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IG5ldyBMYWJlbChoYWxmSGVpZ2h0IC0gdGV4dEZpZWxkSGVpZ2h0IC0gOCwgNSwgaGFsZkV4cHJlc3Npb25XaWR0aCAqIDIsIHRleHRGaWVsZEhlaWdodCwgbGFiZWxUZXh0KTtcclxuICAgICAgICBjb25zdCBhbnN3ZXIgPSBuZXcgTGFiZWwoaGFsZkhlaWdodCAtIDE1LCA1LHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQsICcnKTtcclxuXHJcbiAgICAgICAgYW5zd2VyLmVkaXRhYmxlID0gdHJ1ZTtcclxuICAgICAgICBhbnN3ZXIuc2V0QmFja2dyb3VuZENvbG9yKCcjYmIwMDAwJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IG9uZUdseXBoV2lkdGggPSBNYXRoLmNlaWwoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcygneCcsICdtb25vc3BhY2UnLCAnMTZweCcpKTtcclxuXHJcbiAgICAgICAgYW5zd2VyLm1heFRleHRMZW5ndGggPSBNYXRoLmZsb29yKHRleHRGaWVsZFdpZHRoIC8gb25lR2x5cGhXaWR0aCkgKyAxO1xyXG4gICAgICAgIGFuc3dlci5zZXRCYWNrZ3JvdW5kSW1hZ2UobmV3IEltYWdlQ29tcG9uZW50KHRleHRGaWVsZEltYWdlLCAwLCAwLCB0ZXh0RmllbGRXaWR0aCwgdGV4dEZpZWxkSGVpZ2h0LCB0ZXh0RmllbGRXaWR0aCwgdGV4dEZpZWxkSGVpZ2h0LCAwLCAwLCB0ZXh0RmllbGRXaWR0aCwgdGV4dEZpZWxkSGVpZ2h0KSk7XHJcbiAgICAgICAgYW5zd2VyLnNldFRleHRDb2xvcignI0ZGRkYwMCcpO1xyXG4gICAgICAgIGFuc3dlci5jdXJzb3Iuc2V0Q29sb3IoJyMwOEI2MDAnKTtcclxuICAgICAgICBleHByZXNzaW9uLnNldEJhY2tncm91bmRDb2xvcigncmdiYSgwLCAwLCAwLCAwKScpO1xyXG4gICAgICAgIGV4cHJlc3Npb24uc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XHJcblxyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25LZXkgPSAnZGVzY3JpcHRpb24nO1xyXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbktleSA9ICdleHByZXNzaW9uJztcclxuICAgICAgICB0aGlzLmFuc3dlcktleSA9ICdhbnN3ZXInO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uS2V5ID0gJ2J1dHRvbic7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGV4cHJlc3Npb24sIHRoaXMuZXhwcmVzc2lvbktleSk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoYW5zd2VyLCB0aGlzLmFuc3dlcktleSk7XHJcbiAgICAgICAgYW5zd2VyLmFsaWduQ2VudGVyKCk7XHJcblxyXG4gICAgICAgIGV4cHJlc3Npb24uc2V0Qm91bmRpbmdDbGllbnRSZWN0KHVuZGVmaW5lZCwgYW5zd2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFuc3dlcklzUmlnaHQoKSB7XHJcbiAgICAgICAgY29uc3QgYW5zd2VyID0gdGhpcy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLmFuc3dlcktleSkuZ2V0VGV4dCgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHRoaXMud29yZE9iai50cmFuc2xhdGU7XHJcblxyXG4gICAgICAgIGxldCBjb25jbHVzaW9uID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNsYXRlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbmNsdXNpb24gPSBhbnN3ZXIgPT09IHRyYW5zbGF0ZVtpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb25jbHVzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uY2x1c2lvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICBjb25jbHVzaW9uO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBDaGFydCBmcm9tICcuLi8uLi9Db21wb25lbnQvQ2hhcnQnO1xyXG5pbXBvcnQgVGFza01vZGFsV2luZG93IGZyb20gJy4vVGFza01vZGFsV2luZG93JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNldFBvaW50QXRDaGFydFRhc2tNb2RhbFdpbmRvdyAgZXh0ZW5kcyBUYXNrTW9kYWxXaW5kb3cge1xyXG4gICAgY29uc3RydWN0b3IodG9wID0gMCwgbGVmdCA9IDAsIHdpZHRoID0gMCwgaGVpZ2h0ID0gMCwgYWRkaXRpb25hbFJlc291cmNlcyA9IHt9LCBwYXJlbnRDb21wb25lbnQgPSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgcG9pbnQgPSB7XHJcbiAgICAgICAgICAgIHg6IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDEwKSxcclxuICAgICAgICAgICAgeTogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTApXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0LCBg0J/QvtGB0YLQsNCy0YLQtSDRgtC+0YfQutGDINGBINC60L7QvtGA0LTQuNC90LDRgtCw0LzQuCAoJHtwb2ludC54fToke3BvaW50Lnl9KTpgLCBhZGRpdGlvbmFsUmVzb3VyY2VzLCBwYXJlbnRDb21wb25lbnQpO1xyXG5cclxuICAgICAgICBjb25zdCB0YXNrRGVzY3JpcHRpb25Cb3VuZGluZ0JveCA9IHN1cGVyLmdldFRhc2tEZXNjcmlwdGlvbkNvbXBvbmVudCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IG9rQnV0dG9uQm91bmRpbmdCb3ggPSBzdXBlci5nZXRPa0J1dHRvbkNvbXBvbmVudCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICB0aGlzLmNoYXJ0Qm91bmRpbmdDbGllbnRCb3ggPSB7XHJcbiAgICAgICAgICAgIHRvcDogdGFza0Rlc2NyaXB0aW9uQm91bmRpbmdCb3guYm90dG9tICsgNSxcclxuICAgICAgICAgICAgbGVmdDogMjAsXHJcbiAgICAgICAgICAgIGJvdHRvbTogaGVpZ2h0IC0gMjAsXHJcbiAgICAgICAgICAgIHJpZ2h0OiBva0J1dHRvbkJvdW5kaW5nQm94LmxlZnQgLSA1LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnQgPSBwb2ludDtcclxuXHJcbiAgICAgICAgdGhpcy5jaGFydEJvdW5kaW5nQ2xpZW50Qm94LndpZHRoID0gdGhpcy5jaGFydEJvdW5kaW5nQ2xpZW50Qm94LnJpZ2h0IC0gdGhpcy5jaGFydEJvdW5kaW5nQ2xpZW50Qm94LmxlZnQ7XHJcbiAgICAgICAgdGhpcy5jaGFydEJvdW5kaW5nQ2xpZW50Qm94LmhlaWdodCA9IHRoaXMuY2hhcnRCb3VuZGluZ0NsaWVudEJveC5ib3R0b20gLSB0aGlzLmNoYXJ0Qm91bmRpbmdDbGllbnRCb3gudG9wO1xyXG5cclxuICAgICAgICB0aGlzLmNoYXJ0S2V5ID0gJ2NoYXJ0JztcclxuXHJcbiAgICAgICAgY29uc3QgY2hhcnRDb21wb25lbnQgPSBuZXcgQ2hhcnQodGhpcy5jaGFydEJvdW5kaW5nQ2xpZW50Qm94LnRvcCwgdGhpcy5jaGFydEJvdW5kaW5nQ2xpZW50Qm94LmxlZnQsIHRoaXMuY2hhcnRCb3VuZGluZ0NsaWVudEJveC53aWR0aCwgdGhpcy5jaGFydEJvdW5kaW5nQ2xpZW50Qm94LmhlaWdodCwgMTApO1xyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGNoYXJ0Q29tcG9uZW50LCB0aGlzLmNoYXJ0S2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBhbnN3ZXJJc1JpZ2h0KCkge1xyXG4gICAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5nZXRDaGFydENvbXBvbmVudCgpLmdldFBvaW50KCk7XHJcblxyXG4gICAgICAgIGlmIChwb2ludCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gIHRoaXMucG9pbnQueCA9PT0gcG9pbnQueCAmJiB0aGlzLnBvaW50LnkgPT09IHBvaW50Lnk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2hhcnRDb21wb25lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb21wb25lbnQodGhpcy5jaGFydEtleSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFRhc2tNb2RhbFdpbmRvdyBmcm9tICcuL1Rhc2tNb2RhbFdpbmRvdyc7XHJcbmltcG9ydCBMYWJlbCBmcm9tICcuLi8uLi9Db21wb25lbnQvTGFiZWwnO1xyXG5pbXBvcnQgSW1hZ2VDb21wb25lbnQgZnJvbSAnLi4vLi4vSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3RleHRXaWR0aCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb252ZXJ0RnJvbURlY1RvQmluVGFza01vZGFsV2luZG93ICBleHRlbmRzIFRhc2tNb2RhbFdpbmRvdyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AgPSAwLCBsZWZ0ID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwLCBhZGRpdGlvbmFsUmVzb3VyY2VzID0ge30sIHBhcmVudENvbXBvbmVudCA9IG51bGwpIHtcclxuICAgICAgICBzdXBlcih0b3AsIGxlZnQsIHdpZHRoLCBoZWlnaHQsICfQn9C10YDQtdCy0LXQtNC40YLQtSDRh9C40YHQu9C+INC40Lcg0LTQtdGB0LXRgtC40YfQvdC+0Lkg0LIg0LTQstC+0LjRh9C90YPRjiDRgdC40YHRgtC10LzRgyDRgdGH0LjRgdC70LXQvdC40Y86JywgYWRkaXRpb25hbFJlc291cmNlcywgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCB0ZXh0RmllbGRJbWFnZSA9IGFkZGl0aW9uYWxSZXNvdXJjZXMuaW1hZ2VzLnRleHRGaWVsZEltYWdlO1xyXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiB0ZXh0RmllbGRXaWR0aCwgbmF0dXJhbEhlaWdodDogdGV4dEZpZWxkSGVpZ2h0IH0gPSB0ZXh0RmllbGRJbWFnZTtcclxuXHJcbiAgICAgICAgdGhpcy5udW1iZXJUb0NvbnZlcnQgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAzMik7XHJcblxyXG4gICAgICAgIGNvbnN0IGxhYmVsVGV4dCA9IGDQp9C40YHQu9C+INC00LvRjyDQv9C10YDQtdCy0L7QtNCwICR7dGhpcy5udW1iZXJUb0NvbnZlcnR9OmA7XHJcblxyXG4gICAgICAgIGNvbnN0IGhhbGZIZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgY29uc3QgaGFsZkV4cHJlc3Npb25XaWR0aCA9IE1hdGguY2VpbCgoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcyhsYWJlbFRleHQsICdtb25vc3BhY2UnLCAnMTZweCcpICsgMSkgLyAyKTtcclxuICAgICAgICBjb25zdCBleHByZXNzaW9uID0gbmV3IExhYmVsKGhhbGZIZWlnaHQgLSB0ZXh0RmllbGRIZWlnaHQgLSA4LCA1LCBoYWxmRXhwcmVzc2lvbldpZHRoICogMiwgdGV4dEZpZWxkSGVpZ2h0LCBsYWJlbFRleHQpO1xyXG4gICAgICAgIGNvbnN0IGFuc3dlciA9IG5ldyBMYWJlbChoYWxmSGVpZ2h0IC0gMTUsIDUsdGV4dEZpZWxkV2lkdGgsIHRleHRGaWVsZEhlaWdodCwgJycpO1xyXG5cclxuICAgICAgICBhbnN3ZXIuZWRpdGFibGUgPSB0cnVlO1xyXG4gICAgICAgIGFuc3dlci5zZXRCYWNrZ3JvdW5kQ29sb3IoJyNiYjAwMDAnKTtcclxuXHJcbiAgICAgICAgYW5zd2VyLm1heFRleHRMZW5ndGggPSA4O1xyXG4gICAgICAgIGFuc3dlci5zZXRCYWNrZ3JvdW5kSW1hZ2UobmV3IEltYWdlQ29tcG9uZW50KHRleHRGaWVsZEltYWdlLCAwLCAwLCB0ZXh0RmllbGRXaWR0aCwgdGV4dEZpZWxkSGVpZ2h0LCB0ZXh0RmllbGRXaWR0aCwgdGV4dEZpZWxkSGVpZ2h0LCAwLCAwLCB0ZXh0RmllbGRXaWR0aCwgdGV4dEZpZWxkSGVpZ2h0KSk7XHJcbiAgICAgICAgYW5zd2VyLnNldFRleHRDb2xvcignI0ZGRkYwMCcpO1xyXG4gICAgICAgIGFuc3dlci5jdXJzb3Iuc2V0Q29sb3IoJyMwOEI2MDAnKTtcclxuICAgICAgICBleHByZXNzaW9uLnNldEJhY2tncm91bmRDb2xvcigncmdiYSgwLCAwLCAwLCAwKScpO1xyXG4gICAgICAgIGV4cHJlc3Npb24uc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XHJcblxyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb25LZXkgPSAnZGVzY3JpcHRpb24nO1xyXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbktleSA9ICdleHByZXNzaW9uJztcclxuICAgICAgICB0aGlzLmFuc3dlcktleSA9ICdhbnN3ZXInO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uS2V5ID0gJ2J1dHRvbic7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGV4cHJlc3Npb24sIHRoaXMuZXhwcmVzc2lvbktleSk7XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoYW5zd2VyLCB0aGlzLmFuc3dlcktleSk7XHJcbiAgICAgICAgYW5zd2VyLmFsaWduQ2VudGVyKCk7XHJcblxyXG4gICAgICAgIGV4cHJlc3Npb24uc2V0Qm91bmRpbmdDbGllbnRSZWN0KHVuZGVmaW5lZCwgYW5zd2VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFuc3dlcklzUmlnaHQoKSB7XHJcbiAgICAgICAgY29uc3QgYW5zd2VyID0gdGhpcy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLmFuc3dlcktleSkuZ2V0VGV4dCgpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gIGFuc3dlciA9PT0gdGhpcy5udW1iZXJUb0NvbnZlcnQudG9TdHJpbmcoMik7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFnaWMge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgZGFtYWdlLCBtYWdpY0dyYXBoaWNDb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuZGFtYWdlID0gZGFtYWdlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY0NvbXBvbmVudCA9IG1hZ2ljR3JhcGhpY0NvbXBvbmVudFxyXG4gICAgfVxyXG5cclxuICAgIGdldEdyYXBoaWNDb21wb25lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhpY0NvbXBvbmVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXROYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGFtYWdlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhbWFnZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgTWFnaWMgZnJvbSAnLi9NYWdpYyc7XHJcbmltcG9ydCBldmVudHMgZnJvbSAnLi4vZXZlbnQvZXZlbnRzL2V2ZW50cyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWdpY0Fycm93IGV4dGVuZHMgTWFnaWMge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgZGFtYWdlLCBtYWdpY0dyYXBoaWNDb21wb25lbnQsIGF0dGFja0FuaW1hdGlvbnMsIHNvdW5kKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSwgZGFtYWdlLCBtYWdpY0dyYXBoaWNDb21wb25lbnQpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNrQW5pbWF0aW9ucyA9IGF0dGFja0FuaW1hdGlvbnM7XHJcblxyXG4gICAgICAgIHRoaXMuc291bmQgPSBzb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRHcmFwaGljQ29tcG9uZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdyYXBoaWNDb21wb25lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhbWFnZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgYXR0YWNrKGNoYXJhY3RlciwgZW5lbXksIGNhbnZhcykge1xyXG4gICAgICAgIGNvbnN0IHsgbGVmdDogY2hhcmFjdGVyTGVmdCwgd2lkdGg6IGNoYXJhY3RlcldpZHRoIH0gPSBjaGFyYWN0ZXIuZ2V0R3JhcGhpY0NvbXBvbmVudCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHsgdG9wLCBsZWZ0LCBoZWlnaHQgfSA9IGVuZW15LmdldEdyYXBoaWNDb21wb25lbnQoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgICAgbGV0IGRpZiA9IGxlZnQgLSBjaGFyYWN0ZXJMZWZ0ICsgTWF0aC5mbG9vcihjaGFyYWN0ZXJXaWR0aCAvIDQpO1xyXG5cclxuICAgICAgICB0aGlzLmF0dGFja0FuaW1hdGlvbnNbMF0uYW5pbWF0aW9ucy5zZXRBbmltYXRpb24oJ2FzZCcsIDAuOTI0LCAxLCAoY29udGV4dCwgaW5pdGlhbFByb3BlcnRpZXMsIHByb3BlcnRpZXMsIGVsYXBzZVRpbWUsIGUpID0+IHtcclxuICAgICAgICAgICAgZS5iYWNrZ3JvdW5kSW1hZ2Uuc2V0RnJhbWUoZWxhcHNlVGltZSk7XHJcbiAgICAgICAgICAgIGUuc2V0Qm91bmRpbmdDbGllbnRSZWN0KHVuZGVmaW5lZCwgY2hhcmFjdGVyTGVmdCArIGRpZiAqIGVsYXBzZVRpbWUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBtb3ZpbmdQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5hdHRhY2tBbmltYXRpb25zWzBdLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzLkFOSU1BVElPTi5BTklNQVRJT05fRU5ELCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLnJlbW92ZVNjZW5lKHRoaXMuYXR0YWNrQW5pbWF0aW9uc1swXSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmF0dGFja0FuaW1hdGlvbnNbMF0uc2V0Qm91bmRpbmdDbGllbnRSZWN0KHRvcCArIE1hdGguZmxvb3IoaGVpZ2h0IC8gMiksIGNoYXJhY3RlckxlZnQpO1xyXG5cclxuICAgICAgICBjYW52YXMuYWRkU2NlbmUodGhpcy5hdHRhY2tBbmltYXRpb25zWzBdKTtcclxuXHJcbiAgICAgICAgdGhpcy5zb3VuZC5wbGF5KCk7XHJcblxyXG4gICAgICAgIGF3YWl0IG1vdmluZ1Byb21pc2U7XHJcblxyXG4gICAgICAgIHRoaXMuYXR0YWNrQW5pbWF0aW9uc1sxXS5hbmltYXRpb25zLnNldEFuaW1hdGlvbignYXNkJywgMC45MjQsIDEsIChjb250ZXh0LCBpbml0aWFsUHJvcGVydGllcywgcHJvcGVydGllcywgZWxhcHNlVGltZSwgZSkgPT4ge1xyXG4gICAgICAgICAgICBlLmJhY2tncm91bmRJbWFnZS5zZXRGcmFtZShlbGFwc2VUaW1lKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgYXR0YWNrUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNrQW5pbWF0aW9uc1sxXS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5BTklNQVRJT04uQU5JTUFUSU9OX0VORCwgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5yZW1vdmVTY2VuZSh0aGlzLmF0dGFja0FuaW1hdGlvbnNbMV0pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hdHRhY2tBbmltYXRpb25zWzFdLnNldEJvdW5kaW5nQ2xpZW50UmVjdCh0b3AgKyBNYXRoLmZsb29yKGhlaWdodCAvIDIpLCBsZWZ0ICsgTWF0aC5mbG9vcihjaGFyYWN0ZXJXaWR0aCAvIDQpKTtcclxuXHJcbiAgICAgICAgY2FudmFzLmFkZFNjZW5lKHRoaXMuYXR0YWNrQW5pbWF0aW9uc1sxXSk7XHJcblxyXG4gICAgICAgIGF3YWl0IGF0dGFja1Byb21pc2U7ICAgICAgICBcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgTWFnaWMgZnJvbSAnLi9NYWdpYyc7XHJcbmltcG9ydCBldmVudHMgZnJvbSAnLi4vZXZlbnQvZXZlbnRzL2V2ZW50cyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbXBsb3Npb24gZXh0ZW5kcyBNYWdpYyB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBkYW1hZ2UsIG1hZ2ljR3JhcGhpY0NvbXBvbmVudCwgYXR0YWNrQW5pbWF0aW9ucywgc291bmQpIHtcclxuICAgICAgICBzdXBlcihuYW1lLCBkYW1hZ2UsIG1hZ2ljR3JhcGhpY0NvbXBvbmVudCk7XHJcbiAgICAgICAgdGhpcy5hdHRhY2tBbmltYXRpb25zID0gYXR0YWNrQW5pbWF0aW9ucztcclxuXHJcbiAgICAgICAgdGhpcy5zb3VuZCA9IHNvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdyYXBoaWNDb21wb25lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JhcGhpY0NvbXBvbmVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXROYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGFtYWdlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhbWFnZTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBhdHRhY2soY2hhcmFjdGVyLCBlbmVteSwgY2FudmFzKSB7XHJcbiAgICAgICAgY29uc3QgeyB0b3AsIGxlZnQsIHdpZHRoIH0gPSBlbmVteS5nZXRHcmFwaGljQ29tcG9uZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuYXR0YWNrQW5pbWF0aW9uc1swXS5hbmltYXRpb25zLnNldEFuaW1hdGlvbignYXNkJywgMC45MjQsIDEsIChjb250ZXh0LCBpbml0aWFsUHJvcGVydGllcywgcHJvcGVydGllcywgZWxhcHNlVGltZSwgZSkgPT4ge1xyXG4gICAgICAgICAgICBlLmJhY2tncm91bmRJbWFnZS5zZXRGcmFtZShlbGFwc2VUaW1lKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgYXR0YWNrUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNrQW5pbWF0aW9uc1swXS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5BTklNQVRJT04uQU5JTUFUSU9OX0VORCwgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5yZW1vdmVTY2VuZSh0aGlzLmF0dGFja0FuaW1hdGlvbnNbMF0pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5hdHRhY2tBbmltYXRpb25zWzBdLnNldEJvdW5kaW5nQ2xpZW50UmVjdCh0b3AsIE1hdGguZmxvb3IobGVmdCArIHdpZHRoIC8gMykpO1xyXG5cclxuICAgICAgICB0aGlzLnNvdW5kLnBsYXkoKTtcclxuICAgICAgICBjYW52YXMuYWRkU2NlbmUodGhpcy5hdHRhY2tBbmltYXRpb25zWzBdKTtcclxuXHJcbiAgICAgICAgYXdhaXQgYXR0YWNrUHJvbWlzZTsgICAgICAgIFxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBJbWFnZUNvbXBvbmVudCBmcm9tIFwiLi4vVUkvSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnRcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4uL1VJL0NvbXBvbmVudC9Db21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hZ2ljR3JhcGhpY0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AsIGxlZnQsIHNjYWxlLCBtYWdpY0ltZywgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0IH0gPSBtYWdpY0ltZztcclxuICAgICAgICBjb25zdCBzY2FsZWRXaWR0aCA9IG5hdHVyYWxXaWR0aCAqIHNjYWxlO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IG5hdHVyYWxIZWlnaHQgKiBzY2FsZTtcclxuXHJcbiAgICAgICAgc3VwZXIodG9wLCBsZWZ0LCBzY2FsZWRXaWR0aCwgc2NhbGVkSGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xyXG5cclxuICAgICAgICBpZiAobWFnaWNJbWcgaW5zdGFuY2VvZiBJbWFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQobWFnaWNJbWcsIDAsIDAsIG5hdHVyYWxXaWR0aCwgbmF0dXJhbEhlaWdodCwgc2NhbGVkV2lkdGgsIHNjYWxlZEhlaWdodCwgMCwgMCwgbmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMuY3Vyc29yID0gJ3BvaW50ZXInO1xyXG4gICAgfSBcclxufVxyXG4iLCJpbXBvcnQgTWFnaWNBcnJvdyBmcm9tICcuLi9NYWdpYy9NYWdpY0Fycm93JztcclxuaW1wb3J0IEltcGxvc2lvbiBmcm9tICcuLi9NYWdpYy9JbXBsb3Npb24nO1xyXG5pbXBvcnQgSW1hZ2VDb21wb25lbnQgZnJvbSAnLi4vVUkvSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnQnO1xyXG5pbXBvcnQgTWFnaWNHcmFwaGljQ29tcG9uZW50IGZyb20gJy4uL0dyYXBoaWNDb21wb25lbnQvTWFnaWNHcmFwaGljQ29tcG9uZW50JztcclxuXHJcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL1VJL0NvbXBvbmVudC9Db21wb25lbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFnaWNGYWN0b3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYXNzZXRzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTWFnaWNBc3NldHMoaW1hZ2VzLCBzb3VuZCwgbmFtZSkge1xyXG4gICAgICAgIHRoaXMuYXNzZXRzW25hbWVdID0ge1xyXG4gICAgICAgICAgICBpbWFnZXMsXHJcbiAgICAgICAgICAgIHNvdW5kXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVNYWdpY0Fycm93KGRhbWFnZSwgZm9yRW5lbXkgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5hc3NldHMubWFnaWNBcnJvdykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGltYWdlcyA9IHRoaXMuYXNzZXRzLm1hZ2ljQXJyb3cuaW1hZ2VzO1xyXG4gICAgICAgIGNvbnN0IHNvdW5kID0gdGhpcy5hc3NldHMubWFnaWNBcnJvdy5zb3VuZDtcclxuXHJcbiAgICAgICAgY29uc3QgaW1nID0gaW1hZ2VzWzBdO1xyXG4gICAgICAgIGxldCBtb3ZpbmdBbmltYXRpb25JbWcgPSBpbWFnZXNbMV07XHJcbiAgICAgICAgY29uc3QgYmxvd0FuaW1hdGlvbkltZyA9IGltYWdlc1szXTtcclxuXHJcbiAgICAgICAgaWYgKGZvckVuZW15KSB7XHJcbiAgICAgICAgICAgIG1vdmluZ0FuaW1hdGlvbkltZyA9IGltYWdlc1syXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB7IG5hdHVyYWxXaWR0aCwgbmF0dXJhbEhlaWdodCB9ID0gbW92aW5nQW5pbWF0aW9uSW1nO1xyXG5cclxuICAgICAgICBjb25zdCBtYWdpY01vdmluZ0FuaW1hdGlvbiA9IG5ldyBJbWFnZUNvbXBvbmVudChtb3ZpbmdBbmltYXRpb25JbWcsIDAsIDAsIG5hdHVyYWxXaWR0aCAsIG5hdHVyYWxIZWlnaHQsIG5hdHVyYWxXaWR0aCAvIDE0LCBuYXR1cmFsSGVpZ2h0LCAwLCAwLCBuYXR1cmFsV2lkdGggLyAxNCwgbmF0dXJhbEhlaWdodCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1vdmluZ0FuaW1hdGlvbiA9IG5ldyBDb21wb25lbnQoMCwgMCwgbmF0dXJhbFdpZHRoIC8gMTQsIG5hdHVyYWxIZWlnaHQpO1xyXG4gICAgICAgIG1vdmluZ0FuaW1hdGlvbi5zZXRCYWNrZ3JvdW5kSW1hZ2UobWFnaWNNb3ZpbmdBbmltYXRpb24pO1xyXG4gICAgICAgIFxyXG4gICAgICAgICh7bmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0IH0gPSBibG93QW5pbWF0aW9uSW1nKTtcclxuXHJcbiAgICAgICAgY29uc3QgbWFnaWNCbG93QW5pbWF0aW9uID0gbmV3IEltYWdlQ29tcG9uZW50KGJsb3dBbmltYXRpb25JbWcsIDAsIDAsIG5hdHVyYWxXaWR0aCAsIG5hdHVyYWxIZWlnaHQsIG5hdHVyYWxXaWR0aCAvIDE0LCBuYXR1cmFsSGVpZ2h0LCAwLCAwLCBuYXR1cmFsV2lkdGggLyAxNCwgbmF0dXJhbEhlaWdodCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5ldyBDb21wb25lbnQoMCwgMCwgbmF0dXJhbFdpZHRoIC8gMTQsIG5hdHVyYWxIZWlnaHQpO1xyXG4gICAgICAgIGFuaW1hdGlvbi5zZXRCYWNrZ3JvdW5kSW1hZ2UobWFnaWNCbG93QW5pbWF0aW9uKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ3JhcGhpY0NvbXBvbmVudCA9IG5ldyBNYWdpY0dyYXBoaWNDb21wb25lbnQoMTAsIDEwLCAyLCBpbWcpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBuZXcgTWFnaWNBcnJvdygn0JLQvtC70YjQtdCx0L3QsNGPINGB0YLRgNC10LvQsCcsIGRhbWFnZSwgZ3JhcGhpY0NvbXBvbmVudCwgW21vdmluZ0FuaW1hdGlvbiwgYW5pbWF0aW9uXSwgc291bmQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUltcGxvc2lvbkFycm93KGRhbWFnZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5hc3NldHMuaW1wbG9zaW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaW1hZ2VzID0gdGhpcy5hc3NldHMuaW1wbG9zaW9uLmltYWdlcztcclxuICAgICAgICBjb25zdCBzb3VuZCA9IHRoaXMuYXNzZXRzLmltcGxvc2lvbi5zb3VuZDtcclxuXHJcbiAgICAgICAgY29uc3QgaW1nID0gaW1hZ2VzWzBdO1xyXG4gICAgICAgIGNvbnN0IGJsb3dBbmltYXRpb25JbWcgPSBpbWFnZXNbMV07XHJcblxyXG4gICAgICAgIGxldCB7IG5hdHVyYWxXaWR0aCwgbmF0dXJhbEhlaWdodCB9ID0gYmxvd0FuaW1hdGlvbkltZztcclxuXHJcbiAgICAgICAgY29uc3QgbWFnaWNCbG93QW5pbWF0aW9uID0gbmV3IEltYWdlQ29tcG9uZW50KGJsb3dBbmltYXRpb25JbWcsIDAsIDAsIG5hdHVyYWxXaWR0aCAsIG5hdHVyYWxIZWlnaHQsIG5hdHVyYWxXaWR0aCAvIDE5LCBuYXR1cmFsSGVpZ2h0LCAwLCAwLCBuYXR1cmFsV2lkdGggLyAxOSwgbmF0dXJhbEhlaWdodCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5ldyBDb21wb25lbnQoMCwgMCwgbmF0dXJhbFdpZHRoIC8gMTksIG5hdHVyYWxIZWlnaHQpO1xyXG4gICAgICAgIGFuaW1hdGlvbi5zZXRCYWNrZ3JvdW5kSW1hZ2UobWFnaWNCbG93QW5pbWF0aW9uKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ3JhcGhpY0NvbXBvbmVudCA9IG5ldyBNYWdpY0dyYXBoaWNDb21wb25lbnQoMTAsIDEwLCAyLCBpbWcpO1xyXG4gICAgICAgIHJldHVybiBuZXcgSW1wbG9zaW9uKCfQktC30YDRi9CyJywgZGFtYWdlLCBncmFwaGljQ29tcG9uZW50LCBbYW5pbWF0aW9uXSwgc291bmQpO1xyXG4gICAgfVxyXG59IFxyXG4iLCJpbXBvcnQgSW1hZ2VDb21wb25lbnQgZnJvbSAnLi4vVUkvSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vVUkvQ29tcG9uZW50L0NvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb25zdGVyR3JhcGhpY0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b3AsIGxlZnQsIGNoYXJhY3RlckltZywgcGFyZW50Q29tcG9uZW50ID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0IH0gPSBjaGFyYWN0ZXJJbWc7XHJcblxyXG4gICAgICAgIHN1cGVyKHRvcCwgbGVmdCwgbmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0LCBwYXJlbnRDb21wb25lbnQpO1xyXG5cclxuICAgICAgICB0aGlzLnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQoY2hhcmFjdGVySW1nLCAwLCAwLCBuYXR1cmFsV2lkdGgsIG5hdHVyYWxIZWlnaHQsIG5hdHVyYWxXaWR0aCwgbmF0dXJhbEhlaWdodCwgMCwgMCwgbmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0KSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgR2FtZSBmcm9tICcuL0dhbWUvR2FtZSc7XG5cbndpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgY29uc3QgZ2FtZSA9IG5ldyBHYW1lKCk7XG4gfTtcbiAiLCJpbXBvcnQgQ2FudmFzIGZyb20gJy4uL0NhbnZhcy9DYW52YXMnO1xuaW1wb3J0IEV2ZW50UXVldWUgZnJvbSAnLi4vZXZlbnQvRXZlbnRRdWV1ZS9FdmVudFF1ZXVlJztcbmltcG9ydCBldmVudHMgZnJvbSAnLi4vZXZlbnQvZXZlbnRzL2V2ZW50cyc7XG5pbXBvcnQgVUkgZnJvbSAnLi4vVUkvVUknO1xuaW1wb3J0IExhYmVsIGZyb20gJy4uL1VJL0NvbXBvbmVudC9MYWJlbCc7XG5pbXBvcnQgSW1hZ2VDb21wb25lbnQgZnJvbSAnLi4vVUkvSW1hZ2VDb21wb25lbnQvSW1hZ2VDb21wb25lbnQnO1xuaW1wb3J0IFRleHRJbnB1dE1vZGFsV2luZG93IGZyb20gJy4uL1VJL01vZGFsV2luZG93cy9UZXh0SW5wdXRNb2RhbFdpbmRvdyc7XG5pbXBvcnQgTWFnaWNTZWxlY3RpbmdNb2RhbFdpbmRvdyBmcm9tICcuLi9VSS9Nb2RhbFdpbmRvd3MvTWFnaWNTZWxlY3RpbmdNb2RhbFdpbmRvdyc7XG5pbXBvcnQgUHJvZ3Jlc3NCYXIgZnJvbSAnLi4vVUkvQ29tcG9uZW50L1Byb2dyZXNzQmFyJztcbmltcG9ydCBTdGF0dXNCYXIgZnJvbSAnLi4vVUkvQ29tcG9uZW50L1N0YXR1c0Jhcic7XG5pbXBvcnQgQ2hhcmFjdGVySW5mb1dpbmRvdyBmcm9tICcuLi9VSS9Db21wb25lbnQvQ2hhcmFjdGVySW5mb1dpbmRvdyc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL1VJL0NvbXBvbmVudC9CdXR0b24nO1xuaW1wb3J0IFRhYmxlIGZyb20gJy4uL1VJL0NvbXBvbmVudC9UYWJsZSc7XG5pbXBvcnQgTG9hZE1hbmFnZXIgZnJvbSAnLi4vTWFuYWdlcnMvTG9hZE1hbmFnZXInO1xuaW1wb3J0IFN0b3JhZ2VNYW5hZ2VyIGZyb20gJy4uL01hbmFnZXJzL1N0b3JhZ2VNYW5hZ2VyJztcbmltcG9ydCBQQVRIIGZyb20gJy4uL3BhdGgvcGF0aCc7XG5pbXBvcnQgTW9uc3RlckZhY3RvcnkgZnJvbSAnLi4vRmFjdG9yaWVzL01vbnN0ZXJGYWN0b3J5JztcbmltcG9ydCBUYXNrRmFjdG9yeSBmcm9tICcuLi9GYWN0b3JpZXMvVGFza0ZhY3RvcnknO1xuaW1wb3J0IE1hZ2ljRmFjdG9yeSBmcm9tICcuLi9GYWN0b3JpZXMvTWFnaWNGYWN0b3J5JztcbmltcG9ydCBQbGF5ZXJHcmFwaGljQ29tcG9uZW50IGZyb20gJy4uL0dyYXBoaWNDb21wb25lbnQvUGxheWVyR3JhcGNoaWNDb21wb25lbnQnO1xuaW1wb3J0IENoYXJhY3RlciBmcm9tICcuLi9DaGFyYWN0ZXIvQ2hhcmFjdGVyJztcbmltcG9ydCBuYW1lVGFza01hcCBmcm9tICcuLi9kaWN0aW9uYXJ5L25hbWVUYXNrTWFwJztcblxuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb3NpdGVDb21wb25lbnQgfSBmcm9tICcuLi9VSS9Db21wb25lbnQvQ29tcG9uZW50JztcbmltcG9ydCB7IGdldFRleHRXaWR0aFdpdGhDYW52YXMgfSBmcm9tICcuLi91dGlscy90ZXh0V2lkdGgnO1xuaW1wb3J0IHsgY3JlYXRlRmlsZVByb21pc2UgfSBmcm9tICcuLi91dGlscy9maWxlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZEltZ3NLZXkgPSAnYmFja2dyb3VuZCc7XG4gICAgICAgIHRoaXMubWFpbkNoYXJJbWdzS2V5ID0gJ21haW5jaGFyJztcbiAgICAgICAgdGhpcy5oZWFkSW1nc0tleSA9ICdoZWFkcyc7XG4gICAgICAgIHRoaXMuYm9keUltZ3NLZXkgPSAnYm9kaWVzJztcbiAgICAgICAgdGhpcy5sZWZ0QXJtSW1nc0tleSA9ICdsZWZ0YXJtcyc7XG4gICAgICAgIHRoaXMucmlnaHRBcm1JbWdzS2V5ID0gJ3JpZ2h0YXJtcyc7XG4gICAgICAgIHRoaXMubGVnSW1nc0tleSA9ICdsZWdzJztcbiAgICAgICAgdGhpcy5tYWdpY0ltZ3NLZXkgPSAnbWFnaWNzJztcbiAgICAgICAgdGhpcy51aUltZ3NLZXkgPSAndWknO1xuICAgICAgICB0aGlzLnRhc2tJbWdzS2V5ID0gJ3Rhc2snO1xuXG4gICAgICAgIHRoaXMubWFnaWNTb3VuZEtleSA9ICdtYWdpY3MnO1xuXG4gICAgICAgIHRoaXMuc3RhdHVzQmFyS2V5ID0gJ3N0YXR1c2Jhcic7XG5cbiAgICAgICAgdGhpcy5tb25zdGVyS2lsbENvdW50ID0gMDtcblxuICAgICAgICB0aGlzLmxvYWRNYW5hZ2VyID0gbmV3IExvYWRNYW5hZ2VyKCk7XG4gICAgICAgIHRoaXMuc3RvcmFnZU1hbmFnZXIgPSBuZXcgU3RvcmFnZU1hbmFnZXIoKTtcblxuICAgICAgICB0aGlzLmNhbnZhcyA9IG5ldyBDYW52YXMoKTtcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlID0gbmV3IEV2ZW50UXVldWUoKTtcbiAgICAgICAgdGhpcy51aSA9IG5ldyBVSSgpO1xuICAgICAgICB0aGlzLnVpQ29tcG9uZW50cztcblxuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBuZXcgQ29tcG9uZW50KDAsIDAsICcxMDAlJywgJzEwMCUnKTtcblxuICAgICAgICB0aGlzLmluaXQoKTtcblxuICAgICAgICB0aGlzLm1haW4gPSB0aGlzLm1haW4uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5tYWluKDApO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIGNvbnN0IGxvYWRpbmdTY3JlZW4gPSBhd2FpdCB0aGlzLnNob3dMb2FkaW5nU2NyZWVuKCk7XG4gICAgICAgIGNvbnN0IGxvYWRpbmdQcm9ncmVzc0JhciA9IGxvYWRpbmdTY3JlZW4uZ2V0TG9hZGluZ1Byb2dyZXNzQmFyKCk7XG5cbiAgICAgICAgdGhpcy5pbml0TG9hZGluZ1BhdGgoKTtcblxuICAgICAgICBjb25zdCBsb2FkTWFuYWdlciA9IHRoaXMubG9hZE1hbmFnZXI7XG5cbiAgICAgICAgY29uc3QgdG90YWxTaXplID0gYXdhaXQgbG9hZE1hbmFnZXIuY2FsY3VsYXRlVG90YWxTaXplKCk7XG5cbiAgICAgICAgYXdhaXQgbG9hZE1hbmFnZXIubG9hZCgobG9hZGVkUGVyY2VudGFnZSkgPT4gbG9hZGluZ1Byb2dyZXNzQmFyLnNldFZhbHVlKGxvYWRlZFBlcmNlbnRhZ2UpKTtcblxuICAgICAgICB0aGlzLmNhbnZhcy5yZW1vdmVTY2VuZShsb2FkaW5nU2NyZWVuKTtcblxuICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gbG9hZE1hbmFnZXIuZ2V0SW1hZ2VzQnlOYW1lKHRoaXMuYmFja2dyb3VuZEltZ3NLZXkpWzBdO1xuXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5iYWNrZ3JvdW5kLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZC5zZXRCYWNrZ3JvdW5kSW1hZ2UobmV3IEltYWdlQ29tcG9uZW50KGJhY2tncm91bmQsIDAsIDAsIGJhY2tncm91bmQubmF0dXJhbFdpZHRoLCBiYWNrZ3JvdW5kLm5hdHVyYWxIZWlnaHQsIHdpZHRoLCBoZWlnaHQsIDAsIDAsICBiYWNrZ3JvdW5kLm5hdHVyYWxXaWR0aCwgYmFja2dyb3VuZC5uYXR1cmFsSGVpZ2h0KSk7XG5cbiAgICAgICAgdGhpcy5jYW52YXMuYWRkU2NlbmUodGhpcy5iYWNrZ3JvdW5kKTtcblxuICAgICAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXJzVG9DYW52YXMoKTtcblxuICAgICAgICBjb25zdCBoZWFkcyA9IGxvYWRNYW5hZ2VyLmdldEltYWdlc0J5TmFtZSh0aGlzLmhlYWRJbWdzS2V5KTtcbiAgICAgICAgY29uc3QgYm9kaWVzID0gbG9hZE1hbmFnZXIuZ2V0SW1hZ2VzQnlOYW1lKHRoaXMuYm9keUltZ3NLZXkpO1xuICAgICAgICBjb25zdCBsZWZ0QXJtcyA9IGxvYWRNYW5hZ2VyLmdldEltYWdlc0J5TmFtZSh0aGlzLmxlZnRBcm1JbWdzS2V5KTtcbiAgICAgICAgY29uc3QgcmlnaHRBcm1zID0gbG9hZE1hbmFnZXIuZ2V0SW1hZ2VzQnlOYW1lKHRoaXMucmlnaHRBcm1JbWdzS2V5KTtcbiAgICAgICAgY29uc3QgbGVncyA9IGxvYWRNYW5hZ2VyLmdldEltYWdlc0J5TmFtZSh0aGlzLmxlZ0ltZ3NLZXkpO1xuXG4gICAgICAgIHRoaXMudGFza0ZhY3RvcnkgPSBuZXcgVGFza0ZhY3RvcnkodGhpcy5sb2FkTWFuYWdlci5nZXRJbWFnZXNCeU5hbWUodGhpcy51aUltZ3NLZXkpLCB0aGlzLmxvYWRNYW5hZ2VyLmdldEltYWdlc0J5TmFtZSh0aGlzLnRhc2tJbWdzS2V5KSk7XG4gICAgICAgIHRoaXMubWFnaWNGYWN0b3J5ID0gbmV3IE1hZ2ljRmFjdG9yeSgpO1xuICAgICAgICB0aGlzLm1vbnN0ZXJGYWN0b3J5ID0gbmV3IE1vbnN0ZXJGYWN0b3J5KGhlYWRzLCBsZWZ0QXJtcywgcmlnaHRBcm1zLCBib2RpZXMsIGxlZ3MpO1xuXG4gICAgICAgIHRoaXMubWFnaWNGYWN0b3J5LmFkZE1hZ2ljQXNzZXRzKGxvYWRNYW5hZ2VyLmdldEltYWdlc0J5TmFtZSh0aGlzLm1hZ2ljSW1nc0tleSkuc2xpY2UoMCwgNCksIGxvYWRNYW5hZ2VyLmdldFNvdW5kQnlOYW1lKHRoaXMubWFnaWNTb3VuZEtleSlbMF0sICdtYWdpY0Fycm93Jyk7XG4gICAgICAgIHRoaXMubWFnaWNGYWN0b3J5LmFkZE1hZ2ljQXNzZXRzKGxvYWRNYW5hZ2VyLmdldEltYWdlc0J5TmFtZSh0aGlzLm1hZ2ljSW1nc0tleSkuc2xpY2UoNCwgNCArIDIpLCBsb2FkTWFuYWdlci5nZXRTb3VuZEJ5TmFtZSh0aGlzLm1hZ2ljU291bmRLZXkpWzFdLCAnaW1wbG9zaW9uJyk7XG5cbiAgICAgICAgdGhpcy5zZXRVcFVJKCk7XG4gICAgfSAgIFxuXG4gICAgc2V0VXBVSShuYW1lID0gJycpIHtcbiAgICAgICAgY29uc3QgbG9hZE1hbmFnZXIgPSB0aGlzLmxvYWRNYW5hZ2VyO1xuXG4gICAgICAgIHRoaXMudWlDb21wb25lbnRzID0gbmV3IENvbXBvc2l0ZUNvbXBvbmVudCgwLCAwLCB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcblxuICAgICAgICBjb25zdCBzdGF0dXNCYXJJbWcgPSBsb2FkTWFuYWdlci5nZXRJbWFnZXNCeU5hbWUodGhpcy51aUltZ3NLZXkpLnNsaWNlKDUsIDUgKyAzKTtcblxuICAgICAgICBjb25zdCBzdGF0dXNCYXJJbWdPYmcgPSB7XG4gICAgICAgICAgICBiYWNrOiBzdGF0dXNCYXJJbWdbMF0sXG4gICAgICAgICAgICBsZWZ0OiBzdGF0dXNCYXJJbWdbMV0sXG4gICAgICAgICAgICByaWdodDogc3RhdHVzQmFySW1nWzJdLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHN0YXR1c0JhciA9IG5ldyBTdGF0dXNCYXIod2luZG93LmlubmVySGVpZ2h0IC0gMTUwLCAwLCB3aW5kb3cuaW5uZXJXaWR0aCwgMTUwLCBzdGF0dXNCYXJJbWdPYmcpO1xuICAgICAgICBzdGF0dXNCYXIuc2V0QmFja2dyb3VuZENvbG9yKCcjMDBmZjAwJyk7XG5cbiAgICAgICAgY29uc3QgaW5mb1dpbmRvd0ltYWdlID0gbG9hZE1hbmFnZXIuZ2V0SW1hZ2VzQnlOYW1lKHRoaXMudWlJbWdzS2V5KVs4XTtcblxuICAgICAgICBjb25zdCBwbGF5ZXJJbmZvV2luZG93ID0gbmV3IENoYXJhY3RlckluZm9XaW5kb3coMTAsIE1hdGguY2VpbCh3aW5kb3cuaW5uZXJXaWR0aCAvIDIpIC0gMjAwIC0gMTUwLCAyMDAsIDEzMCwgJycsIDAsIDEwMCwgMCwgeyBiYWNrOiBpbmZvV2luZG93SW1hZ2UgfSk7XG4gICAgICAgIGNvbnN0IG1vbnN0ZXJJbmZvV2luZG93ID0gbmV3IENoYXJhY3RlckluZm9XaW5kb3coMTAsIE1hdGguY2VpbCh3aW5kb3cuaW5uZXJXaWR0aCAvIDIpICsgMTUwLCAyMDAsIDEzMCwgJycsIDAsIDEwMCwgMCwgeyBiYWNrOiBpbmZvV2luZG93SW1hZ2UgfSk7XG4gICAgICAgIHN0YXR1c0Jhci5zZXRQbGF5ZXJJbmZvV2luZG93KHBsYXllckluZm9XaW5kb3cpO1xuICAgICAgICBzdGF0dXNCYXIuc2V0RW5lbXlJbmZvV2luZG93KG1vbnN0ZXJJbmZvV2luZG93KTtcbiAgICAgICAgcGxheWVySW5mb1dpbmRvdy5zZXRCYWNrZ3JvdW5kQ29sb3IoJyNmNGYxNDInKTtcbiAgICAgICAgbW9uc3RlckluZm9XaW5kb3cuc2V0QmFja2dyb3VuZENvbG9yKCcjZjRmMTQyJyk7XG5cbiAgICAgICAgdGhpcy51aS5hZGQodGhpcy51aUNvbXBvbmVudHMpO1xuXG4gICAgICAgIGNvbnN0IG1vZGFsV2luZG93ID0gdGhpcy5zaG93TmFtZUVudGVyKG5hbWUpO1xuXG4gICAgICAgIG1vZGFsV2luZG93LmFkZEJ1dHRvbkV2ZW50TGlzdGVuZXIoZXZlbnRzLk1PVVNFLk1PVVNFX0RPV04sIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZS50YXJnZXQuZ2V0UGFyZW50Q29tcG9uZW50KCkuZ2V0SW5wdXRVc2VyKCk7XG4gICAgICAgICAgICB0aGlzLnVpQ29tcG9uZW50cy5yZW1vdmVDb21wb25lbnQobW9kYWxXaW5kb3cpO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuZ2V0SHRtbCgpLnN0eWxlLmN1cnNvciA9ICdhdXRvJztcbiAgICBcbiAgICAgICAgICAgIHRoaXMudWlDb21wb25lbnRzLmFkZENvbXBvbmVudChzdGF0dXNCYXIsIHRoaXMuc3RhdHVzQmFyS2V5KTtcbiAgICBcbiAgICAgICAgICAgIHRoaXMubWFpbkxvZ2ljKG5hbWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnVpQ29tcG9uZW50cy5hZGRDb21wb25lbnQobW9kYWxXaW5kb3cpO1xuXG4gICAgICAgIHRoaXMuY2FudmFzLmFkZFVJKHRoaXMudWkpO1xuICAgIH1cblxuICAgIGluaXRMb2FkaW5nUGF0aCgpIHtcbiAgICAgICAgY29uc3QgbG9hZE1hbmFnZXIgPSB0aGlzLmxvYWRNYW5hZ2VyO1xuXG4gICAgICAgIGxvYWRNYW5hZ2VyLmFkZFVybCh7XG4gICAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuVUl9L2JhcmRhdGEuanBnYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLlVJfS90ZXh0ZmllbGQuanBnYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLlVJfS9sZWF0aGVyLmpwZ2AsXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5VSX0vb2tidXR0b24uanBnYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLlVJfS9taWNyb2J1dHRvbi5qcGdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuVUl9L3N0YXR1cy5qcGdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuVUl9L3N0YXR1c2xlZnQuanBnYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLlVJfS9zdGF0dXNyaWdodC5qcGdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuVUl9L2NoYXJhY3RlcmluZm93aW5kb3cuanBnYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLlVJfS9zcGVsbHNlbC5qcGdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuVUl9L3RhYmxlLmpwZ2AsXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5VSX0vcmVsb2FkYnV0dG9uLmpwZ2AsXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGltYWdlOiB0aGlzLnVpSW1nc0tleVxuICAgICAgICB9KTtcblxuICAgICAgICBsb2FkTWFuYWdlci5hZGRVcmwoe1xuICAgICAgICAgICAgaW1hZ2U6IFtgJHtQQVRILklNQUdFLkJBQ0tHUk9VTkRfSU1BR0VTfS9kdW5nZW9uLmpwZ2BdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGltYWdlOiB0aGlzLmJhY2tncm91bmRJbWdzS2V5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxvYWRNYW5hZ2VyLmFkZFVybCh7XG4gICAgICAgICAgICBpbWFnZTogW2Ake1BBVEguSU1BR0UuTUFJTl9DSEFSfS9tYWluQ2hhci5wbmdgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBpbWFnZTogdGhpcy5tYWluQ2hhckltZ3NLZXlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbG9hZE1hbmFnZXIuYWRkVXJsKHtcbiAgICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5IRUFEX0lNQUdFU30vaGVhZF8xLnBuZ2AsXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5IRUFEX0lNQUdFU30vaGVhZF8yLnBuZ2AsXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5IRUFEX0lNQUdFU30vaGVhZF8zLnBuZ2AsXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5IRUFEX0lNQUdFU30vaGVhZF80LnBuZ2AsXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGltYWdlOiB0aGlzLmhlYWRJbWdzS2V5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxvYWRNYW5hZ2VyLmFkZFVybCh7XG4gICAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuQk9EWV9JTUFHRVN9L2JvZHlfMS5wbmdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuQk9EWV9JTUFHRVN9L2JvZHlfMi5wbmdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuQk9EWV9JTUFHRVN9L2JvZHlfMy5wbmdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuQk9EWV9JTUFHRVN9L2JvZHlfNC5wbmdgLFxuICAgICAgICAgICAgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBpbWFnZTogdGhpcy5ib2R5SW1nc0tleVxuICAgICAgICB9KTtcblxuICAgICAgICBsb2FkTWFuYWdlci5hZGRVcmwoe1xuICAgICAgICAgICAgaW1hZ2U6IFtcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLkxFRlRfQVJNX0lNQUdFU30vYXJtXzEucG5nYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLkxFRlRfQVJNX0lNQUdFU30vYXJtXzIucG5nYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLkxFRlRfQVJNX0lNQUdFU30vYXJtXzMucG5nYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLkxFRlRfQVJNX0lNQUdFU30vYXJtXzQucG5nYCxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgaW1hZ2U6IHRoaXMubGVmdEFybUltZ3NLZXlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbG9hZE1hbmFnZXIuYWRkVXJsKHtcbiAgICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5SSUdIVF9BUk1fSU1BR0VTfS9hcm1fMS5wbmdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuUklHSFRfQVJNX0lNQUdFU30vYXJtXzIucG5nYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLlJJR0hUX0FSTV9JTUFHRVN9L2FybV8zLnBuZ2AsXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5SSUdIVF9BUk1fSU1BR0VTfS9hcm1fNC5wbmdgLFxuICAgICAgICAgICAgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBpbWFnZTogdGhpcy5yaWdodEFybUltZ3NLZXlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbG9hZE1hbmFnZXIuYWRkVXJsKHtcbiAgICAgICAgICAgIGltYWdlOiBbXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5MRUdfSU1BR0VTfS9sZWdfMS5wbmdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuTEVHX0lNQUdFU30vbGVnXzIucG5nYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLkxFR19JTUFHRVN9L2xlZ18zLnBuZ2AsXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5MRUdfSU1BR0VTfS9sZWdfNC5wbmdgLFxuICAgICAgICAgICAgXVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBpbWFnZTogdGhpcy5sZWdJbWdzS2V5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxvYWRNYW5hZ2VyLmFkZFVybCh7XG4gICAgICAgICAgICBpbWFnZTogW1xuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuTUFHSUN9L21hZ2ljQXJyb3cvbWFnaWNBcnJvdy5wbmdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuTUFHSUN9L21hZ2ljQXJyb3cvbWFnaWNBcnJvd01vdGlvbkFuaW1hdGlvbi5wbmdgLFxuICAgICAgICAgICAgICAgIGAke1BBVEguSU1BR0UuTUFHSUN9L21hZ2ljQXJyb3cvbWFnaWNBcnJvd01vdGlvbkFuaW1hdGlvblJldmVyc2UucG5nYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLk1BR0lDfS9tYWdpY0Fycm93L21hZ2ljQXJyb3dCbG93QW5pbWF0aW9uLnBuZ2AsXG4gICAgICAgICAgICAgICAgYCR7UEFUSC5JTUFHRS5NQUdJQ30vZGVjYXkvZGVjYXkucG5nYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILklNQUdFLk1BR0lDfS9kZWNheS9kZWNheUJsb3cucG5nYCxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzb3VuZDogW1xuICAgICAgICAgICAgICAgIGAke1BBVEguU09VTkQuTUFHSUN9L21hZ2ljQXJyb3cvTUFHSUNBUlcubXAzYCxcbiAgICAgICAgICAgICAgICBgJHtQQVRILlNPVU5ELk1BR0lDfS9kZWNheS9ERUNBWS5tcDNgXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBpbWFnZTogdGhpcy5tYWdpY0ltZ3NLZXksXG4gICAgICAgICAgICBzb3VuZDogdGhpcy5tYWdpY1NvdW5kS2V5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxvYWRNYW5hZ2VyLmFkZFVybCh7XG4gICAgICAgICAgICBpbWFnZTogbmFtZVRhc2tNYXAubWFwKCh7IGltYWdlIH0pID0+IGltYWdlKSxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgaW1hZ2U6IHRoaXMudGFza0ltZ3NLZXksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBsb2FkTWFuYWdlcjtcbiAgICB9XG5cbiAgICBhc3luYyBtYWluTG9naWMobmFtZSkge1xuICAgICAgICBjb25zdCBsb2FkTWFuYWdlciA9IHRoaXMubG9hZE1hbmFnZXI7XG4gICAgICAgIGNvbnN0IG1vbnN0ZXJGYWN0b3J5ID0gdGhpcy5tb25zdGVyRmFjdG9yeTtcbiAgICAgICAgY29uc3QgdGFza0ZhY3RvcnkgPSB0aGlzLnRhc2tGYWN0b3J5O1xuICAgICAgICBjb25zdCBtYWdpY0ZhY3RvcnkgPSB0aGlzLm1hZ2ljRmFjdG9yeTtcbiAgICAgICAgY29uc3QgdWlDb21wb25lbnRzID0gdGhpcy51aUNvbXBvbmVudHM7XG5cbiAgICAgICAgY29uc3Qgc3BlbGxTZWxJbWcgPSBsb2FkTWFuYWdlci5nZXRJbWFnZXNCeU5hbWUodGhpcy51aUltZ3NLZXkpWzldO1xuICAgICAgICBjb25zdCBtYWluQ2hhciA9IGxvYWRNYW5hZ2VyLmdldEltYWdlc0J5TmFtZSh0aGlzLm1haW5DaGFySW1nc0tleSlbMF07XG5cbiAgICAgICAgY29uc3QgbWFpbkNoYXJHcmFwaGljID0gbmV3IFBsYXllckdyYXBoaWNDb21wb25lbnQoJzElJywgJzExJScsIG1haW5DaGFyKTtcblxuICAgICAgICBjb25zdCB7IHdpZHRoOiBwbGF5ZXJXaWR0aCwgaGVpZ2h0OiBwbGF5ZXJIZWlnaHQgfSA9IG1haW5DaGFyR3JhcGhpYy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICBtYWluQ2hhckdyYXBoaWMuc2V0Qm91bmRpbmdDbGllbnRSZWN0KE1hdGguZmxvb3IoKHdpbmRvdy5pbm5lckhlaWdodCAtIDE1MCkgLyAyIC0gcGxheWVySGVpZ2h0IC8gMiksIE1hdGguZmxvb3Iod2luZG93LmlubmVyV2lkdGggLyAyIC0gcGxheWVyV2lkdGggLSAxMDApLCBwbGF5ZXJXaWR0aCwgcGxheWVySGVpZ2h0KTtcblxuICAgICAgICBsZXQgbW9uc3RlciA9IG1vbnN0ZXJGYWN0b3J5LmNyZWF0ZU1vbnN0ZXIoJzElJywgJzExJScpO1xuICAgICAgICB0aGlzLnNldEVuZW15KG1vbnN0ZXIpO1xuICAgICAgICBtb25zdGVyLmFkZE1hZ2ljKG1hZ2ljRmFjdG9yeS5jcmVhdGVNYWdpY0Fycm93KDUsIHRydWUpKTtcbiAgICAgICAgbW9uc3Rlci5hZGRNYWdpYyhtYWdpY0ZhY3RvcnkuY3JlYXRlSW1wbG9zaW9uQXJyb3coNSkpO1xuXG4gICAgICAgIGxldCBtb25zdGVyS2lsbGVkQ291bnQgPSAwO1xuXG4gICAgICAgIGNvbnN0IHBsYXllciA9IG5ldyBDaGFyYWN0ZXIobmFtZSwgMTAwLCAxMDAsIG1haW5DaGFyR3JhcGhpYyk7XG5cbiAgICAgICAgcGxheWVyLmFkZE1hZ2ljKG1hZ2ljRmFjdG9yeS5jcmVhdGVNYWdpY0Fycm93KDQwKSk7XG4gICAgICAgIHBsYXllci5hZGRNYWdpYyhtYWdpY0ZhY3RvcnkuY3JlYXRlSW1wbG9zaW9uQXJyb3coNDApKTtcblxuICAgICAgICB0aGlzLnNldFBsYXllcihwbGF5ZXIpO1xuXG4gICAgICAgIHdoaWxlKHBsYXllci5pc0FsaXZlKCkpIHtcbiAgICAgICAgICAgIGlmICghbW9uc3Rlci5pc0FsaXZlKCkpIHtcbiAgICAgICAgICAgICAgICBtb25zdGVyID0gbW9uc3RlckZhY3RvcnkuY3JlYXRlTW9uc3RlcignMSUnLCAnMTElJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFbmVteShtb25zdGVyKTtcblxuICAgICAgICAgICAgICAgIG1vbnN0ZXIuYWRkTWFnaWMobWFnaWNGYWN0b3J5LmNyZWF0ZU1hZ2ljQXJyb3coNSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgIG1vbnN0ZXIuYWRkTWFnaWMobWFnaWNGYWN0b3J5LmNyZWF0ZUltcGxvc2lvbkFycm93KDUpKTtcblxuICAgICAgICAgICAgICAgIG1vbnN0ZXJLaWxsZWRDb3VudCArPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtYWdpY1NlbGVjdGluZyA9IG5ldyBNYWdpY1NlbGVjdGluZ01vZGFsV2luZG93KE1hdGguY2VpbCh3aW5kb3cuaW5uZXJIZWlnaHQgLyAyIC0gKDEwICsgMTAwKSAvIDIgLSAxNTAgLyAyKSwgTWF0aC5mbG9vcih3aW5kb3cuaW5uZXJXaWR0aCAvIDIgLSAoMjAgKyAxMzYgKiAzKSAvIDIpLCAyMCArIDEzNiAqIDMsIDEwICsgMTAwICsgMyArIDE2ICsgMywgcGxheWVyLmdldE1hZ2ljcygpLCB7IGJhY2s6IHNwZWxsU2VsSW1nIH0pO1xuICAgICAgICAgICAgbWFnaWNTZWxlY3Rpbmcuc2V0QmFja2dyb3VuZENvbG9yKCcjYTAyNTZiJyk7XG4gICAgICAgICAgICBtYWdpY1NlbGVjdGluZy5zZXRPdmVyZmxvdygnc2Nyb2xsJyk7XG4gXG4gICAgICAgICAgICB1aUNvbXBvbmVudHMuYWRkQ29tcG9uZW50KG1hZ2ljU2VsZWN0aW5nKTtcblxuICAgICAgICAgICAgY29uc3QgbWFnaWMgPSBhd2FpdCBtYWdpY1NlbGVjdGluZy5zZWxlY3RNYWdpYygpO1xuXG4gICAgICAgICAgICBpZiAobWFnaWMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbWFnaWMgc2VsZWN0aW5nIGVycm9yJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVpQ29tcG9uZW50cy5yZW1vdmVDb21wb25lbnQobWFnaWNTZWxlY3RpbmcpO1xuXG4gICAgICAgICAgICBjb25zdCB0YXNrV2luZG93ID0gdGFza0ZhY3RvcnkuY3JlYXRlVGFzayhNYXRoLmNlaWwod2luZG93LmlubmVySGVpZ2h0IC8gMikgLSAzNDQgLyAyIC0gNTAsIE1hdGguY2VpbCgod2luZG93LmlubmVyV2lkdGggLSA0NjApIC8gMiksIDQ2MCwgMzQ0KTtcbiAgICAgICAgICAgIHRhc2tXaW5kb3cuc2V0QmFja2dyb3VuZENvbG9yKCcjZmZmZjAwJyk7XG5cbiAgICAgICAgICAgIHVpQ29tcG9uZW50cy5hZGRDb21wb25lbnQodGFza1dpbmRvdyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGFuc3dlck91dGNvbWUgPSBhd2FpdCB0YXNrV2luZG93LmdldFJlc3VsdCgpO1xuXG4gICAgICAgICAgICB1aUNvbXBvbmVudHMucmVtb3ZlQ29tcG9uZW50KHRhc2tXaW5kb3cpO1xuXG4gICAgICAgICAgICBpZiAoYW5zd2VyT3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHBsYXllci5hdHRhY2sobW9uc3RlciwgbWFnaWMsIHRoaXMuY2FudmFzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vbnN0ZXIuaXNBbGl2ZSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFnaWNzID0gbW9uc3Rlci5nZXRNYWdpY3MoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIChtYWdpY3MubGVuZ3RoIC0gMSkpO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgbW9uc3Rlci5hdHRhY2socGxheWVyLCBtYWdpY3NbaW5kZXhdLCB0aGlzLmNhbnZhcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3dSZXN1bHRUYWJsZShwbGF5ZXIsIG1vbnN0ZXJLaWxsZWRDb3VudCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2hvd0xvYWRpbmdTY3JlZW4oKSB7XG4gICAgICAgIGNvbnN0IHByb2dyZXNzQmFyQmFja2dyb3VuZCA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBwcm9ncmVzc0JhckJhY2tncm91bmQuc3JjID0gYCR7UEFUSC5JTUFHRS5VSX0vYmFyZGF0YS5qcGdgO1xuICAgICAgICBhd2FpdCBjcmVhdGVGaWxlUHJvbWlzZShwcm9ncmVzc0JhckJhY2tncm91bmQpO1xuXG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiBwcm9ncmVzc0JhckJhY2tncm91bmRXaWR0aCwgbmF0dXJhbEhlaWdodDogcHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kSGVpZ2h0IH0gPSBwcm9ncmVzc0JhckJhY2tncm91bmQ7XG4gICAgICAgIGNvbnN0IHByb2dyZXNzQmFyQmFja2dyb3VuZENvbXBvbmVudCA9IG5ldyBJbWFnZUNvbXBvbmVudChwcm9ncmVzc0JhckJhY2tncm91bmQsIDAsIDAsIHByb2dyZXNzQmFyQmFja2dyb3VuZFdpZHRoLCBwcm9ncmVzc0JhckJhY2tncm91bmRIZWlnaHQsIHByb2dyZXNzQmFyQmFja2dyb3VuZFdpZHRoLCBwcm9ncmVzc0JhckJhY2tncm91bmRIZWlnaHQsIDAsIDAsIHByb2dyZXNzQmFyQmFja2dyb3VuZFdpZHRoLCBwcm9ncmVzc0JhckJhY2tncm91bmRIZWlnaHQpO1xuXG4gICAgICAgIGNvbnN0IGxvYWRpbmdTY3JlZW4gPSBuZXcgQ29tcG9zaXRlQ29tcG9uZW50KDAsIDAsIHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgICAgICBjb25zdCBsb2FkaW5nUHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kQ29tcG9uZW50ID0gbmV3IENvbXBvc2l0ZUNvbXBvbmVudCgwLCAwLCBwcm9ncmVzc0JhckJhY2tncm91bmRXaWR0aCwgcHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kSGVpZ2h0LCBsb2FkaW5nU2NyZWVuKTtcbiAgICAgICAgbG9hZGluZ1Byb2dyZXNzQmFyQmFja2dyb3VuZENvbXBvbmVudC5hbGlnbkNlbnRlcigpO1xuICAgICAgICBsb2FkaW5nUHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kQ29tcG9uZW50LnNldEJhY2tncm91bmRJbWFnZShwcm9ncmVzc0JhckJhY2tncm91bmRDb21wb25lbnQpO1xuXG4gICAgICAgIGxvYWRpbmdTY3JlZW4uc2V0QmFja2dyb3VuZENvbG9yKCcjMDAwMDAwJyk7XG5cbiAgICAgICAgY29uc3QgbG9hZGluZ1Byb2dyZXNzQmFyID0gbmV3IFByb2dyZXNzQmFyKDAsIDAsIDExNCwgMTYsIDAsIDEwMCwgMCk7XG4gICAgICAgIGxvYWRpbmdQcm9ncmVzc0JhckJhY2tncm91bmRDb21wb25lbnQuYWRkQ29tcG9uZW50KGxvYWRpbmdQcm9ncmVzc0Jhcik7XG4gICAgICAgIGxvYWRpbmdQcm9ncmVzc0Jhci5hbGlnbkNlbnRlcigpO1xuXG4gICAgICAgIGxvYWRpbmdQcm9ncmVzc0Jhci5zZXRCYWNrZ3JvdW5kQ29sb3IoJ3JnYmEoMCwgMCwgMCwgMCknKTtcbiAgICAgICAgbG9hZGluZ1Byb2dyZXNzQmFyLmdldFRleHRDb21wb25lbnQoKS5zZXRUZXh0Q29sb3IoJyNmZmZmZmYnKTtcblxuICAgICAgICB0aGlzLmNhbnZhcy5hZGRTY2VuZShsb2FkaW5nU2NyZWVuKTtcblxuICAgICAgICBsb2FkaW5nU2NyZWVuLmdldExvYWRpbmdQcm9ncmVzc0JhciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAgbG9hZGluZ1Byb2dyZXNzQmFyO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBsb2FkaW5nU2NyZWVuO1xuICAgIH1cblxuICAgIHNob3dOYW1lRW50ZXIobmFtZSA9ICcnKSB7XG4gICAgICAgIGNvbnN0IHRleHRGaWVsZEltYWdlID0gdGhpcy5sb2FkTWFuYWdlci5nZXRJbWFnZXNCeU5hbWUodGhpcy51aUltZ3NLZXkpWzFdO1xuICAgICAgICBjb25zdCB7IG5hdHVyYWxXaWR0aDogdGV4dEZpZWxkV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IHRleHRGaWVsZEhlaWdodCB9ID0gdGV4dEZpZWxkSW1hZ2U7XG5cbiAgICAgICAgY29uc3QgbW9kYWxXaW5kb3dJbWFnZSA9IHRoaXMubG9hZE1hbmFnZXIuZ2V0SW1hZ2VzQnlOYW1lKHRoaXMudWlJbWdzS2V5KVsyXTtcbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IG1vZGFsV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IG1vZGFsSGVpZ2h0IH0gPSBtb2RhbFdpbmRvd0ltYWdlO1xuXG4gICAgICAgIGNvbnN0IG9rQnV0dG9uSW1hZ2UgPSB0aGlzLmxvYWRNYW5hZ2VyLmdldEltYWdlc0J5TmFtZSh0aGlzLnVpSW1nc0tleSlbM107XG4gICAgICAgIGNvbnN0IHsgbmF0dXJhbFdpZHRoOiBva0J1dHRvbldpZHRoLCBuYXR1cmFsSGVpZ2h0OiBva0J1dHRvbkhlaWdodCB9ID0gb2tCdXR0b25JbWFnZTtcblxuICAgICAgICBjb25zdCBtb2RhbFdpbmRvdyA9IG5ldyBUZXh0SW5wdXRNb2RhbFdpbmRvdygwLCAwLCBtb2RhbFdpZHRoLCBtb2RhbEhlaWdodCwgJ9CS0LLQtdC00LjRgtC1INGB0LLQvtC1INC40LzRjzonKTtcbiAgICAgICAgbW9kYWxXaW5kb3cuc2V0QmFja2dyb3VuZENvbG9yKCcjM2M3NmE3Jyk7XG4gICAgICAgIG1vZGFsV2luZG93LmFsaWduQ2VudGVyKCk7XG4gICAgICAgIG1vZGFsV2luZG93LnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQobW9kYWxXaW5kb3dJbWFnZSwgMCwgMCwgbW9kYWxXaWR0aCwgbW9kYWxIZWlnaHQsIG1vZGFsV2lkdGgsIG1vZGFsSGVpZ2h0LCAwLCAwLCBtb2RhbFdpZHRoLCBtb2RhbEhlaWdodCkpO1xuXG4gICAgICAgIG1vZGFsV2luZG93LmdldElucHV0VXNlckNvbXBvbmVudCgpLnNldEJvdW5kaW5nQ2xpZW50UmVjdCh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGV4dEZpZWxkV2lkdGgsIHRleHRGaWVsZEhlaWdodCk7XG4gICAgICAgIG1vZGFsV2luZG93LmdldElucHV0VXNlckNvbXBvbmVudCgpLnNldEJhY2tncm91bmRJbWFnZShuZXcgSW1hZ2VDb21wb25lbnQodGV4dEZpZWxkSW1hZ2UsIDAsIDAsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQsIDAsIDAsIHRleHRGaWVsZFdpZHRoLCB0ZXh0RmllbGRIZWlnaHQpKTtcblxuICAgICAgICBjb25zdCBvbmVHbHlwaFdpZHRoID0gTWF0aC5jZWlsKGdldFRleHRXaWR0aFdpdGhDYW52YXMoJ3gnLCAnbW9ub3NwYWNlJywgJzE2cHgnKSk7XG5cbiAgICAgICAgbW9kYWxXaW5kb3cuZ2V0SW5wdXRVc2VyQ29tcG9uZW50KCkubWF4VGV4dExlbmd0aCA9IE1hdGguZmxvb3IodGV4dEZpZWxkV2lkdGggLyBvbmVHbHlwaFdpZHRoKSArIDE7XG4gICAgICAgIG1vZGFsV2luZG93LmdldERlc2NyaXB0aW9uQ29tcG9uZW50KCkuc2V0QmFja2dyb3VuZENvbG9yKCdyZ2JhKDAsIDAsIDAsIDApJyk7XG4gICAgICAgIG1vZGFsV2luZG93LmdldERlc2NyaXB0aW9uQ29tcG9uZW50KCkuc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XG5cbiAgICAgICAgbW9kYWxXaW5kb3cuZ2V0T2tCdXR0b25Db21wb25lbnQoKS5zZXRCb3VuZGluZ0NsaWVudFJlY3QobW9kYWxIZWlnaHQgLSAxOSAtIG9rQnV0dG9uSGVpZ2h0LCBtb2RhbFdpZHRoIC0gMTkgLSBva0J1dHRvbldpZHRoIC8gMiwgb2tCdXR0b25XaWR0aCAvIDIsIG9rQnV0dG9uSGVpZ2h0KTtcbiAgICAgICAgbW9kYWxXaW5kb3cuZ2V0T2tCdXR0b25Db21wb25lbnQoKS5zZXRCYWNrZ3JvdW5kSW1hZ2UobmV3IEltYWdlQ29tcG9uZW50KG9rQnV0dG9uSW1hZ2UsIDAsIDAsIG9rQnV0dG9uV2lkdGgsIG9rQnV0dG9uSGVpZ2h0LCBva0J1dHRvbldpZHRoLCBva0J1dHRvbkhlaWdodCwgMCwgMCwgb2tCdXR0b25XaWR0aCAvIDIsIG9rQnV0dG9uSGVpZ2h0KSk7XG5cbiAgICAgICAgbW9kYWxXaW5kb3cuZ2V0SW5wdXRVc2VyQ29tcG9uZW50KCkuc2V0VGV4dChuYW1lKTtcblxuICAgICAgICByZXR1cm4gbW9kYWxXaW5kb3c7XG4gICAgfVxuXG4gICAgc2hvd1Jlc3VsdFRhYmxlKHBsYXllciwga2lsbGVkTW9uc3Rlcikge1xuICAgICAgICBjb25zdCB0YWJsZUltZyA9IHRoaXMubG9hZE1hbmFnZXIuZ2V0SW1hZ2VzQnlOYW1lKHRoaXMudWlJbWdzS2V5KVsxMF07XG4gICAgICAgIGNvbnN0IHJlbG9hZEJ1dHRvbkltZyA9IHRoaXMubG9hZE1hbmFnZXIuZ2V0SW1hZ2VzQnlOYW1lKHRoaXMudWlJbWdzS2V5KVsxMV07XG5cbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IHRhYmxlV2lkdGgsIG5hdHVyYWxIZWlnaHQ6IHRhYmxlSGVpZ2h0IH0gPSB0YWJsZUltZztcbiAgICAgICAgY29uc3QgdGFibGVJbWFnZUNvbXBvbmVudCA9IG5ldyBJbWFnZUNvbXBvbmVudCh0YWJsZUltZywgMCwgMCwgdGFibGVXaWR0aCwgdGFibGVIZWlnaHQsIHRhYmxlV2lkdGgsIHRhYmxlSGVpZ2h0LCAwLCAwLCB0YWJsZVdpZHRoLCB0YWJsZUhlaWdodCk7XG5cbiAgICAgICAgY29uc3QgeyBuYXR1cmFsV2lkdGg6IHJlbG9hZEJ1dHRvbldpZHRoLCBuYXR1cmFsSGVpZ2h0OiByZWxvYWRCdXR0b25IZWlnaHQgfSA9IHJlbG9hZEJ1dHRvbkltZztcbiAgICAgICAgY29uc3QgcmVsb2FkQnV0dG9uSW1hZ2VDb21wb25lbnQgPSBuZXcgSW1hZ2VDb21wb25lbnQocmVsb2FkQnV0dG9uSW1nLCAwLCAwLCByZWxvYWRCdXR0b25XaWR0aCwgcmVsb2FkQnV0dG9uSGVpZ2h0LCByZWxvYWRCdXR0b25XaWR0aCwgcmVsb2FkQnV0dG9uSGVpZ2h0LCAwLCAwLCByZWxvYWRCdXR0b25XaWR0aCwgcmVsb2FkQnV0dG9uSGVpZ2h0KTtcblxuICAgICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnNhdmVSZXN1bHQocGxheWVyLmdldE5hbWUoKSwga2lsbGVkTW9uc3Rlcik7XG5cbiAgICAgICAgY29uc3QgcmVjb3JkcyA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0U29ydGVkUmVjb3JkcygpO1xuXG4gICAgICAgIGNvbnN0IHJlY29yZFRhYmxlID0gbmV3IFRhYmxlKDAsIDAsIHRhYmxlV2lkdGgsIDI3NyAtIDI1LCByZWNvcmRzLmxlbmd0aCArIDEsIDIsIDEzMSwgMjUpO1xuICAgICAgICB0aGlzLnVpQ29tcG9uZW50cy5hZGRDb21wb25lbnQocmVjb3JkVGFibGUpO1xuICAgICAgICByZWNvcmRUYWJsZS5hbGlnbkNlbnRlcigpO1xuICAgICAgICByZWNvcmRUYWJsZS5zZXRCYWNrZ3JvdW5kSW1hZ2UodGFibGVJbWFnZUNvbXBvbmVudCk7XG4gICAgICAgIHJlY29yZFRhYmxlLmdldEJhY2tncm91bmRJbWFnZSgpLnNldFNpemUodGFibGVXaWR0aCwgdGFibGVIZWlnaHQpO1xuXG4gICAgICAgIGNvbnN0IGZpcnN0Q29sdW1uTmFtZSA9IG5ldyBMYWJlbCgwLCAwLCBNYXRoLmNlaWwoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcygn0JjQvNGPOicsICdtb25vc3BhY2UnLCAxNikpLCAxNiwgJ9CY0LzRjzonKTtcbiAgICAgICAgY29uc3Qgc2Vjb25kQ29sdW1uTmFtZSA9IG5ldyBMYWJlbCgwLCAwLCBNYXRoLmNlaWwoZ2V0VGV4dFdpZHRoV2l0aENhbnZhcygn0KPQsdC40YLQviDQvNC+0L3RgdGC0YDQvtCyOicsICdtb25vc3BhY2UnLCAxNikpLCAxNiwgJ9Cj0LHQuNGC0L4g0LzQvtC90YHRgtGA0L7QsjonKTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICBmaXJzdENvbHVtbk5hbWUuc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XG4gICAgICAgIHNlY29uZENvbHVtbk5hbWUuc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XG5cbiAgICAgICAgc2Vjb25kQ29sdW1uTmFtZS5zZXRGb250U2l6ZSgxNCk7XG5cbiAgICAgICAgcmVjb3JkVGFibGUuZ2V0VGFibGVDb21wb25lbnQoMCwgMCkuYWRkQ29tcG9uZW50KGZpcnN0Q29sdW1uTmFtZSk7XG4gICAgICAgIGZpcnN0Q29sdW1uTmFtZS5hbGlnbkNlbnRlcigpO1xuXG4gICAgICAgIHJlY29yZFRhYmxlLmdldFRhYmxlQ29tcG9uZW50KDAsIDEpLmFkZENvbXBvbmVudChzZWNvbmRDb2x1bW5OYW1lKTtcbiAgICAgICAgc2Vjb25kQ29sdW1uTmFtZS5hbGlnbkNlbnRlcigpO1xuXG4gICAgICAgIHJlY29yZHMuZm9yRWFjaCgocmVjb3JkLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IG5hbWUsIG1vbnN0ZXJLaWxsZWQgfSA9IHJlY29yZDtcblxuICAgICAgICAgICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmFtZUxhYmVsID0gbmV3IExhYmVsKDAsIDAsIE1hdGguY2VpbChnZXRUZXh0V2lkdGhXaXRoQ2FudmFzKG5hbWUsICdtb25vc3BhY2UnLCAxNikpLCAxNiwgbmFtZSk7XG4gICAgICAgICAgICBjb25zdCBtb25zdGVyS2lsbGVkTGFiZWwgPSBuZXcgTGFiZWwoMCwgMCwgTWF0aC5jZWlsKGdldFRleHRXaWR0aFdpdGhDYW52YXMobW9uc3RlcktpbGxlZCwgJ21vbm9zcGFjZScsIDE2KSksIDE2LCBTdHJpbmcobW9uc3RlcktpbGxlZCkpO1xuXG4gICAgICAgICAgICBuYW1lTGFiZWwuc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XG4gICAgICAgICAgICBtb25zdGVyS2lsbGVkTGFiZWwuc2V0VGV4dENvbG9yKCcjZmZmZmZmJyk7XG5cbiAgICAgICAgICAgIHJlY29yZFRhYmxlLmdldFRhYmxlQ29tcG9uZW50KDEgKyBpLCAwKS5hZGRDb21wb25lbnQobmFtZUxhYmVsKTtcbiAgICAgICAgICAgIG5hbWVMYWJlbC5hbGlnbkNlbnRlcigpO1xuXG4gICAgICAgICAgICByZWNvcmRUYWJsZS5nZXRUYWJsZUNvbXBvbmVudCgxICsgaSwgMSkuYWRkQ29tcG9uZW50KG1vbnN0ZXJLaWxsZWRMYWJlbCk7XG4gICAgICAgICAgICBtb25zdGVyS2lsbGVkTGFiZWwuYWxpZ25DZW50ZXIoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVjb3JkVGFibGUuc2V0T3ZlcmZsb3coJ3Njcm9sbCcpO1xuXG4gICAgICAgIGNvbnN0IHsgdG9wOiB0b3BUYWJsZSwgcmlnaHQ6IHJpZ2h0VGFibGUgfSA9IHJlY29yZFRhYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGNvbnN0IHJlc3RhcnRCdXR0b24gPSBuZXcgQnV0dG9uKHRvcFRhYmxlLCByaWdodFRhYmxlICsgNSwgcmVsb2FkQnV0dG9uV2lkdGgsIHJlbG9hZEJ1dHRvbkhlaWdodCwgJycpO1xuICAgICAgICByZXN0YXJ0QnV0dG9uLnNldEJhY2tncm91bmRJbWFnZShyZWxvYWRCdXR0b25JbWFnZUNvbXBvbmVudCk7XG5cbiAgICAgICAgcmVzdGFydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5NT1VTRS5NT1VTRV9ET1dOLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy51aUNvbXBvbmVudHMuZHJvcENoaWxkcmVuKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLnBsYXllci5nZXROYW1lKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0UGxheWVyKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5zZXRFbmVteShudWxsKTtcblxuICAgICAgICAgICAgdGhpcy5jYW52YXMuZ2V0SHRtbCgpLnN0eWxlLmN1cnNvciA9ICdhdXRvJztcblxuICAgICAgICAgICAgdGhpcy5zZXRVcFVJKG5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudWlDb21wb25lbnRzLmFkZENvbXBvbmVudChyZXN0YXJ0QnV0dG9uLCAncmVzdGFydCcpO1xuXG4gICAgICAgIHJldHVybiByZWNvcmRUYWJsZTtcbiAgICB9XG5cbiAgICBzZXRQbGF5ZXIocGxheWVyKSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXllcikge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMucmVtb3ZlU2NlbmUodGhpcy5wbGF5ZXIuZ2V0R3JhcGhpY0NvbXBvbmVudCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheWVyID0gcGxheWVyO1xuXG4gICAgICAgIGlmIChwbGF5ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXR1c0JhciA9IHRoaXMudWlDb21wb25lbnRzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuc3RhdHVzQmFyS2V5KTtcbiAgICAgICAgc3RhdHVzQmFyLnNldFBsYXllckluZm8oYCR7cGxheWVyLmdldE5hbWUoKX06YCwgcGxheWVyLmdldEN1cnJlbnRIUCgpKTtcblxuICAgICAgICBjb25zdCBwbGF5ZXJHcmFwaGljQ29tcG9uZW50ID0gcGxheWVyLmdldEdyYXBoaWNDb21wb25lbnQoKTtcblxuICAgICAgICBpZiAocGxheWVyR3JhcGhpY0NvbXBvbmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuYWRkU2NlbmUocGxheWVyR3JhcGhpY0NvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoZWFsdGhCYXIgPSB0aGlzLnVpQ29tcG9uZW50cy5nZXRDaGlsZENvbXBvbmVudCh0aGlzLnN0YXR1c0JhcktleSkuZ2V0UGxheWVySW5mb1dpbmRvdygpLmdldEhlYWx0aEJhcigpO1xuICAgICAgICBcbiAgICAgICAgcGxheWVyLmFkZEhQQ2hhbmdlTGlzdGVuZXIoaGVhbHRoQmFyLnNldFZhbHVlLmJpbmQoaGVhbHRoQmFyKSk7XG4gICAgfVxuXG4gICAgc2V0RW5lbXkoZW5lbXkpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5lbXkpIHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLnJlbW92ZVNjZW5lKHRoaXMuZW5lbXkuZ2V0R3JhcGhpY0NvbXBvbmVudCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmVteSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbmVteSA9IGVuZW15O1xuXG4gICAgICAgIGNvbnN0IHN0YXR1c0JhciA9IHRoaXMudWlDb21wb25lbnRzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuc3RhdHVzQmFyS2V5KTtcbiAgICAgICAgc3RhdHVzQmFyLnNldEVuZW15SW5mbyhgJHtlbmVteS5nZXROYW1lKCl9OmAsIGVuZW15LmdldEN1cnJlbnRIUCgpKTtcblxuICAgICAgICBjb25zdCBlbmVteUdyYXBoaWNDb21wb25lbnQgPSBlbmVteS5nZXRHcmFwaGljQ29tcG9uZW50KCk7XG5cbiAgICAgICAgaWYgKGVuZW15R3JhcGhpY0NvbXBvbmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuYWRkU2NlbmUoZW5lbXlHcmFwaGljQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhlYWx0aEJhciA9IHRoaXMudWlDb21wb25lbnRzLmdldENoaWxkQ29tcG9uZW50KHRoaXMuc3RhdHVzQmFyS2V5KS5nZXRFbmVteUluZm9XaW5kb3coKS5nZXRIZWFsdGhCYXIoKTtcbiAgICAgICAgXG4gICAgICAgIGVuZW15LmFkZEhQQ2hhbmdlTGlzdGVuZXIoaGVhbHRoQmFyLnNldFZhbHVlLmJpbmQoaGVhbHRoQmFyKSk7XG4gICAgfVxuXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnNUb0NhbnZhcygpIHtcbiAgICAgICAgdGhpcy5jYW52YXMuZ2V0SHRtbCgpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50UXVldWUuYWRkKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBldmVudHMuTU9VU0UuTU9VU0VfRE9XTixcbiAgICAgICAgICAgICAgICBzdWJ0eXBlOiAnTU9VU0UnLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2VDb29yZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBlLm9mZnNldFksXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBlLm9mZnNldFgsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNhbnZhcy5nZXRIdG1sKCkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50UXVldWUuYWRkKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBldmVudHMuS0VZQk9BUkQuS0VZX0RPV04sXG4gICAgICAgICAgICAgICAgc3VidHlwZTogJ0tFWUJPQVJEJyxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogZS5rZXlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNhbnZhcy5nZXRIdG1sKCkuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ldmVudFF1ZXVlLmFkZCh7XG4gICAgICAgICAgICAgICAgdHlwZTogZXZlbnRzLktFWUJPQVJELktFWV9QUkVTUyxcbiAgICAgICAgICAgICAgICBzdWJ0eXBlOiAnS0VZQk9BUkQnLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiBlLmtleVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNhbnZhcy5nZXRIdG1sKCkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRRdWV1ZS5hZGQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IGV2ZW50cy5NT1VTRS5NT1VTRV9NT1ZFLFxuICAgICAgICAgICAgICAgIHN1YnR5cGU6ICdNT1VTRScsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICBtb3VzZUNvb3JkOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGUub2Zmc2V0WSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IGUub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtYWluKHRpbWUpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubWFpbik7XG5cbiAgICAgICAgaWYgKHRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldlRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldlRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcblxuICAgICAgICAgICAgdGhpcy5yZW5kZXIodGltZSAtIHRoaXMucHJldlRpbWUpXG4gICAgXG4gICAgICAgICAgICB0aGlzLnByZXZUaW1lID0gdGltZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuZXZlbnRRdWV1ZS5oYXNOZXh0KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5ldmVudFF1ZXVlLmdldE5leHQoKTtcbiAgICBcbiAgICAgICAgICAgIHRoaXMudWkuaGFuZGxlRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKHRpbWVTdGFtcCkge1xuICAgICAgICB0aGlzLmNhbnZhcy5kcmF3KHRpbWVTdGFtcCk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==